//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Runtime.Versioning;
using System.Collections.Generic;
using Fractions;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using System.Numerics;
using UnitsNet.Units;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Electrical linear resistivity is a property of one dimensional conductors that represents the resistance per unit length.
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Electrical_resistivity_and_conductivity
    /// </remarks>
    [DataContract]
    public partial class ElectricLinearResistivity :  QuantityBase, IQuantity<ElectricLinearResistivityUnit>, IEquatable<ElectricLinearResistivity>, IComparable, IComparable<ElectricLinearResistivity>, IConvertible, IArithmetic, IFormattable
    {
        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Unit", Order = 1)]
        private readonly ElectricLinearResistivityUnit? _unit;

        static ElectricLinearResistivity()
        {
            BaseDimensions = new Dimensions(new Dictionary<Dimension, Fraction>()
            {
            {Dimension.Length, 1 },
            {Dimension.Mass, 1 },
            {Dimension.Time, -3 },
            {Dimension.Current, -2 },
            });
            BaseUnit = ElectricLinearResistivityUnit.OhmPerMeter;
            Units = Enum.GetValues(typeof(ElectricLinearResistivityUnit)).Cast<ElectricLinearResistivityUnit>().Except(new ElectricLinearResistivityUnit[]{ ElectricLinearResistivityUnit.Undefined }).ToArray();
            Zero = new ElectricLinearResistivity(0, BaseUnit);
            Info = new QuantityInfo<ElectricLinearResistivityUnit>("ElectricLinearResistivity",
                new UnitInfo<ElectricLinearResistivityUnit>[]
                {
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.KiloohmPerCentimeter, "KiloohmsPerCentimeter", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.KiloohmPerFoot, "KiloohmsPerFoot", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.KiloohmPerKilometer, "KiloohmsPerKilometer", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.KiloohmPerMeter, "KiloohmsPerMeter", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.KiloohmPerMile, "KiloohmsPerMile", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.MegaohmPerCentimeter, "MegaohmsPerCentimeter", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.MegaohmPerFoot, "MegaohmsPerFoot", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.MegaohmPerKilometer, "MegaohmsPerKilometer", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.MegaohmPerMeter, "MegaohmsPerMeter", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.MegaohmPerMile, "MegaohmsPerMile", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.MicroohmPerCentimeter, "MicroohmsPerCentimeter", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.MicroohmPerFoot, "MicroohmsPerFoot", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.MicroohmPerKilometer, "MicroohmsPerKilometer", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.MicroohmPerMeter, "MicroohmsPerMeter", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.MicroohmPerMile, "MicroohmsPerMile", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.MilliohmPerCentimeter, "MilliohmsPerCentimeter", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.MilliohmPerFoot, "MilliohmsPerFoot", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.MilliohmPerKilometer, "MilliohmsPerKilometer", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.MilliohmPerMeter, "MilliohmsPerMeter", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.MilliohmPerMile, "MilliohmsPerMile", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.NanoohmPerCentimeter, "NanoohmsPerCentimeter", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.NanoohmPerFoot, "NanoohmsPerFoot", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.NanoohmPerKilometer, "NanoohmsPerKilometer", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.NanoohmPerMeter, "NanoohmsPerMeter", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.NanoohmPerMile, "NanoohmsPerMile", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.OhmPerCentimeter, "OhmsPerCentimeter", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.OhmPerFoot, "OhmsPerFoot", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.OhmPerKilometer, "OhmsPerKilometer", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.OhmPerMeter, "OhmsPerMeter", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.OhmPerMile, "OhmsPerMile", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.PicoohmPerCentimeter, "PicoohmsPerCentimeter", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.PicoohmPerFoot, "PicoohmsPerFoot", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.PicoohmPerKilometer, "PicoohmsPerKilometer", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.PicoohmPerMeter, "PicoohmsPerMeter", BaseUnits.Undefined),
                    new UnitInfo<ElectricLinearResistivityUnit>(ElectricLinearResistivityUnit.PicoohmPerMile, "PicoohmsPerMile", BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions);

            DefaultConversionFunctions = new UnitConverter();

            RegisterDefaultConversions(DefaultConversionFunctions);
        }

#if NET6_0_OR_GREATER
        /// <inheritdoc/>
        [RequiresPreviewFeatures]
        public static IQuantity Construct(QuantityValue value, Enum unit) => new ElectricLinearResistivity((QuantityValue)value, (ElectricLinearResistivityUnit)unit);
#endif

        /// <summary>
        ///     Creates the quantity with the a value of zero.
        /// </summary>
        public ElectricLinearResistivity() : this(0, BaseUnit)
        {
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and base units.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public ElectricLinearResistivity(QuantityValue value) : this(value, BaseUnit)
        {
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and base units.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public ElectricLinearResistivity(double value) : this(new QuantityValue(value), BaseUnit)
        {
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and base units.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public ElectricLinearResistivity(Complex value) : this(new QuantityValue(value), BaseUnit)
        {
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and base units.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public new static IQuantity FromBaseUnits(QuantityValue value)
        {
            return new ElectricLinearResistivity(value);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public ElectricLinearResistivity(QuantityValue value, ElectricLinearResistivityUnit unit) : base(value, BaseDimensions)
        {
            if (unit == ElectricLinearResistivityUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public ElectricLinearResistivity(QuantityValue value, UnitSystem unitSystem) : base(value, BaseDimensions)
        {
            if (unitSystem is null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <summary>
        ///     The <see cref="UnitConverter" /> containing the default generated conversion functions for <see cref="ElectricLinearResistivity" /> instances.
        /// </summary>
        public static UnitConverter DefaultConversionFunctions { get; }

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<ElectricLinearResistivityUnit> Info { get; }

        /// <summary>
        ///     The <see cref="Dimensions" /> of this quantity.
        /// </summary>
        public static Dimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of ElectricLinearResistivity, which is OhmPerMeter. All conversions go via this value.
        /// </summary>
        public static ElectricLinearResistivityUnit BaseUnit { get; }

        /// <summary>
        ///     All units of measurement for the ElectricLinearResistivity quantity.
        /// </summary>
        public static ElectricLinearResistivityUnit[] Units { get; }

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit OhmPerMeter.
        /// </summary>
        public static ElectricLinearResistivity Zero { get; }

        #endregion

        #region Properties

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public override QuantityValue InBaseUnits => As(BaseUnit);

        /// <inheritdoc />
        public ElectricLinearResistivityUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public new QuantityInfo<ElectricLinearResistivityUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;


        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.KiloohmPerCentimeter"/>
        /// </summary>
        public QuantityValue KiloohmsPerCentimeter => As(ElectricLinearResistivityUnit.KiloohmPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.KiloohmPerFoot"/>
        /// </summary>
        public QuantityValue KiloohmsPerFoot => As(ElectricLinearResistivityUnit.KiloohmPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.KiloohmPerKilometer"/>
        /// </summary>
        public QuantityValue KiloohmsPerKilometer => As(ElectricLinearResistivityUnit.KiloohmPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.KiloohmPerMeter"/>
        /// </summary>
        public QuantityValue KiloohmsPerMeter => As(ElectricLinearResistivityUnit.KiloohmPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.KiloohmPerMile"/>
        /// </summary>
        public QuantityValue KiloohmsPerMile => As(ElectricLinearResistivityUnit.KiloohmPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.MegaohmPerCentimeter"/>
        /// </summary>
        public QuantityValue MegaohmsPerCentimeter => As(ElectricLinearResistivityUnit.MegaohmPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.MegaohmPerFoot"/>
        /// </summary>
        public QuantityValue MegaohmsPerFoot => As(ElectricLinearResistivityUnit.MegaohmPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.MegaohmPerKilometer"/>
        /// </summary>
        public QuantityValue MegaohmsPerKilometer => As(ElectricLinearResistivityUnit.MegaohmPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.MegaohmPerMeter"/>
        /// </summary>
        public QuantityValue MegaohmsPerMeter => As(ElectricLinearResistivityUnit.MegaohmPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.MegaohmPerMile"/>
        /// </summary>
        public QuantityValue MegaohmsPerMile => As(ElectricLinearResistivityUnit.MegaohmPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.MicroohmPerCentimeter"/>
        /// </summary>
        public QuantityValue MicroohmsPerCentimeter => As(ElectricLinearResistivityUnit.MicroohmPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.MicroohmPerFoot"/>
        /// </summary>
        public QuantityValue MicroohmsPerFoot => As(ElectricLinearResistivityUnit.MicroohmPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.MicroohmPerKilometer"/>
        /// </summary>
        public QuantityValue MicroohmsPerKilometer => As(ElectricLinearResistivityUnit.MicroohmPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.MicroohmPerMeter"/>
        /// </summary>
        public QuantityValue MicroohmsPerMeter => As(ElectricLinearResistivityUnit.MicroohmPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.MicroohmPerMile"/>
        /// </summary>
        public QuantityValue MicroohmsPerMile => As(ElectricLinearResistivityUnit.MicroohmPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.MilliohmPerCentimeter"/>
        /// </summary>
        public QuantityValue MilliohmsPerCentimeter => As(ElectricLinearResistivityUnit.MilliohmPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.MilliohmPerFoot"/>
        /// </summary>
        public QuantityValue MilliohmsPerFoot => As(ElectricLinearResistivityUnit.MilliohmPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.MilliohmPerKilometer"/>
        /// </summary>
        public QuantityValue MilliohmsPerKilometer => As(ElectricLinearResistivityUnit.MilliohmPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.MilliohmPerMeter"/>
        /// </summary>
        public QuantityValue MilliohmsPerMeter => As(ElectricLinearResistivityUnit.MilliohmPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.MilliohmPerMile"/>
        /// </summary>
        public QuantityValue MilliohmsPerMile => As(ElectricLinearResistivityUnit.MilliohmPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.NanoohmPerCentimeter"/>
        /// </summary>
        public QuantityValue NanoohmsPerCentimeter => As(ElectricLinearResistivityUnit.NanoohmPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.NanoohmPerFoot"/>
        /// </summary>
        public QuantityValue NanoohmsPerFoot => As(ElectricLinearResistivityUnit.NanoohmPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.NanoohmPerKilometer"/>
        /// </summary>
        public QuantityValue NanoohmsPerKilometer => As(ElectricLinearResistivityUnit.NanoohmPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.NanoohmPerMeter"/>
        /// </summary>
        public QuantityValue NanoohmsPerMeter => As(ElectricLinearResistivityUnit.NanoohmPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.NanoohmPerMile"/>
        /// </summary>
        public QuantityValue NanoohmsPerMile => As(ElectricLinearResistivityUnit.NanoohmPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.OhmPerCentimeter"/>
        /// </summary>
        public QuantityValue OhmsPerCentimeter => As(ElectricLinearResistivityUnit.OhmPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.OhmPerFoot"/>
        /// </summary>
        public QuantityValue OhmsPerFoot => As(ElectricLinearResistivityUnit.OhmPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.OhmPerKilometer"/>
        /// </summary>
        public QuantityValue OhmsPerKilometer => As(ElectricLinearResistivityUnit.OhmPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.OhmPerMeter"/>
        /// </summary>
        public QuantityValue OhmsPerMeter => As(ElectricLinearResistivityUnit.OhmPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.OhmPerMile"/>
        /// </summary>
        public QuantityValue OhmsPerMile => As(ElectricLinearResistivityUnit.OhmPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.PicoohmPerCentimeter"/>
        /// </summary>
        public QuantityValue PicoohmsPerCentimeter => As(ElectricLinearResistivityUnit.PicoohmPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.PicoohmPerFoot"/>
        /// </summary>
        public QuantityValue PicoohmsPerFoot => As(ElectricLinearResistivityUnit.PicoohmPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.PicoohmPerKilometer"/>
        /// </summary>
        public QuantityValue PicoohmsPerKilometer => As(ElectricLinearResistivityUnit.PicoohmPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.PicoohmPerMeter"/>
        /// </summary>
        public QuantityValue PicoohmsPerMeter => As(ElectricLinearResistivityUnit.PicoohmPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistivityUnit.PicoohmPerMile"/>
        /// </summary>
        public QuantityValue PicoohmsPerMile => As(ElectricLinearResistivityUnit.PicoohmPerMile);

        #endregion

        #region Static Methods

        /// <summary>
        /// Registers the default conversion functions in the given <see cref="UnitConverter"/> instance.
        /// </summary>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to register the default conversion functions in.</param>
        internal static void RegisterDefaultConversions(UnitConverter unitConverter)
        {
            // Register in unit converter: BaseUnit -> ElectricLinearResistivityUnit
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.KiloohmPerCentimeter, quantity => new ElectricLinearResistivity((quantity.Value * 100) / 1e3d, ElectricLinearResistivityUnit.KiloohmPerCentimeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.KiloohmPerFoot, quantity => new ElectricLinearResistivity((quantity.Value * 3.2808398950131234) / 1e3d, ElectricLinearResistivityUnit.KiloohmPerFoot));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.KiloohmPerKilometer, quantity => new ElectricLinearResistivity((quantity.Value / 1000) / 1e3d, ElectricLinearResistivityUnit.KiloohmPerKilometer));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.KiloohmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value) / 1e3d, ElectricLinearResistivityUnit.KiloohmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.KiloohmPerMile, quantity => new ElectricLinearResistivity((quantity.Value / 1609) / 1e3d, ElectricLinearResistivityUnit.KiloohmPerMile));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.MegaohmPerCentimeter, quantity => new ElectricLinearResistivity((quantity.Value * 100) / 1e6d, ElectricLinearResistivityUnit.MegaohmPerCentimeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.MegaohmPerFoot, quantity => new ElectricLinearResistivity((quantity.Value * 3.2808398950131234) / 1e6d, ElectricLinearResistivityUnit.MegaohmPerFoot));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.MegaohmPerKilometer, quantity => new ElectricLinearResistivity((quantity.Value / 1000) / 1e6d, ElectricLinearResistivityUnit.MegaohmPerKilometer));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.MegaohmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value) / 1e6d, ElectricLinearResistivityUnit.MegaohmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.MegaohmPerMile, quantity => new ElectricLinearResistivity((quantity.Value / 1609) / 1e6d, ElectricLinearResistivityUnit.MegaohmPerMile));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.MicroohmPerCentimeter, quantity => new ElectricLinearResistivity((quantity.Value * 100) / 1e-6d, ElectricLinearResistivityUnit.MicroohmPerCentimeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.MicroohmPerFoot, quantity => new ElectricLinearResistivity((quantity.Value * 3.2808398950131234) / 1e-6d, ElectricLinearResistivityUnit.MicroohmPerFoot));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.MicroohmPerKilometer, quantity => new ElectricLinearResistivity((quantity.Value / 1000) / 1e-6d, ElectricLinearResistivityUnit.MicroohmPerKilometer));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.MicroohmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value) / 1e-6d, ElectricLinearResistivityUnit.MicroohmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.MicroohmPerMile, quantity => new ElectricLinearResistivity((quantity.Value / 1609) / 1e-6d, ElectricLinearResistivityUnit.MicroohmPerMile));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.MilliohmPerCentimeter, quantity => new ElectricLinearResistivity((quantity.Value * 100) / 1e-3d, ElectricLinearResistivityUnit.MilliohmPerCentimeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.MilliohmPerFoot, quantity => new ElectricLinearResistivity((quantity.Value * 3.2808398950131234) / 1e-3d, ElectricLinearResistivityUnit.MilliohmPerFoot));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.MilliohmPerKilometer, quantity => new ElectricLinearResistivity((quantity.Value / 1000) / 1e-3d, ElectricLinearResistivityUnit.MilliohmPerKilometer));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.MilliohmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value) / 1e-3d, ElectricLinearResistivityUnit.MilliohmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.MilliohmPerMile, quantity => new ElectricLinearResistivity((quantity.Value / 1609) / 1e-3d, ElectricLinearResistivityUnit.MilliohmPerMile));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.NanoohmPerCentimeter, quantity => new ElectricLinearResistivity((quantity.Value * 100) / 1e-9d, ElectricLinearResistivityUnit.NanoohmPerCentimeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.NanoohmPerFoot, quantity => new ElectricLinearResistivity((quantity.Value * 3.2808398950131234) / 1e-9d, ElectricLinearResistivityUnit.NanoohmPerFoot));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.NanoohmPerKilometer, quantity => new ElectricLinearResistivity((quantity.Value / 1000) / 1e-9d, ElectricLinearResistivityUnit.NanoohmPerKilometer));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.NanoohmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value) / 1e-9d, ElectricLinearResistivityUnit.NanoohmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.NanoohmPerMile, quantity => new ElectricLinearResistivity((quantity.Value / 1609) / 1e-9d, ElectricLinearResistivityUnit.NanoohmPerMile));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.OhmPerCentimeter, quantity => new ElectricLinearResistivity(quantity.Value * 100, ElectricLinearResistivityUnit.OhmPerCentimeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.OhmPerFoot, quantity => new ElectricLinearResistivity(quantity.Value * 3.2808398950131234, ElectricLinearResistivityUnit.OhmPerFoot));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.OhmPerKilometer, quantity => new ElectricLinearResistivity(quantity.Value / 1000, ElectricLinearResistivityUnit.OhmPerKilometer));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.OhmPerMile, quantity => new ElectricLinearResistivity(quantity.Value / 1609, ElectricLinearResistivityUnit.OhmPerMile));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.PicoohmPerCentimeter, quantity => new ElectricLinearResistivity((quantity.Value * 100) / 1e-12d, ElectricLinearResistivityUnit.PicoohmPerCentimeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.PicoohmPerFoot, quantity => new ElectricLinearResistivity((quantity.Value * 3.2808398950131234) / 1e-12d, ElectricLinearResistivityUnit.PicoohmPerFoot));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.PicoohmPerKilometer, quantity => new ElectricLinearResistivity((quantity.Value / 1000) / 1e-12d, ElectricLinearResistivityUnit.PicoohmPerKilometer));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.PicoohmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value) / 1e-12d, ElectricLinearResistivityUnit.PicoohmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.PicoohmPerMile, quantity => new ElectricLinearResistivity((quantity.Value / 1609) / 1e-12d, ElectricLinearResistivityUnit.PicoohmPerMile));
            // Register in unit converter: BaseUnit <-> BaseUnit
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMeter, ElectricLinearResistivityUnit.OhmPerMeter, quantity => quantity);

            // Register in unit converter: ElectricLinearResistivityUnit -> BaseUnit
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.KiloohmPerCentimeter, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value / 100) * 1e3d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.KiloohmPerFoot, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value / 3.2808398950131234) * 1e3d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.KiloohmPerKilometer, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value * 1000) * 1e3d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.KiloohmPerMeter, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value) * 1e3d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.KiloohmPerMile, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value * 1609) * 1e3d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.MegaohmPerCentimeter, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value / 100) * 1e6d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.MegaohmPerFoot, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value / 3.2808398950131234) * 1e6d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.MegaohmPerKilometer, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value * 1000) * 1e6d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.MegaohmPerMeter, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value) * 1e6d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.MegaohmPerMile, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value * 1609) * 1e6d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.MicroohmPerCentimeter, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value / 100) * 1e-6d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.MicroohmPerFoot, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value / 3.2808398950131234) * 1e-6d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.MicroohmPerKilometer, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value * 1000) * 1e-6d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.MicroohmPerMeter, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value) * 1e-6d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.MicroohmPerMile, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value * 1609) * 1e-6d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.MilliohmPerCentimeter, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value / 100) * 1e-3d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.MilliohmPerFoot, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value / 3.2808398950131234) * 1e-3d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.MilliohmPerKilometer, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value * 1000) * 1e-3d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.MilliohmPerMeter, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value) * 1e-3d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.MilliohmPerMile, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value * 1609) * 1e-3d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.NanoohmPerCentimeter, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value / 100) * 1e-9d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.NanoohmPerFoot, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value / 3.2808398950131234) * 1e-9d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.NanoohmPerKilometer, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value * 1000) * 1e-9d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.NanoohmPerMeter, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value) * 1e-9d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.NanoohmPerMile, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value * 1609) * 1e-9d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerCentimeter, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity(quantity.Value / 100, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerFoot, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity(quantity.Value / 3.2808398950131234, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerKilometer, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity(quantity.Value * 1000, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.OhmPerMile, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity(quantity.Value * 1609, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.PicoohmPerCentimeter, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value / 100) * 1e-12d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.PicoohmPerFoot, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value / 3.2808398950131234) * 1e-12d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.PicoohmPerKilometer, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value * 1000) * 1e-12d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.PicoohmPerMeter, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value) * 1e-12d, ElectricLinearResistivityUnit.OhmPerMeter));
            unitConverter.SetConversionFunction<ElectricLinearResistivity>(ElectricLinearResistivityUnit.PicoohmPerMile, ElectricLinearResistivityUnit.OhmPerMeter, quantity => new ElectricLinearResistivity((quantity.Value * 1609) * 1e-12d, ElectricLinearResistivityUnit.OhmPerMeter));
        }

        internal static void MapGeneratedLocalizations(UnitAbbreviationsCache unitAbbreviationsCache)
        {
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.KiloohmPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"kΩ/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.KiloohmPerFoot, new CultureInfo("en-US"), false, true, new string[]{"kΩ/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.KiloohmPerKilometer, new CultureInfo("en-US"), false, true, new string[]{"kΩ/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.KiloohmPerMeter, new CultureInfo("en-US"), false, true, new string[]{"kΩ/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.KiloohmPerMile, new CultureInfo("en-US"), false, true, new string[]{"kΩ/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.MegaohmPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"MΩ/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.MegaohmPerFoot, new CultureInfo("en-US"), false, true, new string[]{"MΩ/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.MegaohmPerKilometer, new CultureInfo("en-US"), false, true, new string[]{"MΩ/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.MegaohmPerMeter, new CultureInfo("en-US"), false, true, new string[]{"MΩ/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.MegaohmPerMile, new CultureInfo("en-US"), false, true, new string[]{"MΩ/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.MicroohmPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"µΩ/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.MicroohmPerFoot, new CultureInfo("en-US"), false, true, new string[]{"µΩ/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.MicroohmPerKilometer, new CultureInfo("en-US"), false, true, new string[]{"µΩ/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.MicroohmPerMeter, new CultureInfo("en-US"), false, true, new string[]{"µΩ/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.MicroohmPerMile, new CultureInfo("en-US"), false, true, new string[]{"µΩ/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.MilliohmPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"mΩ/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.MilliohmPerFoot, new CultureInfo("en-US"), false, true, new string[]{"mΩ/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.MilliohmPerKilometer, new CultureInfo("en-US"), false, true, new string[]{"mΩ/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.MilliohmPerMeter, new CultureInfo("en-US"), false, true, new string[]{"mΩ/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.MilliohmPerMile, new CultureInfo("en-US"), false, true, new string[]{"mΩ/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.NanoohmPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"nΩ/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.NanoohmPerFoot, new CultureInfo("en-US"), false, true, new string[]{"nΩ/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.NanoohmPerKilometer, new CultureInfo("en-US"), false, true, new string[]{"nΩ/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.NanoohmPerMeter, new CultureInfo("en-US"), false, true, new string[]{"nΩ/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.NanoohmPerMile, new CultureInfo("en-US"), false, true, new string[]{"nΩ/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.OhmPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"Ω/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.OhmPerFoot, new CultureInfo("en-US"), false, true, new string[]{"Ω/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.OhmPerKilometer, new CultureInfo("en-US"), false, true, new string[]{"Ω/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.OhmPerMeter, new CultureInfo("en-US"), false, true, new string[]{"Ω/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.OhmPerMile, new CultureInfo("en-US"), false, true, new string[]{"Ω/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.PicoohmPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"pΩ/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.PicoohmPerFoot, new CultureInfo("en-US"), false, true, new string[]{"pΩ/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.PicoohmPerKilometer, new CultureInfo("en-US"), false, true, new string[]{"pΩ/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.PicoohmPerMeter, new CultureInfo("en-US"), false, true, new string[]{"pΩ/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistivityUnit.PicoohmPerMile, new CultureInfo("en-US"), false, true, new string[]{"pΩ/mi"});
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(ElectricLinearResistivityUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(ElectricLinearResistivityUnit unit, IFormatProvider? provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.KiloohmPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromKiloohmsPerCentimeter(QuantityValue kiloohmspercentimeter)
        {
            QuantityValue value = (QuantityValue) kiloohmspercentimeter;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.KiloohmPerCentimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.KiloohmPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromKiloohmsPerFoot(QuantityValue kiloohmsperfoot)
        {
            QuantityValue value = (QuantityValue) kiloohmsperfoot;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.KiloohmPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.KiloohmPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromKiloohmsPerKilometer(QuantityValue kiloohmsperkilometer)
        {
            QuantityValue value = (QuantityValue) kiloohmsperkilometer;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.KiloohmPerKilometer);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.KiloohmPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromKiloohmsPerMeter(QuantityValue kiloohmspermeter)
        {
            QuantityValue value = (QuantityValue) kiloohmspermeter;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.KiloohmPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.KiloohmPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromKiloohmsPerMile(QuantityValue kiloohmspermile)
        {
            QuantityValue value = (QuantityValue) kiloohmspermile;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.KiloohmPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.MegaohmPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromMegaohmsPerCentimeter(QuantityValue megaohmspercentimeter)
        {
            QuantityValue value = (QuantityValue) megaohmspercentimeter;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.MegaohmPerCentimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.MegaohmPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromMegaohmsPerFoot(QuantityValue megaohmsperfoot)
        {
            QuantityValue value = (QuantityValue) megaohmsperfoot;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.MegaohmPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.MegaohmPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromMegaohmsPerKilometer(QuantityValue megaohmsperkilometer)
        {
            QuantityValue value = (QuantityValue) megaohmsperkilometer;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.MegaohmPerKilometer);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.MegaohmPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromMegaohmsPerMeter(QuantityValue megaohmspermeter)
        {
            QuantityValue value = (QuantityValue) megaohmspermeter;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.MegaohmPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.MegaohmPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromMegaohmsPerMile(QuantityValue megaohmspermile)
        {
            QuantityValue value = (QuantityValue) megaohmspermile;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.MegaohmPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.MicroohmPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromMicroohmsPerCentimeter(QuantityValue microohmspercentimeter)
        {
            QuantityValue value = (QuantityValue) microohmspercentimeter;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.MicroohmPerCentimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.MicroohmPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromMicroohmsPerFoot(QuantityValue microohmsperfoot)
        {
            QuantityValue value = (QuantityValue) microohmsperfoot;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.MicroohmPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.MicroohmPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromMicroohmsPerKilometer(QuantityValue microohmsperkilometer)
        {
            QuantityValue value = (QuantityValue) microohmsperkilometer;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.MicroohmPerKilometer);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.MicroohmPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromMicroohmsPerMeter(QuantityValue microohmspermeter)
        {
            QuantityValue value = (QuantityValue) microohmspermeter;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.MicroohmPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.MicroohmPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromMicroohmsPerMile(QuantityValue microohmspermile)
        {
            QuantityValue value = (QuantityValue) microohmspermile;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.MicroohmPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.MilliohmPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromMilliohmsPerCentimeter(QuantityValue milliohmspercentimeter)
        {
            QuantityValue value = (QuantityValue) milliohmspercentimeter;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.MilliohmPerCentimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.MilliohmPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromMilliohmsPerFoot(QuantityValue milliohmsperfoot)
        {
            QuantityValue value = (QuantityValue) milliohmsperfoot;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.MilliohmPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.MilliohmPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromMilliohmsPerKilometer(QuantityValue milliohmsperkilometer)
        {
            QuantityValue value = (QuantityValue) milliohmsperkilometer;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.MilliohmPerKilometer);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.MilliohmPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromMilliohmsPerMeter(QuantityValue milliohmspermeter)
        {
            QuantityValue value = (QuantityValue) milliohmspermeter;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.MilliohmPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.MilliohmPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromMilliohmsPerMile(QuantityValue milliohmspermile)
        {
            QuantityValue value = (QuantityValue) milliohmspermile;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.MilliohmPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.NanoohmPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromNanoohmsPerCentimeter(QuantityValue nanoohmspercentimeter)
        {
            QuantityValue value = (QuantityValue) nanoohmspercentimeter;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.NanoohmPerCentimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.NanoohmPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromNanoohmsPerFoot(QuantityValue nanoohmsperfoot)
        {
            QuantityValue value = (QuantityValue) nanoohmsperfoot;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.NanoohmPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.NanoohmPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromNanoohmsPerKilometer(QuantityValue nanoohmsperkilometer)
        {
            QuantityValue value = (QuantityValue) nanoohmsperkilometer;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.NanoohmPerKilometer);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.NanoohmPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromNanoohmsPerMeter(QuantityValue nanoohmspermeter)
        {
            QuantityValue value = (QuantityValue) nanoohmspermeter;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.NanoohmPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.NanoohmPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromNanoohmsPerMile(QuantityValue nanoohmspermile)
        {
            QuantityValue value = (QuantityValue) nanoohmspermile;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.NanoohmPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.OhmPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromOhmsPerCentimeter(QuantityValue ohmspercentimeter)
        {
            QuantityValue value = (QuantityValue) ohmspercentimeter;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.OhmPerCentimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.OhmPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromOhmsPerFoot(QuantityValue ohmsperfoot)
        {
            QuantityValue value = (QuantityValue) ohmsperfoot;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.OhmPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.OhmPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromOhmsPerKilometer(QuantityValue ohmsperkilometer)
        {
            QuantityValue value = (QuantityValue) ohmsperkilometer;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.OhmPerKilometer);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.OhmPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromOhmsPerMeter(QuantityValue ohmspermeter)
        {
            QuantityValue value = (QuantityValue) ohmspermeter;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.OhmPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.OhmPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromOhmsPerMile(QuantityValue ohmspermile)
        {
            QuantityValue value = (QuantityValue) ohmspermile;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.OhmPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.PicoohmPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromPicoohmsPerCentimeter(QuantityValue picoohmspercentimeter)
        {
            QuantityValue value = (QuantityValue) picoohmspercentimeter;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.PicoohmPerCentimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.PicoohmPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromPicoohmsPerFoot(QuantityValue picoohmsperfoot)
        {
            QuantityValue value = (QuantityValue) picoohmsperfoot;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.PicoohmPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.PicoohmPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromPicoohmsPerKilometer(QuantityValue picoohmsperkilometer)
        {
            QuantityValue value = (QuantityValue) picoohmsperkilometer;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.PicoohmPerKilometer);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.PicoohmPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromPicoohmsPerMeter(QuantityValue picoohmspermeter)
        {
            QuantityValue value = (QuantityValue) picoohmspermeter;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.PicoohmPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistivity"/> from <see cref="ElectricLinearResistivityUnit.PicoohmPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricLinearResistivity FromPicoohmsPerMile(QuantityValue picoohmspermile)
        {
            QuantityValue value = (QuantityValue) picoohmspermile;
            return new ElectricLinearResistivity(value, ElectricLinearResistivityUnit.PicoohmPerMile);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElectricLinearResistivityUnit" /> to <see cref="ElectricLinearResistivity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ElectricLinearResistivity unit value.</returns>
        public static ElectricLinearResistivity From(QuantityValue value, ElectricLinearResistivityUnit fromUnit)
        {
            return new ElectricLinearResistivity((QuantityValue)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static ElectricLinearResistivity Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static ElectricLinearResistivity Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<ElectricLinearResistivity, ElectricLinearResistivityUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(string? str, out ElectricLinearResistivity result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse(string? str, IFormatProvider? provider, out ElectricLinearResistivity result)
        {
            return QuantityParser.Default.TryParse<ElectricLinearResistivity, ElectricLinearResistivityUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ElectricLinearResistivityUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ElectricLinearResistivityUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse<ElectricLinearResistivityUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.ElectricLinearResistivityUnit)"/>
        public static bool TryParseUnit(string str, out ElectricLinearResistivityUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider? provider, out ElectricLinearResistivityUnit unit)
        {
            return UnitParser.Default.TryParse<ElectricLinearResistivityUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static ElectricLinearResistivity operator -(ElectricLinearResistivity right)
        {
            return new ElectricLinearResistivity(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="ElectricLinearResistivity"/> from adding two <see cref="ElectricLinearResistivity"/>.</summary>
        public static ElectricLinearResistivity operator +(ElectricLinearResistivity left, ElectricLinearResistivity right)
        {
            return new ElectricLinearResistivity(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="ElectricLinearResistivity"/> from subtracting two <see cref="ElectricLinearResistivity"/>.</summary>
        public static ElectricLinearResistivity operator -(ElectricLinearResistivity left, ElectricLinearResistivity right)
        {
            return new ElectricLinearResistivity(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="ElectricLinearResistivity"/> from multiplying value and <see cref="ElectricLinearResistivity"/>.</summary>
        public static ElectricLinearResistivity operator *(QuantityValue left, ElectricLinearResistivity right)
        {
            return new ElectricLinearResistivity(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="ElectricLinearResistivity"/> from multiplying value and <see cref="ElectricLinearResistivity"/>.</summary>
        public static ElectricLinearResistivity operator *(ElectricLinearResistivity left, QuantityValue right)
        {
            return new ElectricLinearResistivity(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="ElectricLinearResistivity"/> from dividing <see cref="ElectricLinearResistivity"/> by value.</summary>
        public static ElectricLinearResistivity operator /(ElectricLinearResistivity left, QuantityValue right)
        {
            return new ElectricLinearResistivity(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="ElectricLinearResistivity"/> by <see cref="ElectricLinearResistivity"/>.</summary>
        public static QuantityValue operator /(ElectricLinearResistivity left, ElectricLinearResistivity right)
        {
            return left.OhmsPerMeter / right.OhmsPerMeter;
        }

        /// <summary>Negate the <see cref="ElectricLinearResistivity"/>.</summary>
        public new ElectricLinearResistivity Negate()
        {
            return new ElectricLinearResistivity(-this.Value, this.Unit);
        }

        /// <summary>Add two <see cref="ElectricLinearResistivity"/> together</summary>
        public ElectricLinearResistivity Add(ElectricLinearResistivity other)
        {
            return new ElectricLinearResistivity(this.Value + other.GetValueAs(this.Unit), this.Unit);
        }

        /// <summary>Subtract one <see cref="ElectricLinearResistivity"/> from another</summary>
        public ElectricLinearResistivity Subtract(ElectricLinearResistivity other)
        {
            return new ElectricLinearResistivity(this.Value - other.GetValueAs(this.Unit), this.Unit);
        }

        /// <summary>Scale the <see cref="ElectricLinearResistivity"/> by a constant</summary>
        public new ElectricLinearResistivity Scale(double scaleFactor)
        {
            return new ElectricLinearResistivity(scaleFactor * this.Value, this.Unit);
        }


        /// <summary>Negate the <see cref="ElectricLinearResistivity"/>.</summary>
        IQuantity IArithmetic.Negate() => Negate();

        /// <summary>Add two <see cref="ElectricLinearResistivity"/> together</summary>
        IQuantity IArithmetic.Add(IQuantity other) => Add((ElectricLinearResistivity)other);

        /// <summary>Subtract one <see cref="ElectricLinearResistivity"/> from another</summary>
        IQuantity IArithmetic.Subtract(IQuantity other) => Subtract((ElectricLinearResistivity)other);

        /// <summary>Scale the <see cref="ElectricLinearResistivity"/> by a constant</summary>
        IQuantity IArithmetic.Scale(double scaleFactor) => Scale(scaleFactor);

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(ElectricLinearResistivity left, ElectricLinearResistivity right)
        {
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(ElectricLinearResistivity left, ElectricLinearResistivity right)
        {
            return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(ElectricLinearResistivity left, ElectricLinearResistivity right)
        {
            return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(ElectricLinearResistivity left, ElectricLinearResistivity right)
        {
            return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(ElectricLinearResistivity, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(ElectricLinearResistivity left, ElectricLinearResistivity right)
        {
            if(left is null ^ right is null)
            {
                return false;
            }
            else if(left is null && right is null)
            {
                return true;
            }
            return left!.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(ElectricLinearResistivity, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(ElectricLinearResistivity left, ElectricLinearResistivity right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public new int CompareTo(object? obj)
        {
            if (obj is null) throw new ArgumentNullException(nameof(obj));
            if (!(obj is ElectricLinearResistivity objElectricLinearResistivity)) throw new ArgumentException("Expected type ElectricLinearResistivity.", nameof(obj));

            return CompareTo(objElectricLinearResistivity);
        }

        /// <inheritdoc />
        public int CompareTo(ElectricLinearResistivity? other)
        {
            if(other is ElectricLinearResistivity otherElectricLinearResistivity)
            {
                return Value.CompareTo(otherElectricLinearResistivity.GetValueAs(this.Unit));
            }
            return 1; //Any value is greater than null
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(ElectricLinearResistivity, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object? obj)
        {
            if (obj is null || !(obj is ElectricLinearResistivity objElectricLinearResistivity))
                return false;

            return Equals(objElectricLinearResistivity);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(ElectricLinearResistivity, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(ElectricLinearResistivity? other)
        {
            return Value.Equals(other?.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another ElectricLinearResistivity within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(ElectricLinearResistivity other, double tolerance, ComparisonType comparisonType)
        {
            if (tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            QuantityValue thisValue = this.Value;
            QuantityValue otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current ElectricLinearResistivity.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public QuantityValue As(ElectricLinearResistivityUnit unit)
        {
            if (Unit == unit)
                return Value;

            var converted = GetValueAs(unit);
            return converted;
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public QuantityValue As(UnitSystem unitSystem)
        {
            if (unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        QuantityValue IQuantity.As(Enum unit)
        {
            if (!(unit is ElectricLinearResistivityUnit unitAsElectricLinearResistivityUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(ElectricLinearResistivityUnit)} is supported.", nameof(unit));

            return As(unitAsElectricLinearResistivityUnit);
        }

        /// <summary>
        ///     Converts this ElectricLinearResistivity to another ElectricLinearResistivity with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <returns>A ElectricLinearResistivity with the specified unit.</returns>
        public ElectricLinearResistivity ToUnit(ElectricLinearResistivityUnit unit)
        {
            return ToUnit(unit, DefaultConversionFunctions);
        }

        /// <summary>
        ///     Converts this ElectricLinearResistivity to another ElectricLinearResistivity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to use for the conversion.</param>
        /// <returns>A ElectricLinearResistivity with the specified unit.</returns>
        public ElectricLinearResistivity ToUnit(ElectricLinearResistivityUnit unit, UnitConverter unitConverter)
        {
            if (Unit == unit)
            {
                // Already in requested units.
                return this;
            }
            else if (unitConverter.TryGetConversionFunction((typeof(ElectricLinearResistivity), Unit, typeof(ElectricLinearResistivity), unit), out var conversionFunction))
            {
                // Direct conversion to requested unit found. Return the converted quantity.
                var converted = conversionFunction(this);
                return (ElectricLinearResistivity)converted;
            }
            else if (Unit != BaseUnit)
            {
                // Direct conversion to requested unit NOT found. Convert to BaseUnit, and then from BaseUnit to requested unit.
                var inBaseUnits = ToUnit(BaseUnit);
                return inBaseUnits.ToUnit(unit);
            }
            else
            {
                throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if (!(unit is ElectricLinearResistivityUnit unitAsElectricLinearResistivityUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(ElectricLinearResistivityUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsElectricLinearResistivityUnit, DefaultConversionFunctions);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit, UnitConverter unitConverter)
        {
            if (!(unit is ElectricLinearResistivityUnit unitAsElectricLinearResistivityUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(ElectricLinearResistivityUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsElectricLinearResistivityUnit, unitConverter);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
#if NET5_0_OR_GREATER
        public override ElectricLinearResistivity ToUnit(UnitSystem unitSystem)
#else
        public override IQuantity ToUnit(UnitSystem unitSystem)
#endif
        {
            if (unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<ElectricLinearResistivityUnit> IQuantity<ElectricLinearResistivityUnit>.ToUnit(ElectricLinearResistivityUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<ElectricLinearResistivityUnit> IQuantity<ElectricLinearResistivityUnit>.ToUnit(ElectricLinearResistivityUnit unit, UnitConverter unitConverter) => ToUnit(unit, unitConverter);

        /// <inheritdoc />
        IQuantity<ElectricLinearResistivityUnit> IQuantity<ElectricLinearResistivityUnit>.ToUnit(UnitSystem unitSystem) => (IQuantity<ElectricLinearResistivityUnit>)ToUnit(unitSystem);

        private QuantityValue GetValueAs(ElectricLinearResistivityUnit unit)
        {
            var converted = ToUnit(unit);
            return (QuantityValue)converted.Value;
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public override string ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public override string ToString(string? format, IFormatProvider? provider)
        {
            return QuantityFormatter.Format<ElectricLinearResistivityUnit>(this, format, provider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider? provider)
        {
            throw new InvalidCastException($"Converting {typeof(ElectricLinearResistivity)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider? provider)
        {
            return Convert.ToByte(Value);
        }

        char IConvertible.ToChar(IFormatProvider? provider)
        {
            throw new InvalidCastException($"Converting {typeof(ElectricLinearResistivity)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider? provider)
        {
            throw new InvalidCastException($"Converting {typeof(ElectricLinearResistivity)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider? provider)
        {
            return Convert.ToDecimal(Value);
        }

        double IConvertible.ToDouble(IFormatProvider? provider)
        {
            return Convert.ToDouble(Value);
        }

        short IConvertible.ToInt16(IFormatProvider? provider)
        {
            return Convert.ToInt16(Value);
        }

        int IConvertible.ToInt32(IFormatProvider? provider)
        {
            return Convert.ToInt32(Value);
        }

        long IConvertible.ToInt64(IFormatProvider? provider)
        {
            return Convert.ToInt64(Value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider? provider)
        {
            return Convert.ToSByte(Value);
        }

        float IConvertible.ToSingle(IFormatProvider? provider)
        {
            return Convert.ToSingle(Value);
        }

        string IConvertible.ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider? provider)
        {
            if (conversionType == typeof(ElectricLinearResistivity))
                return this;
            else if (conversionType == typeof(ElectricLinearResistivityUnit))
                return Unit;
            else if (conversionType == typeof(QuantityInfo))
                return ElectricLinearResistivity.Info;
            else if (conversionType == typeof(Dimensions))
                return ElectricLinearResistivity.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(ElectricLinearResistivity)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider? provider)
        {
            return Convert.ToUInt16(Value);
        }

        uint IConvertible.ToUInt32(IFormatProvider? provider)
        {
            return Convert.ToUInt32(Value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider? provider)
        {
            return Convert.ToUInt64(Value);
        }

        #endregion
    }
}
