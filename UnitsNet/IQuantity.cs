// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Runtime.Versioning;
using JetBrains.Annotations;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <summary>
    ///     Represents a quantity.
    /// </summary>
    public interface IQuantity : IFormattable
    {
        ///// <summary>
        /////     The <see cref="QuantityType" /> of this quantity.
        ///// </summary>
        //[Obsolete("QuantityType will be removed in the future. Use QuantityInfo instead.")]
        //QuantityType Type { get; }

        ///// <summary>
        ///// Constructs a new instance of this quantity type with the given value and unit.
        ///// </summary>
        ///// <remarks>
        ///// This is an instance method that allows creating a quantity of matching type when in a generic context and the type may not be known.
        ///// </remarks>
        ///// <param name="value">The value of the quantity in the given unit</param>
        ///// <param name="unit">The enum value corresponding to the unit desired</param>
        //IQuantity Construct(double value, Enum unit);

        /// <summary>
        ///     The <see cref="UnitsNet.Dimensions" /> of this quantity.
        /// </summary>
        Dimensions Dimensions { get; }

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        QuantityInfo QuantityInfo { get; }

        /// <summary>
        ///     Gets the value in the given unit.
        /// </summary>
        /// <param name="unit">The unit enum value. The unit must be compatible, so for <see cref="Length"/> you should provide a <see cref="LengthUnit"/> value.</param>
        /// <returns>Value converted to the specified unit.</returns>
        /// <exception cref="InvalidCastException">Wrong unit enum type was given.</exception>
        QuantityValue As(Enum unit);

        ///// <summary>
        /////     Creates the quantity with the given numeric value and base units.
        ///// </summary>
        ///// <param name="value">The numeric value to construct this quantity with.</param>
        ///// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        //IQuantity FromBaseUnits(QuantityValue value);


        /// <summary>
        ///     Gets the value in the unit determined by the given <see cref="UnitSystem"/>. If multiple units were found for the given <see cref="UnitSystem"/>,
        ///     the first match will be used.
        /// </summary>
        /// <param name="unitSystem">The <see cref="UnitSystem"/> to convert the quantity value to.</param>
        /// <returns>The converted value.</returns>
        QuantityValue As(UnitSystem unitSystem);

        /// <summary>
        ///     The unit this quantity was constructed with -or- BaseUnit if default ctor was used.
        /// </summary>
        Enum Unit { get; }

        /// <summary>
        ///     The value this quantity was constructed with. See also <see cref="Unit"/>.
        /// </summary>
        QuantityValue Value { get; }
        /// <summary>
        ///     The value of this quantity in base units. See also <see cref="Unit"/>.
        /// </summary>
        QuantityValue InBaseUnits { get; }

        /// <summary>
        ///     Converts this <see cref="IQuantity"/> to an <see cref="IQuantity"/> in the given <paramref name="unit"/>.
        ///     This is equivilent to calling <see cref="ToUnit(Enum, UnitConverter)"/> with <paramref name="unit"/> and
        ///     the quantity's DefaultConversionFunctions, which are generated by UnitsNet.
        /// </summary>
        /// <param name="unit">
        ///     The unit <see cref="Enum"/> value. The <see cref="Enum"/> must be compatible with the units of the <see cref="IQuantity"/>.
        ///     For example, if the <see cref="IQuantity"/> is a <see cref="Length"/>, you should provide a <see cref="LengthUnit"/> value.
        /// </param>
        /// <exception cref="NotImplementedException">Conversion was not possible from this <see cref="IQuantity"/> to <paramref name="unit"/>.</exception>
        /// <returns>A new <see cref="IQuantity"/> in the given <paramref name="unit"/>.</returns>
        IQuantity ToUnit(Enum unit);

        /// <summary>
        ///     Converts this <see cref="IQuantity"/> to an <see cref="IQuantity"/> in the given <paramref name="unit"/> using the given <paramref name="unitConverter"/>.
        /// </summary>
        /// <param name="unit">
        ///     The unit <see cref="Enum"/> value. The <see cref="Enum"/> must be compatible with the units of the <see cref="IQuantity"/>.
        ///     For example, if the <see cref="IQuantity"/> is a <see cref="Length"/>, you should provide a <see cref="LengthUnit"/> value.
        /// </param>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to use when converting the <see cref="IQuantity"/>.</param>
        /// <exception cref="NotImplementedException">Conversion was not possible from this <see cref="IQuantity"/> to <paramref name="unit"/>.</exception>
        /// <returns>A new <see cref="IQuantity"/> in the given <paramref name="unit"/>.</returns>
        IQuantity ToUnit(Enum unit, UnitConverter unitConverter);

        /// <summary>
        ///     Converts to a quantity with a unit determined by the given <see cref="UnitSystem"/>, which affects things like <see cref="IQuantity.ToString(System.IFormatProvider)"/>.
        ///     If multiple units were found for the given <see cref="UnitSystem"/>, the first match will be used.
        /// </summary>
        /// <param name="unitSystem">The <see cref="UnitSystem"/> to convert the quantity to.</param>
        /// <returns>A new quantity with the determined unit.</returns>
        IQuantity ToUnit(UnitSystem unitSystem);

        /// <summary>
        ///     Gets the string representation of value and unit. Uses two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        string ToString(IFormatProvider? provider);


        ///// <summary>
        /////     Get string representation of value and unit.
        ///// </summary>
        ///// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        ///// <returns>String representation.</returns>
        ///// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        //[Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        //string ToString(IFormatProvider? provider, int significantDigitsAfterRadix);

        ///// <summary>
        /////     Get string representation of value and unit.
        ///// </summary>
        ///// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        ///// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        ///// <returns>String representation.</returns>
        ///// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        //[Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        //string ToString(IFormatProvider? provider, [NotNull] string format, [NotNull] params object[] args);


    }

    /// <summary>
    ///     A stronger typed interface where the unit enum type is known, to avoid passing in the
    ///     wrong unit enum type and not having to cast from <see cref="Enum"/>.
    /// </summary>
    /// <example>
    ///     IQuantity{LengthUnit} length;
    ///     double centimeters = length.As(LengthUnit.Centimeter); // Type safety on enum type
    /// </example>
    public interface IQuantity<TUnitType> : IQuantity where TUnitType : Enum
    {
        /// <summary>
        ///     Convert to a unit representation <typeparamref name="TUnitType"/>.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        QuantityValue As(TUnitType unit);

        /// <inheritdoc cref="IQuantity.Unit"/>
        new TUnitType Unit { get; }

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        new QuantityInfo<TUnitType> QuantityInfo { get; }

        /// <summary>
        ///     Converts this <see cref="IQuantity{TUnitType}"/> to an <see cref="IQuantity{TUnitType}"/> in the given <paramref name="unit"/>.
        ///     This is equivilent to calling <see cref="ToUnit(TUnitType, UnitConverter)"/> with <paramref name="unit"/> and
        ///     the quantity's DefaultConversionFunctions, which are generated by UnitsNet.
        /// </summary>
        /// <param name="unit">The unit value.</param>
        /// <exception cref="NotImplementedException">Conversion was not possible from this <see cref="IQuantity"/> to <paramref name="unit"/>.</exception>
        /// <returns>A new <see cref="IQuantity{TUnitType}"/> in the given <paramref name="unit"/>.</returns>
        IQuantity<TUnitType> ToUnit(TUnitType unit);

        /// <summary>
        ///     Converts this <see cref="IQuantity{TUnitType}"/> to an <see cref="IQuantity{TUnitType}"/> in the given <paramref name="unit"/> using the given <paramref name="unitConverter"/>.
        /// </summary>
        /// <param name="unit">The unit value.</param>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to use when converting the <see cref="IQuantity"/>.</param>
        /// <exception cref="NotImplementedException">Conversion was not possible from this <see cref="IQuantity"/> to <paramref name="unit"/>.</exception>
        /// <returns>A new <see cref="IQuantity{TUnitType}"/> in the given <paramref name="unit"/>.</returns>
        IQuantity<TUnitType> ToUnit(TUnitType unit, UnitConverter unitConverter);

        /// <summary>
        ///     Converts to a quantity with a unit determined by the given <see cref="UnitSystem"/>, which affects things like <see cref="IQuantity.ToString(System.IFormatProvider)"/>.
        ///     If multiple units were found for the given <see cref="UnitSystem"/>, the first match will be used.
        /// </summary>
        /// <param name="unitSystem">The <see cref="UnitSystem"/> to convert the quantity to.</param>
        /// <returns>A new quantity with the determined unit.</returns>
        new IQuantity<TUnitType> ToUnit(UnitSystem unitSystem);



        

    }
}
