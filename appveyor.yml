version: '{build}'
image: Visual Studio 2019

# Don't build PR commits twice
skip_branch_with_pr: true

# Don't build tags, avoid duplicate builds on master when bumping version
skip_tags: true

# Don't build changes to docs
skip_commits:
 files:
   - docs/*
   - '**/*.md'

# Only fetch the latest commits to reduce time to download on agent, but support pushes containing multiple commits
clone_depth: 20

# build cache to preserve files/folders between builds
cache:
  - packages -> **\packages.config  # preserve "packages" directory in the root of build folder but will reset it if packages.config is modified
  - '%LocalAppData%\NuGet\Cache'    # NuGet < v3
  - '%LocalAppData%\NuGet\v3-cache' # NuGet v3

# Set environment variables here
# environment:

# Uncomment me to enable Remote Desktop for the duration of the build (when debugging hanging builds).
# Password is configured as envvar APPVEYOR_RDP_PASSWORD in AppVeyor UI.
# Scripts that run before cloning repository.
# init:
  # - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

# Uncomment me to enable Remote Desktop AFTER build. Build is blocked until a special "lock" file on VM desktop is deleted (max 60 mins).
# Password is configured as envvar APPVEYOR_RDP_PASSWORD in AppVeyor UI.
# on_finish:
  # - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

# Scripts that run after cloning repository.
# install:

build_script:
- ps: |
    # Build, test, pack and push nugets
    .\\build-with-wrc.bat
    $BuildExitCode = $LASTEXITCODE

    # Upload test results to AppVeyor
    $wc = New-Object 'System.Net.WebClient'

    if (Test-Path .\\Artifacts\\Logs\\) {
        Get-ChildItem .\\Artifacts\\Logs\\*Test*.xml | %{
            $wc.UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", $_.FullName)
        }
    }

    if ($BuildExitCode -ne 0) {
        Write-Host "Build failed with exit code $BuildExitCode."
        exit $BuildExitCode
    }

# Upload code coverage reports to codecov.io.
# https://docs.codecov.com/docs/codecov-uploader
after_test:
- ps: |
    $ProgressPreference = 'SilentlyContinue'
    Invoke-WebRequest -Uri https://keybase.io/codecovsecurity/pgp_keys.asc -OutFile codecov.asc
    gpg.exe --import codecov.asc

    Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe -Outfile codecov.exe
    Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe.SHA256SUM -Outfile codecov.exe.SHA256SUM
    Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe.SHA256SUM.sig -Outfile codecov.exe.SHA256SUM.sig

    gpg.exe --verify codecov.exe.SHA256SUM.sig codecov.exe.SHA256SUM
    If ($(Compare-Object -ReferenceObject  $(($(certUtil -hashfile codecov.exe SHA256)[1], "codecov.exe") -join "  ") -DifferenceObject $(Get-Content codecov.exe.SHA256SUM)).length -eq 0) { echo "SHASUM verified" } Else {exit 1}

    .\codecov.exe "Artifacts/Coverage" -t $env:codecov_upload_token

artifacts:
- path: Artifacts\UnitsNet.zip
- path: 'Artifacts\NuGet\*.nupkg' # find all NuGet packages recursively
- path: Artifacts\Coverage

deploy:
- provider: NuGet
  api_key:
    secure: wUADhxnlTxLj2ge4k459gEuu6tLtVBD1lN2MacpH1glEvA2LKyM2QbJYKlNTu6vg
  on:
    branch: master

- provider: NuGet
  api_key:
    secure: wUADhxnlTxLj2ge4k459gEuu6tLtVBD1lN2MacpH1glEvA2LKyM2QbJYKlNTu6vg
  on:
    branch: release/*
