//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToElectricLinearResistivity
{
    /// <summary>
    /// A number to ElectricLinearResistivity Extensions
    /// </summary>
    public static class NumberToElectricLinearResistivityExtensions
    {
        /// <inheritdoc cref="ElectricLinearResistivity.FromKiloohmsPerCentimeter(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity KiloohmsPerCentimeter<T>(this T value) =>
            ElectricLinearResistivity.FromKiloohmsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromKiloohmsPerFoot(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity KiloohmsPerFoot<T>(this T value) =>
            ElectricLinearResistivity.FromKiloohmsPerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromKiloohmsPerKilometer(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity KiloohmsPerKilometer<T>(this T value) =>
            ElectricLinearResistivity.FromKiloohmsPerKilometer(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromKiloohmsPerMeter(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity KiloohmsPerMeter<T>(this T value) =>
            ElectricLinearResistivity.FromKiloohmsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromKiloohmsPerMile(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity KiloohmsPerMile<T>(this T value) =>
            ElectricLinearResistivity.FromKiloohmsPerMile(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromMegaohmsPerCentimeter(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity MegaohmsPerCentimeter<T>(this T value) =>
            ElectricLinearResistivity.FromMegaohmsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromMegaohmsPerFoot(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity MegaohmsPerFoot<T>(this T value) =>
            ElectricLinearResistivity.FromMegaohmsPerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromMegaohmsPerKilometer(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity MegaohmsPerKilometer<T>(this T value) =>
            ElectricLinearResistivity.FromMegaohmsPerKilometer(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromMegaohmsPerMeter(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity MegaohmsPerMeter<T>(this T value) =>
            ElectricLinearResistivity.FromMegaohmsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromMegaohmsPerMile(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity MegaohmsPerMile<T>(this T value) =>
            ElectricLinearResistivity.FromMegaohmsPerMile(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromMicroohmsPerCentimeter(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity MicroohmsPerCentimeter<T>(this T value) =>
            ElectricLinearResistivity.FromMicroohmsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromMicroohmsPerFoot(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity MicroohmsPerFoot<T>(this T value) =>
            ElectricLinearResistivity.FromMicroohmsPerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromMicroohmsPerKilometer(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity MicroohmsPerKilometer<T>(this T value) =>
            ElectricLinearResistivity.FromMicroohmsPerKilometer(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromMicroohmsPerMeter(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity MicroohmsPerMeter<T>(this T value) =>
            ElectricLinearResistivity.FromMicroohmsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromMicroohmsPerMile(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity MicroohmsPerMile<T>(this T value) =>
            ElectricLinearResistivity.FromMicroohmsPerMile(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromMilliohmsPerCentimeter(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity MilliohmsPerCentimeter<T>(this T value) =>
            ElectricLinearResistivity.FromMilliohmsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromMilliohmsPerFoot(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity MilliohmsPerFoot<T>(this T value) =>
            ElectricLinearResistivity.FromMilliohmsPerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromMilliohmsPerKilometer(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity MilliohmsPerKilometer<T>(this T value) =>
            ElectricLinearResistivity.FromMilliohmsPerKilometer(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromMilliohmsPerMeter(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity MilliohmsPerMeter<T>(this T value) =>
            ElectricLinearResistivity.FromMilliohmsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromMilliohmsPerMile(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity MilliohmsPerMile<T>(this T value) =>
            ElectricLinearResistivity.FromMilliohmsPerMile(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromNanoohmsPerCentimeter(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity NanoohmsPerCentimeter<T>(this T value) =>
            ElectricLinearResistivity.FromNanoohmsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromNanoohmsPerFoot(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity NanoohmsPerFoot<T>(this T value) =>
            ElectricLinearResistivity.FromNanoohmsPerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromNanoohmsPerKilometer(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity NanoohmsPerKilometer<T>(this T value) =>
            ElectricLinearResistivity.FromNanoohmsPerKilometer(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromNanoohmsPerMeter(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity NanoohmsPerMeter<T>(this T value) =>
            ElectricLinearResistivity.FromNanoohmsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromNanoohmsPerMile(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity NanoohmsPerMile<T>(this T value) =>
            ElectricLinearResistivity.FromNanoohmsPerMile(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromOhmsPerCentimeter(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity OhmsPerCentimeter<T>(this T value) =>
            ElectricLinearResistivity.FromOhmsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromOhmsPerFoot(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity OhmsPerFoot<T>(this T value) =>
            ElectricLinearResistivity.FromOhmsPerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromOhmsPerKilometer(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity OhmsPerKilometer<T>(this T value) =>
            ElectricLinearResistivity.FromOhmsPerKilometer(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromOhmsPerMeter(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity OhmsPerMeter<T>(this T value) =>
            ElectricLinearResistivity.FromOhmsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromOhmsPerMile(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity OhmsPerMile<T>(this T value) =>
            ElectricLinearResistivity.FromOhmsPerMile(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromPicoohmsPerCentimeter(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity PicoohmsPerCentimeter<T>(this T value) =>
            ElectricLinearResistivity.FromPicoohmsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromPicoohmsPerFoot(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity PicoohmsPerFoot<T>(this T value) =>
            ElectricLinearResistivity.FromPicoohmsPerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromPicoohmsPerKilometer(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity PicoohmsPerKilometer<T>(this T value) =>
            ElectricLinearResistivity.FromPicoohmsPerKilometer(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromPicoohmsPerMeter(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity PicoohmsPerMeter<T>(this T value) =>
            ElectricLinearResistivity.FromPicoohmsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricLinearResistivity.FromPicoohmsPerMile(UnitsNet.QuantityValue)" />
        public static ElectricLinearResistivity PicoohmsPerMile<T>(this T value) =>
            ElectricLinearResistivity.FromPicoohmsPerMile(Convert.ToDouble(value));

    }
}
