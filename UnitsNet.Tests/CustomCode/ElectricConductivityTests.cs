//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated (once) by \generate-code.bat, but will not be
//     regenerated when it already exists. The purpose of creating this file is to make
//     it easier to remember to implement all the unit conversion test cases.
//
//     Whenever a new unit is added to this quantity and \generate-code.bat is run,
//     the base test class will get a new abstract property and cause a compile error
//     in this derived class, reminding the developer to implement the test case
//     for the new unit.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.


using System;
using UnitsNet.Units;
using Xunit;

namespace UnitsNet.Tests.CustomCode
{
    public class ElectricConductivityTests : ElectricConductivityTestsBase
    {
        protected override bool SupportsSIUnitSystem => true;
        protected override double SiemensPerMeterInOneSiemensPerMeter => 1;
        protected override double SiemensPerInchInOneSiemensPerMeter => 2.54e-2;
        protected override double SiemensPerFootInOneSiemensPerMeter => 3.048e-1;

        protected override double KilosiemensPerFootInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double KilosiemensPerInchInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double KilosiemensPerKilofootInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double KilosiemensPerKilometerInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double KilosiemensPerMileInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double KilosiemensPerMeterInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double MegasiemensPerFootInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double MegasiemensPerInchInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double MegasiemensPerKilofootInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double MegasiemensPerKilometerInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double MegasiemensPerMileInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double MegasiemensPerMeterInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double MicrosiemensPerFootInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double MicrosiemensPerInchInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double MicrosiemensPerKilofootInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double MicrosiemensPerKilometerInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double MicrosiemensPerMileInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double MicrosiemensPerMeterInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double MillisiemensPerFootInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double MillisiemensPerInchInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double MillisiemensPerKilofootInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double MillisiemensPerKilometerInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double MillisiemensPerMileInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double MillisiemensPerMeterInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double NanosiemensPerFootInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double NanosiemensPerInchInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double NanosiemensPerKilofootInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double NanosiemensPerKilometerInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double NanosiemensPerMileInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double NanosiemensPerMeterInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double PicosiemensPerFootInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double PicosiemensPerInchInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double PicosiemensPerKilofootInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double PicosiemensPerKilometerInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double PicosiemensPerMileInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double PicosiemensPerMeterInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double SiemensPerKilofootInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double SiemensPerKilometerInOneSiemensPerMeter => throw new NotImplementedException();

        protected override double SiemensPerMileInOneSiemensPerMeter => throw new NotImplementedException();

        [Theory]
        [InlineData( -1.0, -1.0 )]
        [InlineData( -2.0, -0.5 )]
        [InlineData( 0.0, 0.0 )]
        [InlineData( 1.0, 1.0 )]
        [InlineData( 2.0, 0.5 )]
        public static void InverseTest( double value, double expected )
        {
            var unit = new ElectricConductivity( value, ElectricConductivityUnit.SiemensPerMeter );
            var inverse = unit.Inverse();

            Assert.Equal( expected, inverse.OhmMeters );
        }
    }
}
