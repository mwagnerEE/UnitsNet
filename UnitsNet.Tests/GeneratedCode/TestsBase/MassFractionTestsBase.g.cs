//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of MassFraction.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MassFractionTestsBase : QuantityTestsBase
    {
        protected abstract double CentigramsPerGramInOneDecimalFraction { get; }
        protected abstract double CentigramsPerKilogramInOneDecimalFraction { get; }
        protected abstract double DecagramsPerGramInOneDecimalFraction { get; }
        protected abstract double DecagramsPerKilogramInOneDecimalFraction { get; }
        protected abstract double DecigramsPerGramInOneDecimalFraction { get; }
        protected abstract double DecigramsPerKilogramInOneDecimalFraction { get; }
        protected abstract double DecimalFractionsInOneDecimalFraction { get; }
        protected abstract double GramsPerGramInOneDecimalFraction { get; }
        protected abstract double GramsPerKilogramInOneDecimalFraction { get; }
        protected abstract double HectogramsPerGramInOneDecimalFraction { get; }
        protected abstract double HectogramsPerKilogramInOneDecimalFraction { get; }
        protected abstract double KilogramsPerGramInOneDecimalFraction { get; }
        protected abstract double KilogramsPerKilogramInOneDecimalFraction { get; }
        protected abstract double MicrogramsPerGramInOneDecimalFraction { get; }
        protected abstract double MicrogramsPerKilogramInOneDecimalFraction { get; }
        protected abstract double MilligramsPerGramInOneDecimalFraction { get; }
        protected abstract double MilligramsPerKilogramInOneDecimalFraction { get; }
        protected abstract double NanogramsPerGramInOneDecimalFraction { get; }
        protected abstract double NanogramsPerKilogramInOneDecimalFraction { get; }
        protected abstract double PartsPerBillionInOneDecimalFraction { get; }
        protected abstract double PartsPerMillionInOneDecimalFraction { get; }
        protected abstract double PartsPerThousandInOneDecimalFraction { get; }
        protected abstract double PartsPerTrillionInOneDecimalFraction { get; }
        protected abstract double PercentInOneDecimalFraction { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentigramsPerGramTolerance { get { return 1e-5; } }
        protected virtual double CentigramsPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double DecagramsPerGramTolerance { get { return 1e-5; } }
        protected virtual double DecagramsPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerGramTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double DecimalFractionsTolerance { get { return 1e-5; } }
        protected virtual double GramsPerGramTolerance { get { return 1e-5; } }
        protected virtual double GramsPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double HectogramsPerGramTolerance { get { return 1e-5; } }
        protected virtual double HectogramsPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerGramTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerGramTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerGramTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerGramTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double PartsPerBillionTolerance { get { return 1e-5; } }
        protected virtual double PartsPerMillionTolerance { get { return 1e-5; } }
        protected virtual double PartsPerThousandTolerance { get { return 1e-5; } }
        protected virtual double PartsPerTrillionTolerance { get { return 1e-5; } }
        protected virtual double PercentTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(MassFractionUnit unit)
        {
            return unit switch
            {
                MassFractionUnit.CentigramPerGram => (CentigramsPerGramInOneDecimalFraction, CentigramsPerGramTolerance),
                MassFractionUnit.CentigramPerKilogram => (CentigramsPerKilogramInOneDecimalFraction, CentigramsPerKilogramTolerance),
                MassFractionUnit.DecagramPerGram => (DecagramsPerGramInOneDecimalFraction, DecagramsPerGramTolerance),
                MassFractionUnit.DecagramPerKilogram => (DecagramsPerKilogramInOneDecimalFraction, DecagramsPerKilogramTolerance),
                MassFractionUnit.DecigramPerGram => (DecigramsPerGramInOneDecimalFraction, DecigramsPerGramTolerance),
                MassFractionUnit.DecigramPerKilogram => (DecigramsPerKilogramInOneDecimalFraction, DecigramsPerKilogramTolerance),
                MassFractionUnit.DecimalFraction => (DecimalFractionsInOneDecimalFraction, DecimalFractionsTolerance),
                MassFractionUnit.GramPerGram => (GramsPerGramInOneDecimalFraction, GramsPerGramTolerance),
                MassFractionUnit.GramPerKilogram => (GramsPerKilogramInOneDecimalFraction, GramsPerKilogramTolerance),
                MassFractionUnit.HectogramPerGram => (HectogramsPerGramInOneDecimalFraction, HectogramsPerGramTolerance),
                MassFractionUnit.HectogramPerKilogram => (HectogramsPerKilogramInOneDecimalFraction, HectogramsPerKilogramTolerance),
                MassFractionUnit.KilogramPerGram => (KilogramsPerGramInOneDecimalFraction, KilogramsPerGramTolerance),
                MassFractionUnit.KilogramPerKilogram => (KilogramsPerKilogramInOneDecimalFraction, KilogramsPerKilogramTolerance),
                MassFractionUnit.MicrogramPerGram => (MicrogramsPerGramInOneDecimalFraction, MicrogramsPerGramTolerance),
                MassFractionUnit.MicrogramPerKilogram => (MicrogramsPerKilogramInOneDecimalFraction, MicrogramsPerKilogramTolerance),
                MassFractionUnit.MilligramPerGram => (MilligramsPerGramInOneDecimalFraction, MilligramsPerGramTolerance),
                MassFractionUnit.MilligramPerKilogram => (MilligramsPerKilogramInOneDecimalFraction, MilligramsPerKilogramTolerance),
                MassFractionUnit.NanogramPerGram => (NanogramsPerGramInOneDecimalFraction, NanogramsPerGramTolerance),
                MassFractionUnit.NanogramPerKilogram => (NanogramsPerKilogramInOneDecimalFraction, NanogramsPerKilogramTolerance),
                MassFractionUnit.PartPerBillion => (PartsPerBillionInOneDecimalFraction, PartsPerBillionTolerance),
                MassFractionUnit.PartPerMillion => (PartsPerMillionInOneDecimalFraction, PartsPerMillionTolerance),
                MassFractionUnit.PartPerThousand => (PartsPerThousandInOneDecimalFraction, PartsPerThousandTolerance),
                MassFractionUnit.PartPerTrillion => (PartsPerTrillionInOneDecimalFraction, PartsPerTrillionTolerance),
                MassFractionUnit.Percent => (PercentInOneDecimalFraction, PercentTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { MassFractionUnit.CentigramPerGram },
            new object[] { MassFractionUnit.CentigramPerKilogram },
            new object[] { MassFractionUnit.DecagramPerGram },
            new object[] { MassFractionUnit.DecagramPerKilogram },
            new object[] { MassFractionUnit.DecigramPerGram },
            new object[] { MassFractionUnit.DecigramPerKilogram },
            new object[] { MassFractionUnit.DecimalFraction },
            new object[] { MassFractionUnit.GramPerGram },
            new object[] { MassFractionUnit.GramPerKilogram },
            new object[] { MassFractionUnit.HectogramPerGram },
            new object[] { MassFractionUnit.HectogramPerKilogram },
            new object[] { MassFractionUnit.KilogramPerGram },
            new object[] { MassFractionUnit.KilogramPerKilogram },
            new object[] { MassFractionUnit.MicrogramPerGram },
            new object[] { MassFractionUnit.MicrogramPerKilogram },
            new object[] { MassFractionUnit.MilligramPerGram },
            new object[] { MassFractionUnit.MilligramPerKilogram },
            new object[] { MassFractionUnit.NanogramPerGram },
            new object[] { MassFractionUnit.NanogramPerKilogram },
            new object[] { MassFractionUnit.PartPerBillion },
            new object[] { MassFractionUnit.PartPerMillion },
            new object[] { MassFractionUnit.PartPerThousand },
            new object[] { MassFractionUnit.PartPerTrillion },
            new object[] { MassFractionUnit.Percent },
        };

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MassFraction((QuantityValue)0.0, MassFractionUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new MassFraction();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(MassFractionUnit.DecimalFraction, quantity.Unit);
        }


        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new MassFraction(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new MassFraction(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (MassFraction) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void MassFraction_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new MassFraction(1, MassFractionUnit.DecimalFraction);

            QuantityInfo<MassFractionUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(MassFraction.Zero, quantityInfo.Zero);
            Assert.Equal("MassFraction", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<MassFractionUnit>().Except(new[] {MassFractionUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

        }

        [Fact]
        public void DecimalFractionToMassFractionUnits()
        {
            MassFraction decimalfraction = MassFraction.FromDecimalFractions(1);
            AssertEx.EqualTolerance(CentigramsPerGramInOneDecimalFraction, decimalfraction.CentigramsPerGram, CentigramsPerGramTolerance);
            AssertEx.EqualTolerance(CentigramsPerKilogramInOneDecimalFraction, decimalfraction.CentigramsPerKilogram, CentigramsPerKilogramTolerance);
            AssertEx.EqualTolerance(DecagramsPerGramInOneDecimalFraction, decimalfraction.DecagramsPerGram, DecagramsPerGramTolerance);
            AssertEx.EqualTolerance(DecagramsPerKilogramInOneDecimalFraction, decimalfraction.DecagramsPerKilogram, DecagramsPerKilogramTolerance);
            AssertEx.EqualTolerance(DecigramsPerGramInOneDecimalFraction, decimalfraction.DecigramsPerGram, DecigramsPerGramTolerance);
            AssertEx.EqualTolerance(DecigramsPerKilogramInOneDecimalFraction, decimalfraction.DecigramsPerKilogram, DecigramsPerKilogramTolerance);
            AssertEx.EqualTolerance(DecimalFractionsInOneDecimalFraction, decimalfraction.DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(GramsPerGramInOneDecimalFraction, decimalfraction.GramsPerGram, GramsPerGramTolerance);
            AssertEx.EqualTolerance(GramsPerKilogramInOneDecimalFraction, decimalfraction.GramsPerKilogram, GramsPerKilogramTolerance);
            AssertEx.EqualTolerance(HectogramsPerGramInOneDecimalFraction, decimalfraction.HectogramsPerGram, HectogramsPerGramTolerance);
            AssertEx.EqualTolerance(HectogramsPerKilogramInOneDecimalFraction, decimalfraction.HectogramsPerKilogram, HectogramsPerKilogramTolerance);
            AssertEx.EqualTolerance(KilogramsPerGramInOneDecimalFraction, decimalfraction.KilogramsPerGram, KilogramsPerGramTolerance);
            AssertEx.EqualTolerance(KilogramsPerKilogramInOneDecimalFraction, decimalfraction.KilogramsPerKilogram, KilogramsPerKilogramTolerance);
            AssertEx.EqualTolerance(MicrogramsPerGramInOneDecimalFraction, decimalfraction.MicrogramsPerGram, MicrogramsPerGramTolerance);
            AssertEx.EqualTolerance(MicrogramsPerKilogramInOneDecimalFraction, decimalfraction.MicrogramsPerKilogram, MicrogramsPerKilogramTolerance);
            AssertEx.EqualTolerance(MilligramsPerGramInOneDecimalFraction, decimalfraction.MilligramsPerGram, MilligramsPerGramTolerance);
            AssertEx.EqualTolerance(MilligramsPerKilogramInOneDecimalFraction, decimalfraction.MilligramsPerKilogram, MilligramsPerKilogramTolerance);
            AssertEx.EqualTolerance(NanogramsPerGramInOneDecimalFraction, decimalfraction.NanogramsPerGram, NanogramsPerGramTolerance);
            AssertEx.EqualTolerance(NanogramsPerKilogramInOneDecimalFraction, decimalfraction.NanogramsPerKilogram, NanogramsPerKilogramTolerance);
            AssertEx.EqualTolerance(PartsPerBillionInOneDecimalFraction, decimalfraction.PartsPerBillion, PartsPerBillionTolerance);
            AssertEx.EqualTolerance(PartsPerMillionInOneDecimalFraction, decimalfraction.PartsPerMillion, PartsPerMillionTolerance);
            AssertEx.EqualTolerance(PartsPerThousandInOneDecimalFraction, decimalfraction.PartsPerThousand, PartsPerThousandTolerance);
            AssertEx.EqualTolerance(PartsPerTrillionInOneDecimalFraction, decimalfraction.PartsPerTrillion, PartsPerTrillionTolerance);
            AssertEx.EqualTolerance(PercentInOneDecimalFraction, decimalfraction.Percent, PercentTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = MassFraction.From(1, MassFractionUnit.CentigramPerGram);
            AssertEx.EqualTolerance(1, quantity00.CentigramsPerGram, CentigramsPerGramTolerance);
            Assert.Equal(MassFractionUnit.CentigramPerGram, quantity00.Unit);

            var quantity01 = MassFraction.From(1, MassFractionUnit.CentigramPerKilogram);
            AssertEx.EqualTolerance(1, quantity01.CentigramsPerKilogram, CentigramsPerKilogramTolerance);
            Assert.Equal(MassFractionUnit.CentigramPerKilogram, quantity01.Unit);

            var quantity02 = MassFraction.From(1, MassFractionUnit.DecagramPerGram);
            AssertEx.EqualTolerance(1, quantity02.DecagramsPerGram, DecagramsPerGramTolerance);
            Assert.Equal(MassFractionUnit.DecagramPerGram, quantity02.Unit);

            var quantity03 = MassFraction.From(1, MassFractionUnit.DecagramPerKilogram);
            AssertEx.EqualTolerance(1, quantity03.DecagramsPerKilogram, DecagramsPerKilogramTolerance);
            Assert.Equal(MassFractionUnit.DecagramPerKilogram, quantity03.Unit);

            var quantity04 = MassFraction.From(1, MassFractionUnit.DecigramPerGram);
            AssertEx.EqualTolerance(1, quantity04.DecigramsPerGram, DecigramsPerGramTolerance);
            Assert.Equal(MassFractionUnit.DecigramPerGram, quantity04.Unit);

            var quantity05 = MassFraction.From(1, MassFractionUnit.DecigramPerKilogram);
            AssertEx.EqualTolerance(1, quantity05.DecigramsPerKilogram, DecigramsPerKilogramTolerance);
            Assert.Equal(MassFractionUnit.DecigramPerKilogram, quantity05.Unit);

            var quantity06 = MassFraction.From(1, MassFractionUnit.DecimalFraction);
            AssertEx.EqualTolerance(1, quantity06.DecimalFractions, DecimalFractionsTolerance);
            Assert.Equal(MassFractionUnit.DecimalFraction, quantity06.Unit);

            var quantity07 = MassFraction.From(1, MassFractionUnit.GramPerGram);
            AssertEx.EqualTolerance(1, quantity07.GramsPerGram, GramsPerGramTolerance);
            Assert.Equal(MassFractionUnit.GramPerGram, quantity07.Unit);

            var quantity08 = MassFraction.From(1, MassFractionUnit.GramPerKilogram);
            AssertEx.EqualTolerance(1, quantity08.GramsPerKilogram, GramsPerKilogramTolerance);
            Assert.Equal(MassFractionUnit.GramPerKilogram, quantity08.Unit);

            var quantity09 = MassFraction.From(1, MassFractionUnit.HectogramPerGram);
            AssertEx.EqualTolerance(1, quantity09.HectogramsPerGram, HectogramsPerGramTolerance);
            Assert.Equal(MassFractionUnit.HectogramPerGram, quantity09.Unit);

            var quantity10 = MassFraction.From(1, MassFractionUnit.HectogramPerKilogram);
            AssertEx.EqualTolerance(1, quantity10.HectogramsPerKilogram, HectogramsPerKilogramTolerance);
            Assert.Equal(MassFractionUnit.HectogramPerKilogram, quantity10.Unit);

            var quantity11 = MassFraction.From(1, MassFractionUnit.KilogramPerGram);
            AssertEx.EqualTolerance(1, quantity11.KilogramsPerGram, KilogramsPerGramTolerance);
            Assert.Equal(MassFractionUnit.KilogramPerGram, quantity11.Unit);

            var quantity12 = MassFraction.From(1, MassFractionUnit.KilogramPerKilogram);
            AssertEx.EqualTolerance(1, quantity12.KilogramsPerKilogram, KilogramsPerKilogramTolerance);
            Assert.Equal(MassFractionUnit.KilogramPerKilogram, quantity12.Unit);

            var quantity13 = MassFraction.From(1, MassFractionUnit.MicrogramPerGram);
            AssertEx.EqualTolerance(1, quantity13.MicrogramsPerGram, MicrogramsPerGramTolerance);
            Assert.Equal(MassFractionUnit.MicrogramPerGram, quantity13.Unit);

            var quantity14 = MassFraction.From(1, MassFractionUnit.MicrogramPerKilogram);
            AssertEx.EqualTolerance(1, quantity14.MicrogramsPerKilogram, MicrogramsPerKilogramTolerance);
            Assert.Equal(MassFractionUnit.MicrogramPerKilogram, quantity14.Unit);

            var quantity15 = MassFraction.From(1, MassFractionUnit.MilligramPerGram);
            AssertEx.EqualTolerance(1, quantity15.MilligramsPerGram, MilligramsPerGramTolerance);
            Assert.Equal(MassFractionUnit.MilligramPerGram, quantity15.Unit);

            var quantity16 = MassFraction.From(1, MassFractionUnit.MilligramPerKilogram);
            AssertEx.EqualTolerance(1, quantity16.MilligramsPerKilogram, MilligramsPerKilogramTolerance);
            Assert.Equal(MassFractionUnit.MilligramPerKilogram, quantity16.Unit);

            var quantity17 = MassFraction.From(1, MassFractionUnit.NanogramPerGram);
            AssertEx.EqualTolerance(1, quantity17.NanogramsPerGram, NanogramsPerGramTolerance);
            Assert.Equal(MassFractionUnit.NanogramPerGram, quantity17.Unit);

            var quantity18 = MassFraction.From(1, MassFractionUnit.NanogramPerKilogram);
            AssertEx.EqualTolerance(1, quantity18.NanogramsPerKilogram, NanogramsPerKilogramTolerance);
            Assert.Equal(MassFractionUnit.NanogramPerKilogram, quantity18.Unit);

            var quantity19 = MassFraction.From(1, MassFractionUnit.PartPerBillion);
            AssertEx.EqualTolerance(1, quantity19.PartsPerBillion, PartsPerBillionTolerance);
            Assert.Equal(MassFractionUnit.PartPerBillion, quantity19.Unit);

            var quantity20 = MassFraction.From(1, MassFractionUnit.PartPerMillion);
            AssertEx.EqualTolerance(1, quantity20.PartsPerMillion, PartsPerMillionTolerance);
            Assert.Equal(MassFractionUnit.PartPerMillion, quantity20.Unit);

            var quantity21 = MassFraction.From(1, MassFractionUnit.PartPerThousand);
            AssertEx.EqualTolerance(1, quantity21.PartsPerThousand, PartsPerThousandTolerance);
            Assert.Equal(MassFractionUnit.PartPerThousand, quantity21.Unit);

            var quantity22 = MassFraction.From(1, MassFractionUnit.PartPerTrillion);
            AssertEx.EqualTolerance(1, quantity22.PartsPerTrillion, PartsPerTrillionTolerance);
            Assert.Equal(MassFractionUnit.PartPerTrillion, quantity22.Unit);

            var quantity23 = MassFraction.From(1, MassFractionUnit.Percent);
            AssertEx.EqualTolerance(1, quantity23.Percent, PercentTolerance);
            Assert.Equal(MassFractionUnit.Percent, quantity23.Unit);

        }

        [Fact]
        public void As()
        {
            var decimalfraction = MassFraction.FromDecimalFractions(1);
            AssertEx.EqualTolerance(CentigramsPerGramInOneDecimalFraction, decimalfraction.As(MassFractionUnit.CentigramPerGram), CentigramsPerGramTolerance);
            AssertEx.EqualTolerance(CentigramsPerKilogramInOneDecimalFraction, decimalfraction.As(MassFractionUnit.CentigramPerKilogram), CentigramsPerKilogramTolerance);
            AssertEx.EqualTolerance(DecagramsPerGramInOneDecimalFraction, decimalfraction.As(MassFractionUnit.DecagramPerGram), DecagramsPerGramTolerance);
            AssertEx.EqualTolerance(DecagramsPerKilogramInOneDecimalFraction, decimalfraction.As(MassFractionUnit.DecagramPerKilogram), DecagramsPerKilogramTolerance);
            AssertEx.EqualTolerance(DecigramsPerGramInOneDecimalFraction, decimalfraction.As(MassFractionUnit.DecigramPerGram), DecigramsPerGramTolerance);
            AssertEx.EqualTolerance(DecigramsPerKilogramInOneDecimalFraction, decimalfraction.As(MassFractionUnit.DecigramPerKilogram), DecigramsPerKilogramTolerance);
            AssertEx.EqualTolerance(DecimalFractionsInOneDecimalFraction, decimalfraction.As(MassFractionUnit.DecimalFraction), DecimalFractionsTolerance);
            AssertEx.EqualTolerance(GramsPerGramInOneDecimalFraction, decimalfraction.As(MassFractionUnit.GramPerGram), GramsPerGramTolerance);
            AssertEx.EqualTolerance(GramsPerKilogramInOneDecimalFraction, decimalfraction.As(MassFractionUnit.GramPerKilogram), GramsPerKilogramTolerance);
            AssertEx.EqualTolerance(HectogramsPerGramInOneDecimalFraction, decimalfraction.As(MassFractionUnit.HectogramPerGram), HectogramsPerGramTolerance);
            AssertEx.EqualTolerance(HectogramsPerKilogramInOneDecimalFraction, decimalfraction.As(MassFractionUnit.HectogramPerKilogram), HectogramsPerKilogramTolerance);
            AssertEx.EqualTolerance(KilogramsPerGramInOneDecimalFraction, decimalfraction.As(MassFractionUnit.KilogramPerGram), KilogramsPerGramTolerance);
            AssertEx.EqualTolerance(KilogramsPerKilogramInOneDecimalFraction, decimalfraction.As(MassFractionUnit.KilogramPerKilogram), KilogramsPerKilogramTolerance);
            AssertEx.EqualTolerance(MicrogramsPerGramInOneDecimalFraction, decimalfraction.As(MassFractionUnit.MicrogramPerGram), MicrogramsPerGramTolerance);
            AssertEx.EqualTolerance(MicrogramsPerKilogramInOneDecimalFraction, decimalfraction.As(MassFractionUnit.MicrogramPerKilogram), MicrogramsPerKilogramTolerance);
            AssertEx.EqualTolerance(MilligramsPerGramInOneDecimalFraction, decimalfraction.As(MassFractionUnit.MilligramPerGram), MilligramsPerGramTolerance);
            AssertEx.EqualTolerance(MilligramsPerKilogramInOneDecimalFraction, decimalfraction.As(MassFractionUnit.MilligramPerKilogram), MilligramsPerKilogramTolerance);
            AssertEx.EqualTolerance(NanogramsPerGramInOneDecimalFraction, decimalfraction.As(MassFractionUnit.NanogramPerGram), NanogramsPerGramTolerance);
            AssertEx.EqualTolerance(NanogramsPerKilogramInOneDecimalFraction, decimalfraction.As(MassFractionUnit.NanogramPerKilogram), NanogramsPerKilogramTolerance);
            AssertEx.EqualTolerance(PartsPerBillionInOneDecimalFraction, decimalfraction.As(MassFractionUnit.PartPerBillion), PartsPerBillionTolerance);
            AssertEx.EqualTolerance(PartsPerMillionInOneDecimalFraction, decimalfraction.As(MassFractionUnit.PartPerMillion), PartsPerMillionTolerance);
            AssertEx.EqualTolerance(PartsPerThousandInOneDecimalFraction, decimalfraction.As(MassFractionUnit.PartPerThousand), PartsPerThousandTolerance);
            AssertEx.EqualTolerance(PartsPerTrillionInOneDecimalFraction, decimalfraction.As(MassFractionUnit.PartPerTrillion), PartsPerTrillionTolerance);
            AssertEx.EqualTolerance(PercentInOneDecimalFraction, decimalfraction.As(MassFractionUnit.Percent), PercentTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new MassFraction(value: 1, unit: MassFraction.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (QuantityValue) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(MassFractionUnit unit)
        {
            var inBaseUnits = MassFraction.From(1.0, MassFraction.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(MassFractionUnit unit)
        {
            var quantity = MassFraction.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(MassFractionUnit unit)
        {
            // See if there is a unit available that is not the base unit.
            var fromUnit = MassFraction.Units.FirstOrDefault(u => u != MassFraction.BaseUnit && u != MassFractionUnit.Undefined);

            // If there is only one unit for the quantity, we must use the base unit.
            if (fromUnit == MassFractionUnit.Undefined)
                fromUnit = MassFraction.BaseUnit;

            var quantity = MassFraction.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            MassFraction decimalfraction = MassFraction.FromDecimalFractions(1);
            AssertEx.EqualTolerance(1, MassFraction.FromCentigramsPerGram(decimalfraction.CentigramsPerGram).DecimalFractions, CentigramsPerGramTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromCentigramsPerKilogram(decimalfraction.CentigramsPerKilogram).DecimalFractions, CentigramsPerKilogramTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromDecagramsPerGram(decimalfraction.DecagramsPerGram).DecimalFractions, DecagramsPerGramTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromDecagramsPerKilogram(decimalfraction.DecagramsPerKilogram).DecimalFractions, DecagramsPerKilogramTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromDecigramsPerGram(decimalfraction.DecigramsPerGram).DecimalFractions, DecigramsPerGramTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromDecigramsPerKilogram(decimalfraction.DecigramsPerKilogram).DecimalFractions, DecigramsPerKilogramTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromDecimalFractions(decimalfraction.DecimalFractions).DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromGramsPerGram(decimalfraction.GramsPerGram).DecimalFractions, GramsPerGramTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromGramsPerKilogram(decimalfraction.GramsPerKilogram).DecimalFractions, GramsPerKilogramTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromHectogramsPerGram(decimalfraction.HectogramsPerGram).DecimalFractions, HectogramsPerGramTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromHectogramsPerKilogram(decimalfraction.HectogramsPerKilogram).DecimalFractions, HectogramsPerKilogramTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromKilogramsPerGram(decimalfraction.KilogramsPerGram).DecimalFractions, KilogramsPerGramTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromKilogramsPerKilogram(decimalfraction.KilogramsPerKilogram).DecimalFractions, KilogramsPerKilogramTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromMicrogramsPerGram(decimalfraction.MicrogramsPerGram).DecimalFractions, MicrogramsPerGramTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromMicrogramsPerKilogram(decimalfraction.MicrogramsPerKilogram).DecimalFractions, MicrogramsPerKilogramTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromMilligramsPerGram(decimalfraction.MilligramsPerGram).DecimalFractions, MilligramsPerGramTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromMilligramsPerKilogram(decimalfraction.MilligramsPerKilogram).DecimalFractions, MilligramsPerKilogramTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromNanogramsPerGram(decimalfraction.NanogramsPerGram).DecimalFractions, NanogramsPerGramTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromNanogramsPerKilogram(decimalfraction.NanogramsPerKilogram).DecimalFractions, NanogramsPerKilogramTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromPartsPerBillion(decimalfraction.PartsPerBillion).DecimalFractions, PartsPerBillionTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromPartsPerMillion(decimalfraction.PartsPerMillion).DecimalFractions, PartsPerMillionTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromPartsPerThousand(decimalfraction.PartsPerThousand).DecimalFractions, PartsPerThousandTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromPartsPerTrillion(decimalfraction.PartsPerTrillion).DecimalFractions, PartsPerTrillionTolerance);
            AssertEx.EqualTolerance(1, MassFraction.FromPercent(decimalfraction.Percent).DecimalFractions, PercentTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            MassFraction v = MassFraction.FromDecimalFractions(1);
            AssertEx.EqualTolerance(-1, -v.DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(2, (MassFraction.FromDecimalFractions(3)-v).DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(2, (v + v).DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(10, (v*10).DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(10, (10*v).DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(2, (MassFraction.FromDecimalFractions(10)/5).DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(2, MassFraction.FromDecimalFractions(10)/MassFraction.FromDecimalFractions(5), DecimalFractionsTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            MassFraction oneDecimalFraction = MassFraction.FromDecimalFractions(1);
            MassFraction twoDecimalFractions = MassFraction.FromDecimalFractions(2);

            Assert.True(oneDecimalFraction < twoDecimalFractions);
            Assert.True(oneDecimalFraction <= twoDecimalFractions);
            Assert.True(twoDecimalFractions > oneDecimalFraction);
            Assert.True(twoDecimalFractions >= oneDecimalFraction);

            Assert.False(oneDecimalFraction > twoDecimalFractions);
            Assert.False(oneDecimalFraction >= twoDecimalFractions);
            Assert.False(twoDecimalFractions < oneDecimalFraction);
            Assert.False(twoDecimalFractions <= oneDecimalFraction);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            MassFraction decimalfraction = MassFraction.FromDecimalFractions(1);
            Assert.Equal(0, decimalfraction.CompareTo(decimalfraction));
            Assert.True(decimalfraction.CompareTo(MassFraction.Zero) > 0);
            Assert.True(MassFraction.Zero.CompareTo(decimalfraction) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            MassFraction decimalfraction = MassFraction.FromDecimalFractions(1);
            Assert.Throws<ArgumentException>(() => decimalfraction.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            MassFraction decimalfraction = MassFraction.FromDecimalFractions(1);
            Assert.Throws<ArgumentNullException>(() => decimalfraction.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = MassFraction.FromDecimalFractions(1);
            var b = MassFraction.FromDecimalFractions(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = MassFraction.FromDecimalFractions(1);
            var b = MassFraction.FromDecimalFractions(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = MassFraction.FromDecimalFractions(1);
            object b = MassFraction.FromDecimalFractions(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = MassFraction.FromDecimalFractions(1);
            Assert.True(v.Equals(MassFraction.FromDecimalFractions(1), DecimalFractionsTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(MassFraction.Zero, DecimalFractionsTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = MassFraction.FromDecimalFractions(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(MassFraction.FromDecimalFractions(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            MassFraction decimalfraction = MassFraction.FromDecimalFractions(1);
            Assert.False(decimalfraction.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            MassFraction decimalfraction = MassFraction.FromDecimalFractions(1);
            Assert.False(decimalfraction.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(MassFractionUnit.Undefined, MassFraction.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(MassFractionUnit)).Cast<MassFractionUnit>();
            foreach(var unit in units)
            {
                if (unit == MassFractionUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 cg/g", new MassFraction(1, MassFractionUnit.CentigramPerGram).ToString());
                Assert.Equal("1 cg/kg", new MassFraction(1, MassFractionUnit.CentigramPerKilogram).ToString());
                Assert.Equal("1 dag/g", new MassFraction(1, MassFractionUnit.DecagramPerGram).ToString());
                Assert.Equal("1 dag/kg", new MassFraction(1, MassFractionUnit.DecagramPerKilogram).ToString());
                Assert.Equal("1 dg/g", new MassFraction(1, MassFractionUnit.DecigramPerGram).ToString());
                Assert.Equal("1 dg/kg", new MassFraction(1, MassFractionUnit.DecigramPerKilogram).ToString());
                Assert.Equal("1", new MassFraction(1, MassFractionUnit.DecimalFraction).ToString());
                Assert.Equal("1 g/g", new MassFraction(1, MassFractionUnit.GramPerGram).ToString());
                Assert.Equal("1 g/kg", new MassFraction(1, MassFractionUnit.GramPerKilogram).ToString());
                Assert.Equal("1 hg/g", new MassFraction(1, MassFractionUnit.HectogramPerGram).ToString());
                Assert.Equal("1 hg/kg", new MassFraction(1, MassFractionUnit.HectogramPerKilogram).ToString());
                Assert.Equal("1 kg/g", new MassFraction(1, MassFractionUnit.KilogramPerGram).ToString());
                Assert.Equal("1 kg/kg", new MassFraction(1, MassFractionUnit.KilogramPerKilogram).ToString());
                Assert.Equal("1 µg/g", new MassFraction(1, MassFractionUnit.MicrogramPerGram).ToString());
                Assert.Equal("1 µg/kg", new MassFraction(1, MassFractionUnit.MicrogramPerKilogram).ToString());
                Assert.Equal("1 mg/g", new MassFraction(1, MassFractionUnit.MilligramPerGram).ToString());
                Assert.Equal("1 mg/kg", new MassFraction(1, MassFractionUnit.MilligramPerKilogram).ToString());
                Assert.Equal("1 ng/g", new MassFraction(1, MassFractionUnit.NanogramPerGram).ToString());
                Assert.Equal("1 ng/kg", new MassFraction(1, MassFractionUnit.NanogramPerKilogram).ToString());
                Assert.Equal("1 ppb", new MassFraction(1, MassFractionUnit.PartPerBillion).ToString());
                Assert.Equal("1 ppm", new MassFraction(1, MassFractionUnit.PartPerMillion).ToString());
                Assert.Equal("1 ‰", new MassFraction(1, MassFractionUnit.PartPerThousand).ToString());
                Assert.Equal("1 ppt", new MassFraction(1, MassFractionUnit.PartPerTrillion).ToString());
                Assert.Equal("1 %", new MassFraction(1, MassFractionUnit.Percent).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cg/g", new MassFraction(1, MassFractionUnit.CentigramPerGram).ToString(swedishCulture));
            Assert.Equal("1 cg/kg", new MassFraction(1, MassFractionUnit.CentigramPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 dag/g", new MassFraction(1, MassFractionUnit.DecagramPerGram).ToString(swedishCulture));
            Assert.Equal("1 dag/kg", new MassFraction(1, MassFractionUnit.DecagramPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 dg/g", new MassFraction(1, MassFractionUnit.DecigramPerGram).ToString(swedishCulture));
            Assert.Equal("1 dg/kg", new MassFraction(1, MassFractionUnit.DecigramPerKilogram).ToString(swedishCulture));
            Assert.Equal("1", new MassFraction(1, MassFractionUnit.DecimalFraction).ToString(swedishCulture));
            Assert.Equal("1 g/g", new MassFraction(1, MassFractionUnit.GramPerGram).ToString(swedishCulture));
            Assert.Equal("1 g/kg", new MassFraction(1, MassFractionUnit.GramPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 hg/g", new MassFraction(1, MassFractionUnit.HectogramPerGram).ToString(swedishCulture));
            Assert.Equal("1 hg/kg", new MassFraction(1, MassFractionUnit.HectogramPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 kg/g", new MassFraction(1, MassFractionUnit.KilogramPerGram).ToString(swedishCulture));
            Assert.Equal("1 kg/kg", new MassFraction(1, MassFractionUnit.KilogramPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 µg/g", new MassFraction(1, MassFractionUnit.MicrogramPerGram).ToString(swedishCulture));
            Assert.Equal("1 µg/kg", new MassFraction(1, MassFractionUnit.MicrogramPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 mg/g", new MassFraction(1, MassFractionUnit.MilligramPerGram).ToString(swedishCulture));
            Assert.Equal("1 mg/kg", new MassFraction(1, MassFractionUnit.MilligramPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 ng/g", new MassFraction(1, MassFractionUnit.NanogramPerGram).ToString(swedishCulture));
            Assert.Equal("1 ng/kg", new MassFraction(1, MassFractionUnit.NanogramPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 ppb", new MassFraction(1, MassFractionUnit.PartPerBillion).ToString(swedishCulture));
            Assert.Equal("1 ppm", new MassFraction(1, MassFractionUnit.PartPerMillion).ToString(swedishCulture));
            Assert.Equal("1 ‰", new MassFraction(1, MassFractionUnit.PartPerThousand).ToString(swedishCulture));
            Assert.Equal("1 ppt", new MassFraction(1, MassFractionUnit.PartPerTrillion).ToString(swedishCulture));
            Assert.Equal("1 %", new MassFraction(1, MassFractionUnit.Percent).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1", new MassFraction(0.123456, MassFractionUnit.DecimalFraction).ToString("s1"));
                Assert.Equal("0.12", new MassFraction(0.123456, MassFractionUnit.DecimalFraction).ToString("s2"));
                Assert.Equal("0.123", new MassFraction(0.123456, MassFractionUnit.DecimalFraction).ToString("s3"));
                Assert.Equal("0.1235", new MassFraction(0.123456, MassFractionUnit.DecimalFraction).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1", new MassFraction(0.123456, MassFractionUnit.DecimalFraction).ToString("s1", culture));
            Assert.Equal("0.12", new MassFraction(0.123456, MassFractionUnit.DecimalFraction).ToString("s2", culture));
            Assert.Equal("0.123", new MassFraction(0.123456, MassFractionUnit.DecimalFraction).ToString("s3", culture));
            Assert.Equal("0.1235", new MassFraction(0.123456, MassFractionUnit.DecimalFraction).ToString("s4", culture));
        }

/*
        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }
*/

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
           Assert.Equal((byte)quantity.Value.Real, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Equal((decimal)quantity.Value.Real, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Equal((double)quantity.Value.Real, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Equal((short)quantity.Value.Real, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Equal((int)quantity.Value.Real, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Equal((long)quantity.Value.Real, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Equal((sbyte)quantity.Value.Real, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Equal((float)quantity.Value.Real, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Equal((ushort)quantity.Value.Real, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Equal((uint)quantity.Value.Real, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Equal((ulong)quantity.Value.Real, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(MassFraction)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(MassFractionUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Equal(MassFraction.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Equal(MassFraction.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = MassFraction.FromDecimalFractions(1.0);
            Assert.Equal(new {MassFraction.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = MassFraction.FromDecimalFractions(value);
            Assert.Equal(MassFraction.FromDecimalFractions(-value), -quantity);
        }
    }
}
