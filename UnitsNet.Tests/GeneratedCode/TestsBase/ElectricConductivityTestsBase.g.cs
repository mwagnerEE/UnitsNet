//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ElectricConductivity.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ElectricConductivityTestsBase : QuantityTestsBase
    {
        protected abstract double KilosiemensPerFootInOneSiemensPerMeter { get; }
        protected abstract double KilosiemensPerInchInOneSiemensPerMeter { get; }
        protected abstract double KilosiemensPerKilofootInOneSiemensPerMeter { get; }
        protected abstract double KilosiemensPerKilometerInOneSiemensPerMeter { get; }
        protected abstract double KilosiemensPerMileInOneSiemensPerMeter { get; }
        protected abstract double KilosiemensPerMeterInOneSiemensPerMeter { get; }
        protected abstract double MegasiemensPerFootInOneSiemensPerMeter { get; }
        protected abstract double MegasiemensPerInchInOneSiemensPerMeter { get; }
        protected abstract double MegasiemensPerKilofootInOneSiemensPerMeter { get; }
        protected abstract double MegasiemensPerKilometerInOneSiemensPerMeter { get; }
        protected abstract double MegasiemensPerMileInOneSiemensPerMeter { get; }
        protected abstract double MegasiemensPerMeterInOneSiemensPerMeter { get; }
        protected abstract double MicrosiemensPerFootInOneSiemensPerMeter { get; }
        protected abstract double MicrosiemensPerInchInOneSiemensPerMeter { get; }
        protected abstract double MicrosiemensPerKilofootInOneSiemensPerMeter { get; }
        protected abstract double MicrosiemensPerKilometerInOneSiemensPerMeter { get; }
        protected abstract double MicrosiemensPerMileInOneSiemensPerMeter { get; }
        protected abstract double MicrosiemensPerMeterInOneSiemensPerMeter { get; }
        protected abstract double MillisiemensPerFootInOneSiemensPerMeter { get; }
        protected abstract double MillisiemensPerInchInOneSiemensPerMeter { get; }
        protected abstract double MillisiemensPerKilofootInOneSiemensPerMeter { get; }
        protected abstract double MillisiemensPerKilometerInOneSiemensPerMeter { get; }
        protected abstract double MillisiemensPerMileInOneSiemensPerMeter { get; }
        protected abstract double MillisiemensPerMeterInOneSiemensPerMeter { get; }
        protected abstract double NanosiemensPerFootInOneSiemensPerMeter { get; }
        protected abstract double NanosiemensPerInchInOneSiemensPerMeter { get; }
        protected abstract double NanosiemensPerKilofootInOneSiemensPerMeter { get; }
        protected abstract double NanosiemensPerKilometerInOneSiemensPerMeter { get; }
        protected abstract double NanosiemensPerMileInOneSiemensPerMeter { get; }
        protected abstract double NanosiemensPerMeterInOneSiemensPerMeter { get; }
        protected abstract double PicosiemensPerFootInOneSiemensPerMeter { get; }
        protected abstract double PicosiemensPerInchInOneSiemensPerMeter { get; }
        protected abstract double PicosiemensPerKilofootInOneSiemensPerMeter { get; }
        protected abstract double PicosiemensPerKilometerInOneSiemensPerMeter { get; }
        protected abstract double PicosiemensPerMileInOneSiemensPerMeter { get; }
        protected abstract double PicosiemensPerMeterInOneSiemensPerMeter { get; }
        protected abstract double SiemensPerFootInOneSiemensPerMeter { get; }
        protected abstract double SiemensPerInchInOneSiemensPerMeter { get; }
        protected abstract double SiemensPerKilofootInOneSiemensPerMeter { get; }
        protected abstract double SiemensPerKilometerInOneSiemensPerMeter { get; }
        protected abstract double SiemensPerMileInOneSiemensPerMeter { get; }
        protected abstract double SiemensPerMeterInOneSiemensPerMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KilosiemensPerFootTolerance { get { return 1e-5; } }
        protected virtual double KilosiemensPerInchTolerance { get { return 1e-5; } }
        protected virtual double KilosiemensPerKilofootTolerance { get { return 1e-5; } }
        protected virtual double KilosiemensPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double KilosiemensPerMileTolerance { get { return 1e-5; } }
        protected virtual double KilosiemensPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MegasiemensPerFootTolerance { get { return 1e-5; } }
        protected virtual double MegasiemensPerInchTolerance { get { return 1e-5; } }
        protected virtual double MegasiemensPerKilofootTolerance { get { return 1e-5; } }
        protected virtual double MegasiemensPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double MegasiemensPerMileTolerance { get { return 1e-5; } }
        protected virtual double MegasiemensPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MicrosiemensPerFootTolerance { get { return 1e-5; } }
        protected virtual double MicrosiemensPerInchTolerance { get { return 1e-5; } }
        protected virtual double MicrosiemensPerKilofootTolerance { get { return 1e-5; } }
        protected virtual double MicrosiemensPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double MicrosiemensPerMileTolerance { get { return 1e-5; } }
        protected virtual double MicrosiemensPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MillisiemensPerFootTolerance { get { return 1e-5; } }
        protected virtual double MillisiemensPerInchTolerance { get { return 1e-5; } }
        protected virtual double MillisiemensPerKilofootTolerance { get { return 1e-5; } }
        protected virtual double MillisiemensPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double MillisiemensPerMileTolerance { get { return 1e-5; } }
        protected virtual double MillisiemensPerMeterTolerance { get { return 1e-5; } }
        protected virtual double NanosiemensPerFootTolerance { get { return 1e-5; } }
        protected virtual double NanosiemensPerInchTolerance { get { return 1e-5; } }
        protected virtual double NanosiemensPerKilofootTolerance { get { return 1e-5; } }
        protected virtual double NanosiemensPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double NanosiemensPerMileTolerance { get { return 1e-5; } }
        protected virtual double NanosiemensPerMeterTolerance { get { return 1e-5; } }
        protected virtual double PicosiemensPerFootTolerance { get { return 1e-5; } }
        protected virtual double PicosiemensPerInchTolerance { get { return 1e-5; } }
        protected virtual double PicosiemensPerKilofootTolerance { get { return 1e-5; } }
        protected virtual double PicosiemensPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double PicosiemensPerMileTolerance { get { return 1e-5; } }
        protected virtual double PicosiemensPerMeterTolerance { get { return 1e-5; } }
        protected virtual double SiemensPerFootTolerance { get { return 1e-5; } }
        protected virtual double SiemensPerInchTolerance { get { return 1e-5; } }
        protected virtual double SiemensPerKilofootTolerance { get { return 1e-5; } }
        protected virtual double SiemensPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double SiemensPerMileTolerance { get { return 1e-5; } }
        protected virtual double SiemensPerMeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(ElectricConductivityUnit unit)
        {
            return unit switch
            {
                ElectricConductivityUnit.KilosiemenPerFoot => (KilosiemensPerFootInOneSiemensPerMeter, KilosiemensPerFootTolerance),
                ElectricConductivityUnit.KilosiemenPerInch => (KilosiemensPerInchInOneSiemensPerMeter, KilosiemensPerInchTolerance),
                ElectricConductivityUnit.KilosiemenPerKilofoot => (KilosiemensPerKilofootInOneSiemensPerMeter, KilosiemensPerKilofootTolerance),
                ElectricConductivityUnit.KilosiemenPerKilometer => (KilosiemensPerKilometerInOneSiemensPerMeter, KilosiemensPerKilometerTolerance),
                ElectricConductivityUnit.KilosiemenPerMile => (KilosiemensPerMileInOneSiemensPerMeter, KilosiemensPerMileTolerance),
                ElectricConductivityUnit.KilosiemensPerMeter => (KilosiemensPerMeterInOneSiemensPerMeter, KilosiemensPerMeterTolerance),
                ElectricConductivityUnit.MegasiemenPerFoot => (MegasiemensPerFootInOneSiemensPerMeter, MegasiemensPerFootTolerance),
                ElectricConductivityUnit.MegasiemenPerInch => (MegasiemensPerInchInOneSiemensPerMeter, MegasiemensPerInchTolerance),
                ElectricConductivityUnit.MegasiemenPerKilofoot => (MegasiemensPerKilofootInOneSiemensPerMeter, MegasiemensPerKilofootTolerance),
                ElectricConductivityUnit.MegasiemenPerKilometer => (MegasiemensPerKilometerInOneSiemensPerMeter, MegasiemensPerKilometerTolerance),
                ElectricConductivityUnit.MegasiemenPerMile => (MegasiemensPerMileInOneSiemensPerMeter, MegasiemensPerMileTolerance),
                ElectricConductivityUnit.MegasiemensPerMeter => (MegasiemensPerMeterInOneSiemensPerMeter, MegasiemensPerMeterTolerance),
                ElectricConductivityUnit.MicrosiemenPerFoot => (MicrosiemensPerFootInOneSiemensPerMeter, MicrosiemensPerFootTolerance),
                ElectricConductivityUnit.MicrosiemenPerInch => (MicrosiemensPerInchInOneSiemensPerMeter, MicrosiemensPerInchTolerance),
                ElectricConductivityUnit.MicrosiemenPerKilofoot => (MicrosiemensPerKilofootInOneSiemensPerMeter, MicrosiemensPerKilofootTolerance),
                ElectricConductivityUnit.MicrosiemenPerKilometer => (MicrosiemensPerKilometerInOneSiemensPerMeter, MicrosiemensPerKilometerTolerance),
                ElectricConductivityUnit.MicrosiemenPerMile => (MicrosiemensPerMileInOneSiemensPerMeter, MicrosiemensPerMileTolerance),
                ElectricConductivityUnit.MicrosiemensPerMeter => (MicrosiemensPerMeterInOneSiemensPerMeter, MicrosiemensPerMeterTolerance),
                ElectricConductivityUnit.MillisiemenPerFoot => (MillisiemensPerFootInOneSiemensPerMeter, MillisiemensPerFootTolerance),
                ElectricConductivityUnit.MillisiemenPerInch => (MillisiemensPerInchInOneSiemensPerMeter, MillisiemensPerInchTolerance),
                ElectricConductivityUnit.MillisiemenPerKilofoot => (MillisiemensPerKilofootInOneSiemensPerMeter, MillisiemensPerKilofootTolerance),
                ElectricConductivityUnit.MillisiemenPerKilometer => (MillisiemensPerKilometerInOneSiemensPerMeter, MillisiemensPerKilometerTolerance),
                ElectricConductivityUnit.MillisiemenPerMile => (MillisiemensPerMileInOneSiemensPerMeter, MillisiemensPerMileTolerance),
                ElectricConductivityUnit.MillisiemensPerMeter => (MillisiemensPerMeterInOneSiemensPerMeter, MillisiemensPerMeterTolerance),
                ElectricConductivityUnit.NanosiemenPerFoot => (NanosiemensPerFootInOneSiemensPerMeter, NanosiemensPerFootTolerance),
                ElectricConductivityUnit.NanosiemenPerInch => (NanosiemensPerInchInOneSiemensPerMeter, NanosiemensPerInchTolerance),
                ElectricConductivityUnit.NanosiemenPerKilofoot => (NanosiemensPerKilofootInOneSiemensPerMeter, NanosiemensPerKilofootTolerance),
                ElectricConductivityUnit.NanosiemenPerKilometer => (NanosiemensPerKilometerInOneSiemensPerMeter, NanosiemensPerKilometerTolerance),
                ElectricConductivityUnit.NanosiemenPerMile => (NanosiemensPerMileInOneSiemensPerMeter, NanosiemensPerMileTolerance),
                ElectricConductivityUnit.NanosiemensPerMeter => (NanosiemensPerMeterInOneSiemensPerMeter, NanosiemensPerMeterTolerance),
                ElectricConductivityUnit.PicosiemenPerFoot => (PicosiemensPerFootInOneSiemensPerMeter, PicosiemensPerFootTolerance),
                ElectricConductivityUnit.PicosiemenPerInch => (PicosiemensPerInchInOneSiemensPerMeter, PicosiemensPerInchTolerance),
                ElectricConductivityUnit.PicosiemenPerKilofoot => (PicosiemensPerKilofootInOneSiemensPerMeter, PicosiemensPerKilofootTolerance),
                ElectricConductivityUnit.PicosiemenPerKilometer => (PicosiemensPerKilometerInOneSiemensPerMeter, PicosiemensPerKilometerTolerance),
                ElectricConductivityUnit.PicosiemenPerMile => (PicosiemensPerMileInOneSiemensPerMeter, PicosiemensPerMileTolerance),
                ElectricConductivityUnit.PicosiemensPerMeter => (PicosiemensPerMeterInOneSiemensPerMeter, PicosiemensPerMeterTolerance),
                ElectricConductivityUnit.SiemenPerFoot => (SiemensPerFootInOneSiemensPerMeter, SiemensPerFootTolerance),
                ElectricConductivityUnit.SiemenPerInch => (SiemensPerInchInOneSiemensPerMeter, SiemensPerInchTolerance),
                ElectricConductivityUnit.SiemenPerKilofoot => (SiemensPerKilofootInOneSiemensPerMeter, SiemensPerKilofootTolerance),
                ElectricConductivityUnit.SiemenPerKilometer => (SiemensPerKilometerInOneSiemensPerMeter, SiemensPerKilometerTolerance),
                ElectricConductivityUnit.SiemenPerMile => (SiemensPerMileInOneSiemensPerMeter, SiemensPerMileTolerance),
                ElectricConductivityUnit.SiemensPerMeter => (SiemensPerMeterInOneSiemensPerMeter, SiemensPerMeterTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { ElectricConductivityUnit.KilosiemenPerFoot },
            new object[] { ElectricConductivityUnit.KilosiemenPerInch },
            new object[] { ElectricConductivityUnit.KilosiemenPerKilofoot },
            new object[] { ElectricConductivityUnit.KilosiemenPerKilometer },
            new object[] { ElectricConductivityUnit.KilosiemenPerMile },
            new object[] { ElectricConductivityUnit.KilosiemensPerMeter },
            new object[] { ElectricConductivityUnit.MegasiemenPerFoot },
            new object[] { ElectricConductivityUnit.MegasiemenPerInch },
            new object[] { ElectricConductivityUnit.MegasiemenPerKilofoot },
            new object[] { ElectricConductivityUnit.MegasiemenPerKilometer },
            new object[] { ElectricConductivityUnit.MegasiemenPerMile },
            new object[] { ElectricConductivityUnit.MegasiemensPerMeter },
            new object[] { ElectricConductivityUnit.MicrosiemenPerFoot },
            new object[] { ElectricConductivityUnit.MicrosiemenPerInch },
            new object[] { ElectricConductivityUnit.MicrosiemenPerKilofoot },
            new object[] { ElectricConductivityUnit.MicrosiemenPerKilometer },
            new object[] { ElectricConductivityUnit.MicrosiemenPerMile },
            new object[] { ElectricConductivityUnit.MicrosiemensPerMeter },
            new object[] { ElectricConductivityUnit.MillisiemenPerFoot },
            new object[] { ElectricConductivityUnit.MillisiemenPerInch },
            new object[] { ElectricConductivityUnit.MillisiemenPerKilofoot },
            new object[] { ElectricConductivityUnit.MillisiemenPerKilometer },
            new object[] { ElectricConductivityUnit.MillisiemenPerMile },
            new object[] { ElectricConductivityUnit.MillisiemensPerMeter },
            new object[] { ElectricConductivityUnit.NanosiemenPerFoot },
            new object[] { ElectricConductivityUnit.NanosiemenPerInch },
            new object[] { ElectricConductivityUnit.NanosiemenPerKilofoot },
            new object[] { ElectricConductivityUnit.NanosiemenPerKilometer },
            new object[] { ElectricConductivityUnit.NanosiemenPerMile },
            new object[] { ElectricConductivityUnit.NanosiemensPerMeter },
            new object[] { ElectricConductivityUnit.PicosiemenPerFoot },
            new object[] { ElectricConductivityUnit.PicosiemenPerInch },
            new object[] { ElectricConductivityUnit.PicosiemenPerKilofoot },
            new object[] { ElectricConductivityUnit.PicosiemenPerKilometer },
            new object[] { ElectricConductivityUnit.PicosiemenPerMile },
            new object[] { ElectricConductivityUnit.PicosiemensPerMeter },
            new object[] { ElectricConductivityUnit.SiemenPerFoot },
            new object[] { ElectricConductivityUnit.SiemenPerInch },
            new object[] { ElectricConductivityUnit.SiemenPerKilofoot },
            new object[] { ElectricConductivityUnit.SiemenPerKilometer },
            new object[] { ElectricConductivityUnit.SiemenPerMile },
            new object[] { ElectricConductivityUnit.SiemensPerMeter },
        };

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ElectricConductivity((QuantityValue)0.0, ElectricConductivityUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new ElectricConductivity();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ElectricConductivityUnit.SiemensPerMeter, quantity.Unit);
        }


        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new ElectricConductivity(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new ElectricConductivity(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (ElectricConductivity) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void ElectricConductivity_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new ElectricConductivity(1, ElectricConductivityUnit.SiemensPerMeter);

            QuantityInfo<ElectricConductivityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(ElectricConductivity.Zero, quantityInfo.Zero);
            Assert.Equal("ElectricConductivity", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<ElectricConductivityUnit>().Except(new[] {ElectricConductivityUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

        }

        [Fact]
        public void SiemensPerMeterToElectricConductivityUnits()
        {
            ElectricConductivity siemenspermeter = ElectricConductivity.FromSiemensPerMeter(1);
            AssertEx.EqualTolerance(KilosiemensPerFootInOneSiemensPerMeter, siemenspermeter.KilosiemensPerFoot, KilosiemensPerFootTolerance);
            AssertEx.EqualTolerance(KilosiemensPerInchInOneSiemensPerMeter, siemenspermeter.KilosiemensPerInch, KilosiemensPerInchTolerance);
            AssertEx.EqualTolerance(KilosiemensPerKilofootInOneSiemensPerMeter, siemenspermeter.KilosiemensPerKilofoot, KilosiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(KilosiemensPerKilometerInOneSiemensPerMeter, siemenspermeter.KilosiemensPerKilometer, KilosiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(KilosiemensPerMileInOneSiemensPerMeter, siemenspermeter.KilosiemensPerMile, KilosiemensPerMileTolerance);
            AssertEx.EqualTolerance(KilosiemensPerMeterInOneSiemensPerMeter, siemenspermeter.KilosiemensPerMeter, KilosiemensPerMeterTolerance);
            AssertEx.EqualTolerance(MegasiemensPerFootInOneSiemensPerMeter, siemenspermeter.MegasiemensPerFoot, MegasiemensPerFootTolerance);
            AssertEx.EqualTolerance(MegasiemensPerInchInOneSiemensPerMeter, siemenspermeter.MegasiemensPerInch, MegasiemensPerInchTolerance);
            AssertEx.EqualTolerance(MegasiemensPerKilofootInOneSiemensPerMeter, siemenspermeter.MegasiemensPerKilofoot, MegasiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(MegasiemensPerKilometerInOneSiemensPerMeter, siemenspermeter.MegasiemensPerKilometer, MegasiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(MegasiemensPerMileInOneSiemensPerMeter, siemenspermeter.MegasiemensPerMile, MegasiemensPerMileTolerance);
            AssertEx.EqualTolerance(MegasiemensPerMeterInOneSiemensPerMeter, siemenspermeter.MegasiemensPerMeter, MegasiemensPerMeterTolerance);
            AssertEx.EqualTolerance(MicrosiemensPerFootInOneSiemensPerMeter, siemenspermeter.MicrosiemensPerFoot, MicrosiemensPerFootTolerance);
            AssertEx.EqualTolerance(MicrosiemensPerInchInOneSiemensPerMeter, siemenspermeter.MicrosiemensPerInch, MicrosiemensPerInchTolerance);
            AssertEx.EqualTolerance(MicrosiemensPerKilofootInOneSiemensPerMeter, siemenspermeter.MicrosiemensPerKilofoot, MicrosiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(MicrosiemensPerKilometerInOneSiemensPerMeter, siemenspermeter.MicrosiemensPerKilometer, MicrosiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(MicrosiemensPerMileInOneSiemensPerMeter, siemenspermeter.MicrosiemensPerMile, MicrosiemensPerMileTolerance);
            AssertEx.EqualTolerance(MicrosiemensPerMeterInOneSiemensPerMeter, siemenspermeter.MicrosiemensPerMeter, MicrosiemensPerMeterTolerance);
            AssertEx.EqualTolerance(MillisiemensPerFootInOneSiemensPerMeter, siemenspermeter.MillisiemensPerFoot, MillisiemensPerFootTolerance);
            AssertEx.EqualTolerance(MillisiemensPerInchInOneSiemensPerMeter, siemenspermeter.MillisiemensPerInch, MillisiemensPerInchTolerance);
            AssertEx.EqualTolerance(MillisiemensPerKilofootInOneSiemensPerMeter, siemenspermeter.MillisiemensPerKilofoot, MillisiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(MillisiemensPerKilometerInOneSiemensPerMeter, siemenspermeter.MillisiemensPerKilometer, MillisiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(MillisiemensPerMileInOneSiemensPerMeter, siemenspermeter.MillisiemensPerMile, MillisiemensPerMileTolerance);
            AssertEx.EqualTolerance(MillisiemensPerMeterInOneSiemensPerMeter, siemenspermeter.MillisiemensPerMeter, MillisiemensPerMeterTolerance);
            AssertEx.EqualTolerance(NanosiemensPerFootInOneSiemensPerMeter, siemenspermeter.NanosiemensPerFoot, NanosiemensPerFootTolerance);
            AssertEx.EqualTolerance(NanosiemensPerInchInOneSiemensPerMeter, siemenspermeter.NanosiemensPerInch, NanosiemensPerInchTolerance);
            AssertEx.EqualTolerance(NanosiemensPerKilofootInOneSiemensPerMeter, siemenspermeter.NanosiemensPerKilofoot, NanosiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(NanosiemensPerKilometerInOneSiemensPerMeter, siemenspermeter.NanosiemensPerKilometer, NanosiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(NanosiemensPerMileInOneSiemensPerMeter, siemenspermeter.NanosiemensPerMile, NanosiemensPerMileTolerance);
            AssertEx.EqualTolerance(NanosiemensPerMeterInOneSiemensPerMeter, siemenspermeter.NanosiemensPerMeter, NanosiemensPerMeterTolerance);
            AssertEx.EqualTolerance(PicosiemensPerFootInOneSiemensPerMeter, siemenspermeter.PicosiemensPerFoot, PicosiemensPerFootTolerance);
            AssertEx.EqualTolerance(PicosiemensPerInchInOneSiemensPerMeter, siemenspermeter.PicosiemensPerInch, PicosiemensPerInchTolerance);
            AssertEx.EqualTolerance(PicosiemensPerKilofootInOneSiemensPerMeter, siemenspermeter.PicosiemensPerKilofoot, PicosiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(PicosiemensPerKilometerInOneSiemensPerMeter, siemenspermeter.PicosiemensPerKilometer, PicosiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(PicosiemensPerMileInOneSiemensPerMeter, siemenspermeter.PicosiemensPerMile, PicosiemensPerMileTolerance);
            AssertEx.EqualTolerance(PicosiemensPerMeterInOneSiemensPerMeter, siemenspermeter.PicosiemensPerMeter, PicosiemensPerMeterTolerance);
            AssertEx.EqualTolerance(SiemensPerFootInOneSiemensPerMeter, siemenspermeter.SiemensPerFoot, SiemensPerFootTolerance);
            AssertEx.EqualTolerance(SiemensPerInchInOneSiemensPerMeter, siemenspermeter.SiemensPerInch, SiemensPerInchTolerance);
            AssertEx.EqualTolerance(SiemensPerKilofootInOneSiemensPerMeter, siemenspermeter.SiemensPerKilofoot, SiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(SiemensPerKilometerInOneSiemensPerMeter, siemenspermeter.SiemensPerKilometer, SiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(SiemensPerMileInOneSiemensPerMeter, siemenspermeter.SiemensPerMile, SiemensPerMileTolerance);
            AssertEx.EqualTolerance(SiemensPerMeterInOneSiemensPerMeter, siemenspermeter.SiemensPerMeter, SiemensPerMeterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = ElectricConductivity.From(1, ElectricConductivityUnit.KilosiemenPerFoot);
            AssertEx.EqualTolerance(1, quantity00.KilosiemensPerFoot, KilosiemensPerFootTolerance);
            Assert.Equal(ElectricConductivityUnit.KilosiemenPerFoot, quantity00.Unit);

            var quantity01 = ElectricConductivity.From(1, ElectricConductivityUnit.KilosiemenPerInch);
            AssertEx.EqualTolerance(1, quantity01.KilosiemensPerInch, KilosiemensPerInchTolerance);
            Assert.Equal(ElectricConductivityUnit.KilosiemenPerInch, quantity01.Unit);

            var quantity02 = ElectricConductivity.From(1, ElectricConductivityUnit.KilosiemenPerKilofoot);
            AssertEx.EqualTolerance(1, quantity02.KilosiemensPerKilofoot, KilosiemensPerKilofootTolerance);
            Assert.Equal(ElectricConductivityUnit.KilosiemenPerKilofoot, quantity02.Unit);

            var quantity03 = ElectricConductivity.From(1, ElectricConductivityUnit.KilosiemenPerKilometer);
            AssertEx.EqualTolerance(1, quantity03.KilosiemensPerKilometer, KilosiemensPerKilometerTolerance);
            Assert.Equal(ElectricConductivityUnit.KilosiemenPerKilometer, quantity03.Unit);

            var quantity04 = ElectricConductivity.From(1, ElectricConductivityUnit.KilosiemenPerMile);
            AssertEx.EqualTolerance(1, quantity04.KilosiemensPerMile, KilosiemensPerMileTolerance);
            Assert.Equal(ElectricConductivityUnit.KilosiemenPerMile, quantity04.Unit);

            var quantity05 = ElectricConductivity.From(1, ElectricConductivityUnit.KilosiemensPerMeter);
            AssertEx.EqualTolerance(1, quantity05.KilosiemensPerMeter, KilosiemensPerMeterTolerance);
            Assert.Equal(ElectricConductivityUnit.KilosiemensPerMeter, quantity05.Unit);

            var quantity06 = ElectricConductivity.From(1, ElectricConductivityUnit.MegasiemenPerFoot);
            AssertEx.EqualTolerance(1, quantity06.MegasiemensPerFoot, MegasiemensPerFootTolerance);
            Assert.Equal(ElectricConductivityUnit.MegasiemenPerFoot, quantity06.Unit);

            var quantity07 = ElectricConductivity.From(1, ElectricConductivityUnit.MegasiemenPerInch);
            AssertEx.EqualTolerance(1, quantity07.MegasiemensPerInch, MegasiemensPerInchTolerance);
            Assert.Equal(ElectricConductivityUnit.MegasiemenPerInch, quantity07.Unit);

            var quantity08 = ElectricConductivity.From(1, ElectricConductivityUnit.MegasiemenPerKilofoot);
            AssertEx.EqualTolerance(1, quantity08.MegasiemensPerKilofoot, MegasiemensPerKilofootTolerance);
            Assert.Equal(ElectricConductivityUnit.MegasiemenPerKilofoot, quantity08.Unit);

            var quantity09 = ElectricConductivity.From(1, ElectricConductivityUnit.MegasiemenPerKilometer);
            AssertEx.EqualTolerance(1, quantity09.MegasiemensPerKilometer, MegasiemensPerKilometerTolerance);
            Assert.Equal(ElectricConductivityUnit.MegasiemenPerKilometer, quantity09.Unit);

            var quantity10 = ElectricConductivity.From(1, ElectricConductivityUnit.MegasiemenPerMile);
            AssertEx.EqualTolerance(1, quantity10.MegasiemensPerMile, MegasiemensPerMileTolerance);
            Assert.Equal(ElectricConductivityUnit.MegasiemenPerMile, quantity10.Unit);

            var quantity11 = ElectricConductivity.From(1, ElectricConductivityUnit.MegasiemensPerMeter);
            AssertEx.EqualTolerance(1, quantity11.MegasiemensPerMeter, MegasiemensPerMeterTolerance);
            Assert.Equal(ElectricConductivityUnit.MegasiemensPerMeter, quantity11.Unit);

            var quantity12 = ElectricConductivity.From(1, ElectricConductivityUnit.MicrosiemenPerFoot);
            AssertEx.EqualTolerance(1, quantity12.MicrosiemensPerFoot, MicrosiemensPerFootTolerance);
            Assert.Equal(ElectricConductivityUnit.MicrosiemenPerFoot, quantity12.Unit);

            var quantity13 = ElectricConductivity.From(1, ElectricConductivityUnit.MicrosiemenPerInch);
            AssertEx.EqualTolerance(1, quantity13.MicrosiemensPerInch, MicrosiemensPerInchTolerance);
            Assert.Equal(ElectricConductivityUnit.MicrosiemenPerInch, quantity13.Unit);

            var quantity14 = ElectricConductivity.From(1, ElectricConductivityUnit.MicrosiemenPerKilofoot);
            AssertEx.EqualTolerance(1, quantity14.MicrosiemensPerKilofoot, MicrosiemensPerKilofootTolerance);
            Assert.Equal(ElectricConductivityUnit.MicrosiemenPerKilofoot, quantity14.Unit);

            var quantity15 = ElectricConductivity.From(1, ElectricConductivityUnit.MicrosiemenPerKilometer);
            AssertEx.EqualTolerance(1, quantity15.MicrosiemensPerKilometer, MicrosiemensPerKilometerTolerance);
            Assert.Equal(ElectricConductivityUnit.MicrosiemenPerKilometer, quantity15.Unit);

            var quantity16 = ElectricConductivity.From(1, ElectricConductivityUnit.MicrosiemenPerMile);
            AssertEx.EqualTolerance(1, quantity16.MicrosiemensPerMile, MicrosiemensPerMileTolerance);
            Assert.Equal(ElectricConductivityUnit.MicrosiemenPerMile, quantity16.Unit);

            var quantity17 = ElectricConductivity.From(1, ElectricConductivityUnit.MicrosiemensPerMeter);
            AssertEx.EqualTolerance(1, quantity17.MicrosiemensPerMeter, MicrosiemensPerMeterTolerance);
            Assert.Equal(ElectricConductivityUnit.MicrosiemensPerMeter, quantity17.Unit);

            var quantity18 = ElectricConductivity.From(1, ElectricConductivityUnit.MillisiemenPerFoot);
            AssertEx.EqualTolerance(1, quantity18.MillisiemensPerFoot, MillisiemensPerFootTolerance);
            Assert.Equal(ElectricConductivityUnit.MillisiemenPerFoot, quantity18.Unit);

            var quantity19 = ElectricConductivity.From(1, ElectricConductivityUnit.MillisiemenPerInch);
            AssertEx.EqualTolerance(1, quantity19.MillisiemensPerInch, MillisiemensPerInchTolerance);
            Assert.Equal(ElectricConductivityUnit.MillisiemenPerInch, quantity19.Unit);

            var quantity20 = ElectricConductivity.From(1, ElectricConductivityUnit.MillisiemenPerKilofoot);
            AssertEx.EqualTolerance(1, quantity20.MillisiemensPerKilofoot, MillisiemensPerKilofootTolerance);
            Assert.Equal(ElectricConductivityUnit.MillisiemenPerKilofoot, quantity20.Unit);

            var quantity21 = ElectricConductivity.From(1, ElectricConductivityUnit.MillisiemenPerKilometer);
            AssertEx.EqualTolerance(1, quantity21.MillisiemensPerKilometer, MillisiemensPerKilometerTolerance);
            Assert.Equal(ElectricConductivityUnit.MillisiemenPerKilometer, quantity21.Unit);

            var quantity22 = ElectricConductivity.From(1, ElectricConductivityUnit.MillisiemenPerMile);
            AssertEx.EqualTolerance(1, quantity22.MillisiemensPerMile, MillisiemensPerMileTolerance);
            Assert.Equal(ElectricConductivityUnit.MillisiemenPerMile, quantity22.Unit);

            var quantity23 = ElectricConductivity.From(1, ElectricConductivityUnit.MillisiemensPerMeter);
            AssertEx.EqualTolerance(1, quantity23.MillisiemensPerMeter, MillisiemensPerMeterTolerance);
            Assert.Equal(ElectricConductivityUnit.MillisiemensPerMeter, quantity23.Unit);

            var quantity24 = ElectricConductivity.From(1, ElectricConductivityUnit.NanosiemenPerFoot);
            AssertEx.EqualTolerance(1, quantity24.NanosiemensPerFoot, NanosiemensPerFootTolerance);
            Assert.Equal(ElectricConductivityUnit.NanosiemenPerFoot, quantity24.Unit);

            var quantity25 = ElectricConductivity.From(1, ElectricConductivityUnit.NanosiemenPerInch);
            AssertEx.EqualTolerance(1, quantity25.NanosiemensPerInch, NanosiemensPerInchTolerance);
            Assert.Equal(ElectricConductivityUnit.NanosiemenPerInch, quantity25.Unit);

            var quantity26 = ElectricConductivity.From(1, ElectricConductivityUnit.NanosiemenPerKilofoot);
            AssertEx.EqualTolerance(1, quantity26.NanosiemensPerKilofoot, NanosiemensPerKilofootTolerance);
            Assert.Equal(ElectricConductivityUnit.NanosiemenPerKilofoot, quantity26.Unit);

            var quantity27 = ElectricConductivity.From(1, ElectricConductivityUnit.NanosiemenPerKilometer);
            AssertEx.EqualTolerance(1, quantity27.NanosiemensPerKilometer, NanosiemensPerKilometerTolerance);
            Assert.Equal(ElectricConductivityUnit.NanosiemenPerKilometer, quantity27.Unit);

            var quantity28 = ElectricConductivity.From(1, ElectricConductivityUnit.NanosiemenPerMile);
            AssertEx.EqualTolerance(1, quantity28.NanosiemensPerMile, NanosiemensPerMileTolerance);
            Assert.Equal(ElectricConductivityUnit.NanosiemenPerMile, quantity28.Unit);

            var quantity29 = ElectricConductivity.From(1, ElectricConductivityUnit.NanosiemensPerMeter);
            AssertEx.EqualTolerance(1, quantity29.NanosiemensPerMeter, NanosiemensPerMeterTolerance);
            Assert.Equal(ElectricConductivityUnit.NanosiemensPerMeter, quantity29.Unit);

            var quantity30 = ElectricConductivity.From(1, ElectricConductivityUnit.PicosiemenPerFoot);
            AssertEx.EqualTolerance(1, quantity30.PicosiemensPerFoot, PicosiemensPerFootTolerance);
            Assert.Equal(ElectricConductivityUnit.PicosiemenPerFoot, quantity30.Unit);

            var quantity31 = ElectricConductivity.From(1, ElectricConductivityUnit.PicosiemenPerInch);
            AssertEx.EqualTolerance(1, quantity31.PicosiemensPerInch, PicosiemensPerInchTolerance);
            Assert.Equal(ElectricConductivityUnit.PicosiemenPerInch, quantity31.Unit);

            var quantity32 = ElectricConductivity.From(1, ElectricConductivityUnit.PicosiemenPerKilofoot);
            AssertEx.EqualTolerance(1, quantity32.PicosiemensPerKilofoot, PicosiemensPerKilofootTolerance);
            Assert.Equal(ElectricConductivityUnit.PicosiemenPerKilofoot, quantity32.Unit);

            var quantity33 = ElectricConductivity.From(1, ElectricConductivityUnit.PicosiemenPerKilometer);
            AssertEx.EqualTolerance(1, quantity33.PicosiemensPerKilometer, PicosiemensPerKilometerTolerance);
            Assert.Equal(ElectricConductivityUnit.PicosiemenPerKilometer, quantity33.Unit);

            var quantity34 = ElectricConductivity.From(1, ElectricConductivityUnit.PicosiemenPerMile);
            AssertEx.EqualTolerance(1, quantity34.PicosiemensPerMile, PicosiemensPerMileTolerance);
            Assert.Equal(ElectricConductivityUnit.PicosiemenPerMile, quantity34.Unit);

            var quantity35 = ElectricConductivity.From(1, ElectricConductivityUnit.PicosiemensPerMeter);
            AssertEx.EqualTolerance(1, quantity35.PicosiemensPerMeter, PicosiemensPerMeterTolerance);
            Assert.Equal(ElectricConductivityUnit.PicosiemensPerMeter, quantity35.Unit);

            var quantity36 = ElectricConductivity.From(1, ElectricConductivityUnit.SiemenPerFoot);
            AssertEx.EqualTolerance(1, quantity36.SiemensPerFoot, SiemensPerFootTolerance);
            Assert.Equal(ElectricConductivityUnit.SiemenPerFoot, quantity36.Unit);

            var quantity37 = ElectricConductivity.From(1, ElectricConductivityUnit.SiemenPerInch);
            AssertEx.EqualTolerance(1, quantity37.SiemensPerInch, SiemensPerInchTolerance);
            Assert.Equal(ElectricConductivityUnit.SiemenPerInch, quantity37.Unit);

            var quantity38 = ElectricConductivity.From(1, ElectricConductivityUnit.SiemenPerKilofoot);
            AssertEx.EqualTolerance(1, quantity38.SiemensPerKilofoot, SiemensPerKilofootTolerance);
            Assert.Equal(ElectricConductivityUnit.SiemenPerKilofoot, quantity38.Unit);

            var quantity39 = ElectricConductivity.From(1, ElectricConductivityUnit.SiemenPerKilometer);
            AssertEx.EqualTolerance(1, quantity39.SiemensPerKilometer, SiemensPerKilometerTolerance);
            Assert.Equal(ElectricConductivityUnit.SiemenPerKilometer, quantity39.Unit);

            var quantity40 = ElectricConductivity.From(1, ElectricConductivityUnit.SiemenPerMile);
            AssertEx.EqualTolerance(1, quantity40.SiemensPerMile, SiemensPerMileTolerance);
            Assert.Equal(ElectricConductivityUnit.SiemenPerMile, quantity40.Unit);

            var quantity41 = ElectricConductivity.From(1, ElectricConductivityUnit.SiemensPerMeter);
            AssertEx.EqualTolerance(1, quantity41.SiemensPerMeter, SiemensPerMeterTolerance);
            Assert.Equal(ElectricConductivityUnit.SiemensPerMeter, quantity41.Unit);

        }

        [Fact]
        public void As()
        {
            var siemenspermeter = ElectricConductivity.FromSiemensPerMeter(1);
            AssertEx.EqualTolerance(KilosiemensPerFootInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.KilosiemenPerFoot), KilosiemensPerFootTolerance);
            AssertEx.EqualTolerance(KilosiemensPerInchInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.KilosiemenPerInch), KilosiemensPerInchTolerance);
            AssertEx.EqualTolerance(KilosiemensPerKilofootInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.KilosiemenPerKilofoot), KilosiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(KilosiemensPerKilometerInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.KilosiemenPerKilometer), KilosiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(KilosiemensPerMileInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.KilosiemenPerMile), KilosiemensPerMileTolerance);
            AssertEx.EqualTolerance(KilosiemensPerMeterInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.KilosiemensPerMeter), KilosiemensPerMeterTolerance);
            AssertEx.EqualTolerance(MegasiemensPerFootInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.MegasiemenPerFoot), MegasiemensPerFootTolerance);
            AssertEx.EqualTolerance(MegasiemensPerInchInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.MegasiemenPerInch), MegasiemensPerInchTolerance);
            AssertEx.EqualTolerance(MegasiemensPerKilofootInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.MegasiemenPerKilofoot), MegasiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(MegasiemensPerKilometerInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.MegasiemenPerKilometer), MegasiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(MegasiemensPerMileInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.MegasiemenPerMile), MegasiemensPerMileTolerance);
            AssertEx.EqualTolerance(MegasiemensPerMeterInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.MegasiemensPerMeter), MegasiemensPerMeterTolerance);
            AssertEx.EqualTolerance(MicrosiemensPerFootInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.MicrosiemenPerFoot), MicrosiemensPerFootTolerance);
            AssertEx.EqualTolerance(MicrosiemensPerInchInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.MicrosiemenPerInch), MicrosiemensPerInchTolerance);
            AssertEx.EqualTolerance(MicrosiemensPerKilofootInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.MicrosiemenPerKilofoot), MicrosiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(MicrosiemensPerKilometerInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.MicrosiemenPerKilometer), MicrosiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(MicrosiemensPerMileInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.MicrosiemenPerMile), MicrosiemensPerMileTolerance);
            AssertEx.EqualTolerance(MicrosiemensPerMeterInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.MicrosiemensPerMeter), MicrosiemensPerMeterTolerance);
            AssertEx.EqualTolerance(MillisiemensPerFootInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.MillisiemenPerFoot), MillisiemensPerFootTolerance);
            AssertEx.EqualTolerance(MillisiemensPerInchInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.MillisiemenPerInch), MillisiemensPerInchTolerance);
            AssertEx.EqualTolerance(MillisiemensPerKilofootInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.MillisiemenPerKilofoot), MillisiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(MillisiemensPerKilometerInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.MillisiemenPerKilometer), MillisiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(MillisiemensPerMileInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.MillisiemenPerMile), MillisiemensPerMileTolerance);
            AssertEx.EqualTolerance(MillisiemensPerMeterInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.MillisiemensPerMeter), MillisiemensPerMeterTolerance);
            AssertEx.EqualTolerance(NanosiemensPerFootInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.NanosiemenPerFoot), NanosiemensPerFootTolerance);
            AssertEx.EqualTolerance(NanosiemensPerInchInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.NanosiemenPerInch), NanosiemensPerInchTolerance);
            AssertEx.EqualTolerance(NanosiemensPerKilofootInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.NanosiemenPerKilofoot), NanosiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(NanosiemensPerKilometerInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.NanosiemenPerKilometer), NanosiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(NanosiemensPerMileInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.NanosiemenPerMile), NanosiemensPerMileTolerance);
            AssertEx.EqualTolerance(NanosiemensPerMeterInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.NanosiemensPerMeter), NanosiemensPerMeterTolerance);
            AssertEx.EqualTolerance(PicosiemensPerFootInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.PicosiemenPerFoot), PicosiemensPerFootTolerance);
            AssertEx.EqualTolerance(PicosiemensPerInchInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.PicosiemenPerInch), PicosiemensPerInchTolerance);
            AssertEx.EqualTolerance(PicosiemensPerKilofootInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.PicosiemenPerKilofoot), PicosiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(PicosiemensPerKilometerInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.PicosiemenPerKilometer), PicosiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(PicosiemensPerMileInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.PicosiemenPerMile), PicosiemensPerMileTolerance);
            AssertEx.EqualTolerance(PicosiemensPerMeterInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.PicosiemensPerMeter), PicosiemensPerMeterTolerance);
            AssertEx.EqualTolerance(SiemensPerFootInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.SiemenPerFoot), SiemensPerFootTolerance);
            AssertEx.EqualTolerance(SiemensPerInchInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.SiemenPerInch), SiemensPerInchTolerance);
            AssertEx.EqualTolerance(SiemensPerKilofootInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.SiemenPerKilofoot), SiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(SiemensPerKilometerInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.SiemenPerKilometer), SiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(SiemensPerMileInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.SiemenPerMile), SiemensPerMileTolerance);
            AssertEx.EqualTolerance(SiemensPerMeterInOneSiemensPerMeter, siemenspermeter.As(ElectricConductivityUnit.SiemensPerMeter), SiemensPerMeterTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new ElectricConductivity(value: 1, unit: ElectricConductivity.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (QuantityValue) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(ElectricConductivityUnit unit)
        {
            var inBaseUnits = ElectricConductivity.From(1.0, ElectricConductivity.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(ElectricConductivityUnit unit)
        {
            var quantity = ElectricConductivity.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(ElectricConductivityUnit unit)
        {
            // See if there is a unit available that is not the base unit.
            var fromUnit = ElectricConductivity.Units.FirstOrDefault(u => u != ElectricConductivity.BaseUnit && u != ElectricConductivityUnit.Undefined);

            // If there is only one unit for the quantity, we must use the base unit.
            if (fromUnit == ElectricConductivityUnit.Undefined)
                fromUnit = ElectricConductivity.BaseUnit;

            var quantity = ElectricConductivity.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ElectricConductivity siemenspermeter = ElectricConductivity.FromSiemensPerMeter(1);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromKilosiemensPerFoot(siemenspermeter.KilosiemensPerFoot).SiemensPerMeter, KilosiemensPerFootTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromKilosiemensPerInch(siemenspermeter.KilosiemensPerInch).SiemensPerMeter, KilosiemensPerInchTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromKilosiemensPerKilofoot(siemenspermeter.KilosiemensPerKilofoot).SiemensPerMeter, KilosiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromKilosiemensPerKilometer(siemenspermeter.KilosiemensPerKilometer).SiemensPerMeter, KilosiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromKilosiemensPerMile(siemenspermeter.KilosiemensPerMile).SiemensPerMeter, KilosiemensPerMileTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromKilosiemensPerMeter(siemenspermeter.KilosiemensPerMeter).SiemensPerMeter, KilosiemensPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMegasiemensPerFoot(siemenspermeter.MegasiemensPerFoot).SiemensPerMeter, MegasiemensPerFootTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMegasiemensPerInch(siemenspermeter.MegasiemensPerInch).SiemensPerMeter, MegasiemensPerInchTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMegasiemensPerKilofoot(siemenspermeter.MegasiemensPerKilofoot).SiemensPerMeter, MegasiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMegasiemensPerKilometer(siemenspermeter.MegasiemensPerKilometer).SiemensPerMeter, MegasiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMegasiemensPerMile(siemenspermeter.MegasiemensPerMile).SiemensPerMeter, MegasiemensPerMileTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMegasiemensPerMeter(siemenspermeter.MegasiemensPerMeter).SiemensPerMeter, MegasiemensPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMicrosiemensPerFoot(siemenspermeter.MicrosiemensPerFoot).SiemensPerMeter, MicrosiemensPerFootTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMicrosiemensPerInch(siemenspermeter.MicrosiemensPerInch).SiemensPerMeter, MicrosiemensPerInchTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMicrosiemensPerKilofoot(siemenspermeter.MicrosiemensPerKilofoot).SiemensPerMeter, MicrosiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMicrosiemensPerKilometer(siemenspermeter.MicrosiemensPerKilometer).SiemensPerMeter, MicrosiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMicrosiemensPerMile(siemenspermeter.MicrosiemensPerMile).SiemensPerMeter, MicrosiemensPerMileTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMicrosiemensPerMeter(siemenspermeter.MicrosiemensPerMeter).SiemensPerMeter, MicrosiemensPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMillisiemensPerFoot(siemenspermeter.MillisiemensPerFoot).SiemensPerMeter, MillisiemensPerFootTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMillisiemensPerInch(siemenspermeter.MillisiemensPerInch).SiemensPerMeter, MillisiemensPerInchTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMillisiemensPerKilofoot(siemenspermeter.MillisiemensPerKilofoot).SiemensPerMeter, MillisiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMillisiemensPerKilometer(siemenspermeter.MillisiemensPerKilometer).SiemensPerMeter, MillisiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMillisiemensPerMile(siemenspermeter.MillisiemensPerMile).SiemensPerMeter, MillisiemensPerMileTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMillisiemensPerMeter(siemenspermeter.MillisiemensPerMeter).SiemensPerMeter, MillisiemensPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromNanosiemensPerFoot(siemenspermeter.NanosiemensPerFoot).SiemensPerMeter, NanosiemensPerFootTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromNanosiemensPerInch(siemenspermeter.NanosiemensPerInch).SiemensPerMeter, NanosiemensPerInchTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromNanosiemensPerKilofoot(siemenspermeter.NanosiemensPerKilofoot).SiemensPerMeter, NanosiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromNanosiemensPerKilometer(siemenspermeter.NanosiemensPerKilometer).SiemensPerMeter, NanosiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromNanosiemensPerMile(siemenspermeter.NanosiemensPerMile).SiemensPerMeter, NanosiemensPerMileTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromNanosiemensPerMeter(siemenspermeter.NanosiemensPerMeter).SiemensPerMeter, NanosiemensPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromPicosiemensPerFoot(siemenspermeter.PicosiemensPerFoot).SiemensPerMeter, PicosiemensPerFootTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromPicosiemensPerInch(siemenspermeter.PicosiemensPerInch).SiemensPerMeter, PicosiemensPerInchTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromPicosiemensPerKilofoot(siemenspermeter.PicosiemensPerKilofoot).SiemensPerMeter, PicosiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromPicosiemensPerKilometer(siemenspermeter.PicosiemensPerKilometer).SiemensPerMeter, PicosiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromPicosiemensPerMile(siemenspermeter.PicosiemensPerMile).SiemensPerMeter, PicosiemensPerMileTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromPicosiemensPerMeter(siemenspermeter.PicosiemensPerMeter).SiemensPerMeter, PicosiemensPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromSiemensPerFoot(siemenspermeter.SiemensPerFoot).SiemensPerMeter, SiemensPerFootTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromSiemensPerInch(siemenspermeter.SiemensPerInch).SiemensPerMeter, SiemensPerInchTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromSiemensPerKilofoot(siemenspermeter.SiemensPerKilofoot).SiemensPerMeter, SiemensPerKilofootTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromSiemensPerKilometer(siemenspermeter.SiemensPerKilometer).SiemensPerMeter, SiemensPerKilometerTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromSiemensPerMile(siemenspermeter.SiemensPerMile).SiemensPerMeter, SiemensPerMileTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromSiemensPerMeter(siemenspermeter.SiemensPerMeter).SiemensPerMeter, SiemensPerMeterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ElectricConductivity v = ElectricConductivity.FromSiemensPerMeter(1);
            AssertEx.EqualTolerance(-1, -v.SiemensPerMeter, SiemensPerMeterTolerance);
            AssertEx.EqualTolerance(2, (ElectricConductivity.FromSiemensPerMeter(3)-v).SiemensPerMeter, SiemensPerMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).SiemensPerMeter, SiemensPerMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).SiemensPerMeter, SiemensPerMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).SiemensPerMeter, SiemensPerMeterTolerance);
            AssertEx.EqualTolerance(2, (ElectricConductivity.FromSiemensPerMeter(10)/5).SiemensPerMeter, SiemensPerMeterTolerance);
            AssertEx.EqualTolerance(2, ElectricConductivity.FromSiemensPerMeter(10)/ElectricConductivity.FromSiemensPerMeter(5), SiemensPerMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ElectricConductivity oneSiemensPerMeter = ElectricConductivity.FromSiemensPerMeter(1);
            ElectricConductivity twoSiemensPerMeter = ElectricConductivity.FromSiemensPerMeter(2);

            Assert.True(oneSiemensPerMeter < twoSiemensPerMeter);
            Assert.True(oneSiemensPerMeter <= twoSiemensPerMeter);
            Assert.True(twoSiemensPerMeter > oneSiemensPerMeter);
            Assert.True(twoSiemensPerMeter >= oneSiemensPerMeter);

            Assert.False(oneSiemensPerMeter > twoSiemensPerMeter);
            Assert.False(oneSiemensPerMeter >= twoSiemensPerMeter);
            Assert.False(twoSiemensPerMeter < oneSiemensPerMeter);
            Assert.False(twoSiemensPerMeter <= oneSiemensPerMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ElectricConductivity siemenspermeter = ElectricConductivity.FromSiemensPerMeter(1);
            Assert.Equal(0, siemenspermeter.CompareTo(siemenspermeter));
            Assert.True(siemenspermeter.CompareTo(ElectricConductivity.Zero) > 0);
            Assert.True(ElectricConductivity.Zero.CompareTo(siemenspermeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ElectricConductivity siemenspermeter = ElectricConductivity.FromSiemensPerMeter(1);
            Assert.Throws<ArgumentException>(() => siemenspermeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ElectricConductivity siemenspermeter = ElectricConductivity.FromSiemensPerMeter(1);
            Assert.Throws<ArgumentNullException>(() => siemenspermeter.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = ElectricConductivity.FromSiemensPerMeter(1);
            var b = ElectricConductivity.FromSiemensPerMeter(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = ElectricConductivity.FromSiemensPerMeter(1);
            var b = ElectricConductivity.FromSiemensPerMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = ElectricConductivity.FromSiemensPerMeter(1);
            object b = ElectricConductivity.FromSiemensPerMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = ElectricConductivity.FromSiemensPerMeter(1);
            Assert.True(v.Equals(ElectricConductivity.FromSiemensPerMeter(1), SiemensPerMeterTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(ElectricConductivity.Zero, SiemensPerMeterTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = ElectricConductivity.FromSiemensPerMeter(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(ElectricConductivity.FromSiemensPerMeter(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ElectricConductivity siemenspermeter = ElectricConductivity.FromSiemensPerMeter(1);
            Assert.False(siemenspermeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ElectricConductivity siemenspermeter = ElectricConductivity.FromSiemensPerMeter(1);
            Assert.False(siemenspermeter.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(ElectricConductivityUnit.Undefined, ElectricConductivity.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(ElectricConductivityUnit)).Cast<ElectricConductivityUnit>();
            foreach(var unit in units)
            {
                if (unit == ElectricConductivityUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 kS/ft", new ElectricConductivity(1, ElectricConductivityUnit.KilosiemenPerFoot).ToString());
                Assert.Equal("1 kS/in", new ElectricConductivity(1, ElectricConductivityUnit.KilosiemenPerInch).ToString());
                Assert.Equal("1 kS/kft", new ElectricConductivity(1, ElectricConductivityUnit.KilosiemenPerKilofoot).ToString());
                Assert.Equal("1 kS/km", new ElectricConductivity(1, ElectricConductivityUnit.KilosiemenPerKilometer).ToString());
                Assert.Equal("1 kS/mi", new ElectricConductivity(1, ElectricConductivityUnit.KilosiemenPerMile).ToString());
                Assert.Equal("1 kS/m", new ElectricConductivity(1, ElectricConductivityUnit.KilosiemensPerMeter).ToString());
                Assert.Equal("1 MS/ft", new ElectricConductivity(1, ElectricConductivityUnit.MegasiemenPerFoot).ToString());
                Assert.Equal("1 MS/in", new ElectricConductivity(1, ElectricConductivityUnit.MegasiemenPerInch).ToString());
                Assert.Equal("1 MS/kft", new ElectricConductivity(1, ElectricConductivityUnit.MegasiemenPerKilofoot).ToString());
                Assert.Equal("1 MS/km", new ElectricConductivity(1, ElectricConductivityUnit.MegasiemenPerKilometer).ToString());
                Assert.Equal("1 MS/mi", new ElectricConductivity(1, ElectricConductivityUnit.MegasiemenPerMile).ToString());
                Assert.Equal("1 MS/m", new ElectricConductivity(1, ElectricConductivityUnit.MegasiemensPerMeter).ToString());
                Assert.Equal("1 µS/ft", new ElectricConductivity(1, ElectricConductivityUnit.MicrosiemenPerFoot).ToString());
                Assert.Equal("1 µS/in", new ElectricConductivity(1, ElectricConductivityUnit.MicrosiemenPerInch).ToString());
                Assert.Equal("1 µS/kft", new ElectricConductivity(1, ElectricConductivityUnit.MicrosiemenPerKilofoot).ToString());
                Assert.Equal("1 µS/km", new ElectricConductivity(1, ElectricConductivityUnit.MicrosiemenPerKilometer).ToString());
                Assert.Equal("1 µS/mi", new ElectricConductivity(1, ElectricConductivityUnit.MicrosiemenPerMile).ToString());
                Assert.Equal("1 µS/m", new ElectricConductivity(1, ElectricConductivityUnit.MicrosiemensPerMeter).ToString());
                Assert.Equal("1 mS/ft", new ElectricConductivity(1, ElectricConductivityUnit.MillisiemenPerFoot).ToString());
                Assert.Equal("1 mS/in", new ElectricConductivity(1, ElectricConductivityUnit.MillisiemenPerInch).ToString());
                Assert.Equal("1 mS/kft", new ElectricConductivity(1, ElectricConductivityUnit.MillisiemenPerKilofoot).ToString());
                Assert.Equal("1 mS/km", new ElectricConductivity(1, ElectricConductivityUnit.MillisiemenPerKilometer).ToString());
                Assert.Equal("1 mS/mi", new ElectricConductivity(1, ElectricConductivityUnit.MillisiemenPerMile).ToString());
                Assert.Equal("1 mS/m", new ElectricConductivity(1, ElectricConductivityUnit.MillisiemensPerMeter).ToString());
                Assert.Equal("1 nS/ft", new ElectricConductivity(1, ElectricConductivityUnit.NanosiemenPerFoot).ToString());
                Assert.Equal("1 nS/in", new ElectricConductivity(1, ElectricConductivityUnit.NanosiemenPerInch).ToString());
                Assert.Equal("1 nS/kft", new ElectricConductivity(1, ElectricConductivityUnit.NanosiemenPerKilofoot).ToString());
                Assert.Equal("1 nS/km", new ElectricConductivity(1, ElectricConductivityUnit.NanosiemenPerKilometer).ToString());
                Assert.Equal("1 nS/mi", new ElectricConductivity(1, ElectricConductivityUnit.NanosiemenPerMile).ToString());
                Assert.Equal("1 nS/m", new ElectricConductivity(1, ElectricConductivityUnit.NanosiemensPerMeter).ToString());
                Assert.Equal("1 pS/ft", new ElectricConductivity(1, ElectricConductivityUnit.PicosiemenPerFoot).ToString());
                Assert.Equal("1 pS/in", new ElectricConductivity(1, ElectricConductivityUnit.PicosiemenPerInch).ToString());
                Assert.Equal("1 pS/kft", new ElectricConductivity(1, ElectricConductivityUnit.PicosiemenPerKilofoot).ToString());
                Assert.Equal("1 pS/km", new ElectricConductivity(1, ElectricConductivityUnit.PicosiemenPerKilometer).ToString());
                Assert.Equal("1 pS/mi", new ElectricConductivity(1, ElectricConductivityUnit.PicosiemenPerMile).ToString());
                Assert.Equal("1 pS/m", new ElectricConductivity(1, ElectricConductivityUnit.PicosiemensPerMeter).ToString());
                Assert.Equal("1 S/ft", new ElectricConductivity(1, ElectricConductivityUnit.SiemenPerFoot).ToString());
                Assert.Equal("1 S/in", new ElectricConductivity(1, ElectricConductivityUnit.SiemenPerInch).ToString());
                Assert.Equal("1 S/kft", new ElectricConductivity(1, ElectricConductivityUnit.SiemenPerKilofoot).ToString());
                Assert.Equal("1 S/km", new ElectricConductivity(1, ElectricConductivityUnit.SiemenPerKilometer).ToString());
                Assert.Equal("1 S/mi", new ElectricConductivity(1, ElectricConductivityUnit.SiemenPerMile).ToString());
                Assert.Equal("1 S/m", new ElectricConductivity(1, ElectricConductivityUnit.SiemensPerMeter).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 kS/ft", new ElectricConductivity(1, ElectricConductivityUnit.KilosiemenPerFoot).ToString(swedishCulture));
            Assert.Equal("1 kS/in", new ElectricConductivity(1, ElectricConductivityUnit.KilosiemenPerInch).ToString(swedishCulture));
            Assert.Equal("1 kS/kft", new ElectricConductivity(1, ElectricConductivityUnit.KilosiemenPerKilofoot).ToString(swedishCulture));
            Assert.Equal("1 kS/km", new ElectricConductivity(1, ElectricConductivityUnit.KilosiemenPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 kS/mi", new ElectricConductivity(1, ElectricConductivityUnit.KilosiemenPerMile).ToString(swedishCulture));
            Assert.Equal("1 kS/m", new ElectricConductivity(1, ElectricConductivityUnit.KilosiemensPerMeter).ToString(swedishCulture));
            Assert.Equal("1 MS/ft", new ElectricConductivity(1, ElectricConductivityUnit.MegasiemenPerFoot).ToString(swedishCulture));
            Assert.Equal("1 MS/in", new ElectricConductivity(1, ElectricConductivityUnit.MegasiemenPerInch).ToString(swedishCulture));
            Assert.Equal("1 MS/kft", new ElectricConductivity(1, ElectricConductivityUnit.MegasiemenPerKilofoot).ToString(swedishCulture));
            Assert.Equal("1 MS/km", new ElectricConductivity(1, ElectricConductivityUnit.MegasiemenPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 MS/mi", new ElectricConductivity(1, ElectricConductivityUnit.MegasiemenPerMile).ToString(swedishCulture));
            Assert.Equal("1 MS/m", new ElectricConductivity(1, ElectricConductivityUnit.MegasiemensPerMeter).ToString(swedishCulture));
            Assert.Equal("1 µS/ft", new ElectricConductivity(1, ElectricConductivityUnit.MicrosiemenPerFoot).ToString(swedishCulture));
            Assert.Equal("1 µS/in", new ElectricConductivity(1, ElectricConductivityUnit.MicrosiemenPerInch).ToString(swedishCulture));
            Assert.Equal("1 µS/kft", new ElectricConductivity(1, ElectricConductivityUnit.MicrosiemenPerKilofoot).ToString(swedishCulture));
            Assert.Equal("1 µS/km", new ElectricConductivity(1, ElectricConductivityUnit.MicrosiemenPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 µS/mi", new ElectricConductivity(1, ElectricConductivityUnit.MicrosiemenPerMile).ToString(swedishCulture));
            Assert.Equal("1 µS/m", new ElectricConductivity(1, ElectricConductivityUnit.MicrosiemensPerMeter).ToString(swedishCulture));
            Assert.Equal("1 mS/ft", new ElectricConductivity(1, ElectricConductivityUnit.MillisiemenPerFoot).ToString(swedishCulture));
            Assert.Equal("1 mS/in", new ElectricConductivity(1, ElectricConductivityUnit.MillisiemenPerInch).ToString(swedishCulture));
            Assert.Equal("1 mS/kft", new ElectricConductivity(1, ElectricConductivityUnit.MillisiemenPerKilofoot).ToString(swedishCulture));
            Assert.Equal("1 mS/km", new ElectricConductivity(1, ElectricConductivityUnit.MillisiemenPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 mS/mi", new ElectricConductivity(1, ElectricConductivityUnit.MillisiemenPerMile).ToString(swedishCulture));
            Assert.Equal("1 mS/m", new ElectricConductivity(1, ElectricConductivityUnit.MillisiemensPerMeter).ToString(swedishCulture));
            Assert.Equal("1 nS/ft", new ElectricConductivity(1, ElectricConductivityUnit.NanosiemenPerFoot).ToString(swedishCulture));
            Assert.Equal("1 nS/in", new ElectricConductivity(1, ElectricConductivityUnit.NanosiemenPerInch).ToString(swedishCulture));
            Assert.Equal("1 nS/kft", new ElectricConductivity(1, ElectricConductivityUnit.NanosiemenPerKilofoot).ToString(swedishCulture));
            Assert.Equal("1 nS/km", new ElectricConductivity(1, ElectricConductivityUnit.NanosiemenPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 nS/mi", new ElectricConductivity(1, ElectricConductivityUnit.NanosiemenPerMile).ToString(swedishCulture));
            Assert.Equal("1 nS/m", new ElectricConductivity(1, ElectricConductivityUnit.NanosiemensPerMeter).ToString(swedishCulture));
            Assert.Equal("1 pS/ft", new ElectricConductivity(1, ElectricConductivityUnit.PicosiemenPerFoot).ToString(swedishCulture));
            Assert.Equal("1 pS/in", new ElectricConductivity(1, ElectricConductivityUnit.PicosiemenPerInch).ToString(swedishCulture));
            Assert.Equal("1 pS/kft", new ElectricConductivity(1, ElectricConductivityUnit.PicosiemenPerKilofoot).ToString(swedishCulture));
            Assert.Equal("1 pS/km", new ElectricConductivity(1, ElectricConductivityUnit.PicosiemenPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 pS/mi", new ElectricConductivity(1, ElectricConductivityUnit.PicosiemenPerMile).ToString(swedishCulture));
            Assert.Equal("1 pS/m", new ElectricConductivity(1, ElectricConductivityUnit.PicosiemensPerMeter).ToString(swedishCulture));
            Assert.Equal("1 S/ft", new ElectricConductivity(1, ElectricConductivityUnit.SiemenPerFoot).ToString(swedishCulture));
            Assert.Equal("1 S/in", new ElectricConductivity(1, ElectricConductivityUnit.SiemenPerInch).ToString(swedishCulture));
            Assert.Equal("1 S/kft", new ElectricConductivity(1, ElectricConductivityUnit.SiemenPerKilofoot).ToString(swedishCulture));
            Assert.Equal("1 S/km", new ElectricConductivity(1, ElectricConductivityUnit.SiemenPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 S/mi", new ElectricConductivity(1, ElectricConductivityUnit.SiemenPerMile).ToString(swedishCulture));
            Assert.Equal("1 S/m", new ElectricConductivity(1, ElectricConductivityUnit.SiemensPerMeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 S/m", new ElectricConductivity(0.123456, ElectricConductivityUnit.SiemensPerMeter).ToString("s1"));
                Assert.Equal("0.12 S/m", new ElectricConductivity(0.123456, ElectricConductivityUnit.SiemensPerMeter).ToString("s2"));
                Assert.Equal("0.123 S/m", new ElectricConductivity(0.123456, ElectricConductivityUnit.SiemensPerMeter).ToString("s3"));
                Assert.Equal("0.1235 S/m", new ElectricConductivity(0.123456, ElectricConductivityUnit.SiemensPerMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 S/m", new ElectricConductivity(0.123456, ElectricConductivityUnit.SiemensPerMeter).ToString("s1", culture));
            Assert.Equal("0.12 S/m", new ElectricConductivity(0.123456, ElectricConductivityUnit.SiemensPerMeter).ToString("s2", culture));
            Assert.Equal("0.123 S/m", new ElectricConductivity(0.123456, ElectricConductivityUnit.SiemensPerMeter).ToString("s3", culture));
            Assert.Equal("0.1235 S/m", new ElectricConductivity(0.123456, ElectricConductivityUnit.SiemensPerMeter).ToString("s4", culture));
        }

/*
        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }
*/

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
           Assert.Equal((byte)quantity.Value.Real, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Equal((decimal)quantity.Value.Real, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Equal((double)quantity.Value.Real, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Equal((short)quantity.Value.Real, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Equal((int)quantity.Value.Real, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Equal((long)quantity.Value.Real, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Equal((sbyte)quantity.Value.Real, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Equal((float)quantity.Value.Real, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Equal((ushort)quantity.Value.Real, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Equal((uint)quantity.Value.Real, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Equal((ulong)quantity.Value.Real, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(ElectricConductivity)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(ElectricConductivityUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Equal(ElectricConductivity.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Equal(ElectricConductivity.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(1.0);
            Assert.Equal(new {ElectricConductivity.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = ElectricConductivity.FromSiemensPerMeter(value);
            Assert.Equal(ElectricConductivity.FromSiemensPerMeter(-value), -quantity);
        }
    }
}
