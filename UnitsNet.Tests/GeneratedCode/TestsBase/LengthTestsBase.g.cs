//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Length.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class LengthTestsBase : QuantityTestsBase
    {
        protected abstract double AngstromsInOneMeter { get; }
        protected abstract double AstronomicalUnitsInOneMeter { get; }
        protected abstract double CentimetersInOneMeter { get; }
        protected abstract double ChainsInOneMeter { get; }
        protected abstract double DecametersInOneMeter { get; }
        protected abstract double DecimetersInOneMeter { get; }
        protected abstract double DtpPicasInOneMeter { get; }
        protected abstract double DtpPointsInOneMeter { get; }
        protected abstract double FathomsInOneMeter { get; }
        protected abstract double FeetInOneMeter { get; }
        protected abstract double HandsInOneMeter { get; }
        protected abstract double HectometersInOneMeter { get; }
        protected abstract double InchesInOneMeter { get; }
        protected abstract double KilolightYearsInOneMeter { get; }
        protected abstract double KilometersInOneMeter { get; }
        protected abstract double KiloparsecsInOneMeter { get; }
        protected abstract double LightYearsInOneMeter { get; }
        protected abstract double MegalightYearsInOneMeter { get; }
        protected abstract double MegaparsecsInOneMeter { get; }
        protected abstract double MetersInOneMeter { get; }
        protected abstract double MicroinchesInOneMeter { get; }
        protected abstract double MicrometersInOneMeter { get; }
        protected abstract double MilsInOneMeter { get; }
        protected abstract double MilesInOneMeter { get; }
        protected abstract double MillimetersInOneMeter { get; }
        protected abstract double NanometersInOneMeter { get; }
        protected abstract double NauticalMilesInOneMeter { get; }
        protected abstract double ParsecsInOneMeter { get; }
        protected abstract double PrinterPicasInOneMeter { get; }
        protected abstract double PrinterPointsInOneMeter { get; }
        protected abstract double ShacklesInOneMeter { get; }
        protected abstract double SolarRadiusesInOneMeter { get; }
        protected abstract double TwipsInOneMeter { get; }
        protected abstract double UsSurveyFeetInOneMeter { get; }
        protected abstract double YardsInOneMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AngstromsTolerance { get { return 1e-5; } }
        protected virtual double AstronomicalUnitsTolerance { get { return 1e-5; } }
        protected virtual double CentimetersTolerance { get { return 1e-5; } }
        protected virtual double ChainsTolerance { get { return 1e-5; } }
        protected virtual double DecametersTolerance { get { return 1e-5; } }
        protected virtual double DecimetersTolerance { get { return 1e-5; } }
        protected virtual double DtpPicasTolerance { get { return 1e-5; } }
        protected virtual double DtpPointsTolerance { get { return 1e-5; } }
        protected virtual double FathomsTolerance { get { return 1e-5; } }
        protected virtual double FeetTolerance { get { return 1e-5; } }
        protected virtual double HandsTolerance { get { return 1e-5; } }
        protected virtual double HectometersTolerance { get { return 1e-5; } }
        protected virtual double InchesTolerance { get { return 1e-5; } }
        protected virtual double KilolightYearsTolerance { get { return 1e-5; } }
        protected virtual double KilometersTolerance { get { return 1e-5; } }
        protected virtual double KiloparsecsTolerance { get { return 1e-5; } }
        protected virtual double LightYearsTolerance { get { return 1e-5; } }
        protected virtual double MegalightYearsTolerance { get { return 1e-5; } }
        protected virtual double MegaparsecsTolerance { get { return 1e-5; } }
        protected virtual double MetersTolerance { get { return 1e-5; } }
        protected virtual double MicroinchesTolerance { get { return 1e-5; } }
        protected virtual double MicrometersTolerance { get { return 1e-5; } }
        protected virtual double MilsTolerance { get { return 1e-5; } }
        protected virtual double MilesTolerance { get { return 1e-5; } }
        protected virtual double MillimetersTolerance { get { return 1e-5; } }
        protected virtual double NanometersTolerance { get { return 1e-5; } }
        protected virtual double NauticalMilesTolerance { get { return 1e-5; } }
        protected virtual double ParsecsTolerance { get { return 1e-5; } }
        protected virtual double PrinterPicasTolerance { get { return 1e-5; } }
        protected virtual double PrinterPointsTolerance { get { return 1e-5; } }
        protected virtual double ShacklesTolerance { get { return 1e-5; } }
        protected virtual double SolarRadiusesTolerance { get { return 1e-5; } }
        protected virtual double TwipsTolerance { get { return 1e-5; } }
        protected virtual double UsSurveyFeetTolerance { get { return 1e-5; } }
        protected virtual double YardsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(LengthUnit unit)
        {
            return unit switch
            {
                LengthUnit.Angstrom => (AngstromsInOneMeter, AngstromsTolerance),
                LengthUnit.AstronomicalUnit => (AstronomicalUnitsInOneMeter, AstronomicalUnitsTolerance),
                LengthUnit.Centimeter => (CentimetersInOneMeter, CentimetersTolerance),
                LengthUnit.Chain => (ChainsInOneMeter, ChainsTolerance),
                LengthUnit.Decameter => (DecametersInOneMeter, DecametersTolerance),
                LengthUnit.Decimeter => (DecimetersInOneMeter, DecimetersTolerance),
                LengthUnit.DtpPica => (DtpPicasInOneMeter, DtpPicasTolerance),
                LengthUnit.DtpPoint => (DtpPointsInOneMeter, DtpPointsTolerance),
                LengthUnit.Fathom => (FathomsInOneMeter, FathomsTolerance),
                LengthUnit.Foot => (FeetInOneMeter, FeetTolerance),
                LengthUnit.Hand => (HandsInOneMeter, HandsTolerance),
                LengthUnit.Hectometer => (HectometersInOneMeter, HectometersTolerance),
                LengthUnit.Inch => (InchesInOneMeter, InchesTolerance),
                LengthUnit.KilolightYear => (KilolightYearsInOneMeter, KilolightYearsTolerance),
                LengthUnit.Kilometer => (KilometersInOneMeter, KilometersTolerance),
                LengthUnit.Kiloparsec => (KiloparsecsInOneMeter, KiloparsecsTolerance),
                LengthUnit.LightYear => (LightYearsInOneMeter, LightYearsTolerance),
                LengthUnit.MegalightYear => (MegalightYearsInOneMeter, MegalightYearsTolerance),
                LengthUnit.Megaparsec => (MegaparsecsInOneMeter, MegaparsecsTolerance),
                LengthUnit.Meter => (MetersInOneMeter, MetersTolerance),
                LengthUnit.Microinch => (MicroinchesInOneMeter, MicroinchesTolerance),
                LengthUnit.Micrometer => (MicrometersInOneMeter, MicrometersTolerance),
                LengthUnit.Mil => (MilsInOneMeter, MilsTolerance),
                LengthUnit.Mile => (MilesInOneMeter, MilesTolerance),
                LengthUnit.Millimeter => (MillimetersInOneMeter, MillimetersTolerance),
                LengthUnit.Nanometer => (NanometersInOneMeter, NanometersTolerance),
                LengthUnit.NauticalMile => (NauticalMilesInOneMeter, NauticalMilesTolerance),
                LengthUnit.Parsec => (ParsecsInOneMeter, ParsecsTolerance),
                LengthUnit.PrinterPica => (PrinterPicasInOneMeter, PrinterPicasTolerance),
                LengthUnit.PrinterPoint => (PrinterPointsInOneMeter, PrinterPointsTolerance),
                LengthUnit.Shackle => (ShacklesInOneMeter, ShacklesTolerance),
                LengthUnit.SolarRadius => (SolarRadiusesInOneMeter, SolarRadiusesTolerance),
                LengthUnit.Twip => (TwipsInOneMeter, TwipsTolerance),
                LengthUnit.UsSurveyFoot => (UsSurveyFeetInOneMeter, UsSurveyFeetTolerance),
                LengthUnit.Yard => (YardsInOneMeter, YardsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { LengthUnit.Angstrom },
            new object[] { LengthUnit.AstronomicalUnit },
            new object[] { LengthUnit.Centimeter },
            new object[] { LengthUnit.Chain },
            new object[] { LengthUnit.Decameter },
            new object[] { LengthUnit.Decimeter },
            new object[] { LengthUnit.DtpPica },
            new object[] { LengthUnit.DtpPoint },
            new object[] { LengthUnit.Fathom },
            new object[] { LengthUnit.Foot },
            new object[] { LengthUnit.Hand },
            new object[] { LengthUnit.Hectometer },
            new object[] { LengthUnit.Inch },
            new object[] { LengthUnit.KilolightYear },
            new object[] { LengthUnit.Kilometer },
            new object[] { LengthUnit.Kiloparsec },
            new object[] { LengthUnit.LightYear },
            new object[] { LengthUnit.MegalightYear },
            new object[] { LengthUnit.Megaparsec },
            new object[] { LengthUnit.Meter },
            new object[] { LengthUnit.Microinch },
            new object[] { LengthUnit.Micrometer },
            new object[] { LengthUnit.Mil },
            new object[] { LengthUnit.Mile },
            new object[] { LengthUnit.Millimeter },
            new object[] { LengthUnit.Nanometer },
            new object[] { LengthUnit.NauticalMile },
            new object[] { LengthUnit.Parsec },
            new object[] { LengthUnit.PrinterPica },
            new object[] { LengthUnit.PrinterPoint },
            new object[] { LengthUnit.Shackle },
            new object[] { LengthUnit.SolarRadius },
            new object[] { LengthUnit.Twip },
            new object[] { LengthUnit.UsSurveyFoot },
            new object[] { LengthUnit.Yard },
        };

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Length((QuantityValue)0.0, LengthUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Length();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(LengthUnit.Meter, quantity.Unit);
        }


        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Length(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new Length(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (Length) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void Length_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Length(1, LengthUnit.Meter);

            QuantityInfo<LengthUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Length.Zero, quantityInfo.Zero);
            Assert.Equal("Length", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<LengthUnit>().Except(new[] {LengthUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

        }

        [Fact]
        public void MeterToLengthUnits()
        {
            Length meter = Length.FromMeters(1);
            AssertEx.EqualTolerance(AngstromsInOneMeter, meter.Angstroms, AngstromsTolerance);
            AssertEx.EqualTolerance(AstronomicalUnitsInOneMeter, meter.AstronomicalUnits, AstronomicalUnitsTolerance);
            AssertEx.EqualTolerance(CentimetersInOneMeter, meter.Centimeters, CentimetersTolerance);
            AssertEx.EqualTolerance(ChainsInOneMeter, meter.Chains, ChainsTolerance);
            AssertEx.EqualTolerance(DecametersInOneMeter, meter.Decameters, DecametersTolerance);
            AssertEx.EqualTolerance(DecimetersInOneMeter, meter.Decimeters, DecimetersTolerance);
            AssertEx.EqualTolerance(DtpPicasInOneMeter, meter.DtpPicas, DtpPicasTolerance);
            AssertEx.EqualTolerance(DtpPointsInOneMeter, meter.DtpPoints, DtpPointsTolerance);
            AssertEx.EqualTolerance(FathomsInOneMeter, meter.Fathoms, FathomsTolerance);
            AssertEx.EqualTolerance(FeetInOneMeter, meter.Feet, FeetTolerance);
            AssertEx.EqualTolerance(HandsInOneMeter, meter.Hands, HandsTolerance);
            AssertEx.EqualTolerance(HectometersInOneMeter, meter.Hectometers, HectometersTolerance);
            AssertEx.EqualTolerance(InchesInOneMeter, meter.Inches, InchesTolerance);
            AssertEx.EqualTolerance(KilolightYearsInOneMeter, meter.KilolightYears, KilolightYearsTolerance);
            AssertEx.EqualTolerance(KilometersInOneMeter, meter.Kilometers, KilometersTolerance);
            AssertEx.EqualTolerance(KiloparsecsInOneMeter, meter.Kiloparsecs, KiloparsecsTolerance);
            AssertEx.EqualTolerance(LightYearsInOneMeter, meter.LightYears, LightYearsTolerance);
            AssertEx.EqualTolerance(MegalightYearsInOneMeter, meter.MegalightYears, MegalightYearsTolerance);
            AssertEx.EqualTolerance(MegaparsecsInOneMeter, meter.Megaparsecs, MegaparsecsTolerance);
            AssertEx.EqualTolerance(MetersInOneMeter, meter.Meters, MetersTolerance);
            AssertEx.EqualTolerance(MicroinchesInOneMeter, meter.Microinches, MicroinchesTolerance);
            AssertEx.EqualTolerance(MicrometersInOneMeter, meter.Micrometers, MicrometersTolerance);
            AssertEx.EqualTolerance(MilsInOneMeter, meter.Mils, MilsTolerance);
            AssertEx.EqualTolerance(MilesInOneMeter, meter.Miles, MilesTolerance);
            AssertEx.EqualTolerance(MillimetersInOneMeter, meter.Millimeters, MillimetersTolerance);
            AssertEx.EqualTolerance(NanometersInOneMeter, meter.Nanometers, NanometersTolerance);
            AssertEx.EqualTolerance(NauticalMilesInOneMeter, meter.NauticalMiles, NauticalMilesTolerance);
            AssertEx.EqualTolerance(ParsecsInOneMeter, meter.Parsecs, ParsecsTolerance);
            AssertEx.EqualTolerance(PrinterPicasInOneMeter, meter.PrinterPicas, PrinterPicasTolerance);
            AssertEx.EqualTolerance(PrinterPointsInOneMeter, meter.PrinterPoints, PrinterPointsTolerance);
            AssertEx.EqualTolerance(ShacklesInOneMeter, meter.Shackles, ShacklesTolerance);
            AssertEx.EqualTolerance(SolarRadiusesInOneMeter, meter.SolarRadiuses, SolarRadiusesTolerance);
            AssertEx.EqualTolerance(TwipsInOneMeter, meter.Twips, TwipsTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetInOneMeter, meter.UsSurveyFeet, UsSurveyFeetTolerance);
            AssertEx.EqualTolerance(YardsInOneMeter, meter.Yards, YardsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Length.From(1, LengthUnit.Angstrom);
            AssertEx.EqualTolerance(1, quantity00.Angstroms, AngstromsTolerance);
            Assert.Equal(LengthUnit.Angstrom, quantity00.Unit);

            var quantity01 = Length.From(1, LengthUnit.AstronomicalUnit);
            AssertEx.EqualTolerance(1, quantity01.AstronomicalUnits, AstronomicalUnitsTolerance);
            Assert.Equal(LengthUnit.AstronomicalUnit, quantity01.Unit);

            var quantity02 = Length.From(1, LengthUnit.Centimeter);
            AssertEx.EqualTolerance(1, quantity02.Centimeters, CentimetersTolerance);
            Assert.Equal(LengthUnit.Centimeter, quantity02.Unit);

            var quantity03 = Length.From(1, LengthUnit.Chain);
            AssertEx.EqualTolerance(1, quantity03.Chains, ChainsTolerance);
            Assert.Equal(LengthUnit.Chain, quantity03.Unit);

            var quantity04 = Length.From(1, LengthUnit.Decameter);
            AssertEx.EqualTolerance(1, quantity04.Decameters, DecametersTolerance);
            Assert.Equal(LengthUnit.Decameter, quantity04.Unit);

            var quantity05 = Length.From(1, LengthUnit.Decimeter);
            AssertEx.EqualTolerance(1, quantity05.Decimeters, DecimetersTolerance);
            Assert.Equal(LengthUnit.Decimeter, quantity05.Unit);

            var quantity06 = Length.From(1, LengthUnit.DtpPica);
            AssertEx.EqualTolerance(1, quantity06.DtpPicas, DtpPicasTolerance);
            Assert.Equal(LengthUnit.DtpPica, quantity06.Unit);

            var quantity07 = Length.From(1, LengthUnit.DtpPoint);
            AssertEx.EqualTolerance(1, quantity07.DtpPoints, DtpPointsTolerance);
            Assert.Equal(LengthUnit.DtpPoint, quantity07.Unit);

            var quantity08 = Length.From(1, LengthUnit.Fathom);
            AssertEx.EqualTolerance(1, quantity08.Fathoms, FathomsTolerance);
            Assert.Equal(LengthUnit.Fathom, quantity08.Unit);

            var quantity09 = Length.From(1, LengthUnit.Foot);
            AssertEx.EqualTolerance(1, quantity09.Feet, FeetTolerance);
            Assert.Equal(LengthUnit.Foot, quantity09.Unit);

            var quantity10 = Length.From(1, LengthUnit.Hand);
            AssertEx.EqualTolerance(1, quantity10.Hands, HandsTolerance);
            Assert.Equal(LengthUnit.Hand, quantity10.Unit);

            var quantity11 = Length.From(1, LengthUnit.Hectometer);
            AssertEx.EqualTolerance(1, quantity11.Hectometers, HectometersTolerance);
            Assert.Equal(LengthUnit.Hectometer, quantity11.Unit);

            var quantity12 = Length.From(1, LengthUnit.Inch);
            AssertEx.EqualTolerance(1, quantity12.Inches, InchesTolerance);
            Assert.Equal(LengthUnit.Inch, quantity12.Unit);

            var quantity13 = Length.From(1, LengthUnit.KilolightYear);
            AssertEx.EqualTolerance(1, quantity13.KilolightYears, KilolightYearsTolerance);
            Assert.Equal(LengthUnit.KilolightYear, quantity13.Unit);

            var quantity14 = Length.From(1, LengthUnit.Kilometer);
            AssertEx.EqualTolerance(1, quantity14.Kilometers, KilometersTolerance);
            Assert.Equal(LengthUnit.Kilometer, quantity14.Unit);

            var quantity15 = Length.From(1, LengthUnit.Kiloparsec);
            AssertEx.EqualTolerance(1, quantity15.Kiloparsecs, KiloparsecsTolerance);
            Assert.Equal(LengthUnit.Kiloparsec, quantity15.Unit);

            var quantity16 = Length.From(1, LengthUnit.LightYear);
            AssertEx.EqualTolerance(1, quantity16.LightYears, LightYearsTolerance);
            Assert.Equal(LengthUnit.LightYear, quantity16.Unit);

            var quantity17 = Length.From(1, LengthUnit.MegalightYear);
            AssertEx.EqualTolerance(1, quantity17.MegalightYears, MegalightYearsTolerance);
            Assert.Equal(LengthUnit.MegalightYear, quantity17.Unit);

            var quantity18 = Length.From(1, LengthUnit.Megaparsec);
            AssertEx.EqualTolerance(1, quantity18.Megaparsecs, MegaparsecsTolerance);
            Assert.Equal(LengthUnit.Megaparsec, quantity18.Unit);

            var quantity19 = Length.From(1, LengthUnit.Meter);
            AssertEx.EqualTolerance(1, quantity19.Meters, MetersTolerance);
            Assert.Equal(LengthUnit.Meter, quantity19.Unit);

            var quantity20 = Length.From(1, LengthUnit.Microinch);
            AssertEx.EqualTolerance(1, quantity20.Microinches, MicroinchesTolerance);
            Assert.Equal(LengthUnit.Microinch, quantity20.Unit);

            var quantity21 = Length.From(1, LengthUnit.Micrometer);
            AssertEx.EqualTolerance(1, quantity21.Micrometers, MicrometersTolerance);
            Assert.Equal(LengthUnit.Micrometer, quantity21.Unit);

            var quantity22 = Length.From(1, LengthUnit.Mil);
            AssertEx.EqualTolerance(1, quantity22.Mils, MilsTolerance);
            Assert.Equal(LengthUnit.Mil, quantity22.Unit);

            var quantity23 = Length.From(1, LengthUnit.Mile);
            AssertEx.EqualTolerance(1, quantity23.Miles, MilesTolerance);
            Assert.Equal(LengthUnit.Mile, quantity23.Unit);

            var quantity24 = Length.From(1, LengthUnit.Millimeter);
            AssertEx.EqualTolerance(1, quantity24.Millimeters, MillimetersTolerance);
            Assert.Equal(LengthUnit.Millimeter, quantity24.Unit);

            var quantity25 = Length.From(1, LengthUnit.Nanometer);
            AssertEx.EqualTolerance(1, quantity25.Nanometers, NanometersTolerance);
            Assert.Equal(LengthUnit.Nanometer, quantity25.Unit);

            var quantity26 = Length.From(1, LengthUnit.NauticalMile);
            AssertEx.EqualTolerance(1, quantity26.NauticalMiles, NauticalMilesTolerance);
            Assert.Equal(LengthUnit.NauticalMile, quantity26.Unit);

            var quantity27 = Length.From(1, LengthUnit.Parsec);
            AssertEx.EqualTolerance(1, quantity27.Parsecs, ParsecsTolerance);
            Assert.Equal(LengthUnit.Parsec, quantity27.Unit);

            var quantity28 = Length.From(1, LengthUnit.PrinterPica);
            AssertEx.EqualTolerance(1, quantity28.PrinterPicas, PrinterPicasTolerance);
            Assert.Equal(LengthUnit.PrinterPica, quantity28.Unit);

            var quantity29 = Length.From(1, LengthUnit.PrinterPoint);
            AssertEx.EqualTolerance(1, quantity29.PrinterPoints, PrinterPointsTolerance);
            Assert.Equal(LengthUnit.PrinterPoint, quantity29.Unit);

            var quantity30 = Length.From(1, LengthUnit.Shackle);
            AssertEx.EqualTolerance(1, quantity30.Shackles, ShacklesTolerance);
            Assert.Equal(LengthUnit.Shackle, quantity30.Unit);

            var quantity31 = Length.From(1, LengthUnit.SolarRadius);
            AssertEx.EqualTolerance(1, quantity31.SolarRadiuses, SolarRadiusesTolerance);
            Assert.Equal(LengthUnit.SolarRadius, quantity31.Unit);

            var quantity32 = Length.From(1, LengthUnit.Twip);
            AssertEx.EqualTolerance(1, quantity32.Twips, TwipsTolerance);
            Assert.Equal(LengthUnit.Twip, quantity32.Unit);

            var quantity33 = Length.From(1, LengthUnit.UsSurveyFoot);
            AssertEx.EqualTolerance(1, quantity33.UsSurveyFeet, UsSurveyFeetTolerance);
            Assert.Equal(LengthUnit.UsSurveyFoot, quantity33.Unit);

            var quantity34 = Length.From(1, LengthUnit.Yard);
            AssertEx.EqualTolerance(1, quantity34.Yards, YardsTolerance);
            Assert.Equal(LengthUnit.Yard, quantity34.Unit);

        }

        [Fact]
        public void As()
        {
            var meter = Length.FromMeters(1);
            AssertEx.EqualTolerance(AngstromsInOneMeter, meter.As(LengthUnit.Angstrom), AngstromsTolerance);
            AssertEx.EqualTolerance(AstronomicalUnitsInOneMeter, meter.As(LengthUnit.AstronomicalUnit), AstronomicalUnitsTolerance);
            AssertEx.EqualTolerance(CentimetersInOneMeter, meter.As(LengthUnit.Centimeter), CentimetersTolerance);
            AssertEx.EqualTolerance(ChainsInOneMeter, meter.As(LengthUnit.Chain), ChainsTolerance);
            AssertEx.EqualTolerance(DecametersInOneMeter, meter.As(LengthUnit.Decameter), DecametersTolerance);
            AssertEx.EqualTolerance(DecimetersInOneMeter, meter.As(LengthUnit.Decimeter), DecimetersTolerance);
            AssertEx.EqualTolerance(DtpPicasInOneMeter, meter.As(LengthUnit.DtpPica), DtpPicasTolerance);
            AssertEx.EqualTolerance(DtpPointsInOneMeter, meter.As(LengthUnit.DtpPoint), DtpPointsTolerance);
            AssertEx.EqualTolerance(FathomsInOneMeter, meter.As(LengthUnit.Fathom), FathomsTolerance);
            AssertEx.EqualTolerance(FeetInOneMeter, meter.As(LengthUnit.Foot), FeetTolerance);
            AssertEx.EqualTolerance(HandsInOneMeter, meter.As(LengthUnit.Hand), HandsTolerance);
            AssertEx.EqualTolerance(HectometersInOneMeter, meter.As(LengthUnit.Hectometer), HectometersTolerance);
            AssertEx.EqualTolerance(InchesInOneMeter, meter.As(LengthUnit.Inch), InchesTolerance);
            AssertEx.EqualTolerance(KilolightYearsInOneMeter, meter.As(LengthUnit.KilolightYear), KilolightYearsTolerance);
            AssertEx.EqualTolerance(KilometersInOneMeter, meter.As(LengthUnit.Kilometer), KilometersTolerance);
            AssertEx.EqualTolerance(KiloparsecsInOneMeter, meter.As(LengthUnit.Kiloparsec), KiloparsecsTolerance);
            AssertEx.EqualTolerance(LightYearsInOneMeter, meter.As(LengthUnit.LightYear), LightYearsTolerance);
            AssertEx.EqualTolerance(MegalightYearsInOneMeter, meter.As(LengthUnit.MegalightYear), MegalightYearsTolerance);
            AssertEx.EqualTolerance(MegaparsecsInOneMeter, meter.As(LengthUnit.Megaparsec), MegaparsecsTolerance);
            AssertEx.EqualTolerance(MetersInOneMeter, meter.As(LengthUnit.Meter), MetersTolerance);
            AssertEx.EqualTolerance(MicroinchesInOneMeter, meter.As(LengthUnit.Microinch), MicroinchesTolerance);
            AssertEx.EqualTolerance(MicrometersInOneMeter, meter.As(LengthUnit.Micrometer), MicrometersTolerance);
            AssertEx.EqualTolerance(MilsInOneMeter, meter.As(LengthUnit.Mil), MilsTolerance);
            AssertEx.EqualTolerance(MilesInOneMeter, meter.As(LengthUnit.Mile), MilesTolerance);
            AssertEx.EqualTolerance(MillimetersInOneMeter, meter.As(LengthUnit.Millimeter), MillimetersTolerance);
            AssertEx.EqualTolerance(NanometersInOneMeter, meter.As(LengthUnit.Nanometer), NanometersTolerance);
            AssertEx.EqualTolerance(NauticalMilesInOneMeter, meter.As(LengthUnit.NauticalMile), NauticalMilesTolerance);
            AssertEx.EqualTolerance(ParsecsInOneMeter, meter.As(LengthUnit.Parsec), ParsecsTolerance);
            AssertEx.EqualTolerance(PrinterPicasInOneMeter, meter.As(LengthUnit.PrinterPica), PrinterPicasTolerance);
            AssertEx.EqualTolerance(PrinterPointsInOneMeter, meter.As(LengthUnit.PrinterPoint), PrinterPointsTolerance);
            AssertEx.EqualTolerance(ShacklesInOneMeter, meter.As(LengthUnit.Shackle), ShacklesTolerance);
            AssertEx.EqualTolerance(SolarRadiusesInOneMeter, meter.As(LengthUnit.SolarRadius), SolarRadiusesTolerance);
            AssertEx.EqualTolerance(TwipsInOneMeter, meter.As(LengthUnit.Twip), TwipsTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetInOneMeter, meter.As(LengthUnit.UsSurveyFoot), UsSurveyFeetTolerance);
            AssertEx.EqualTolerance(YardsInOneMeter, meter.As(LengthUnit.Yard), YardsTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Length(value: 1, unit: Length.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (QuantityValue) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(LengthUnit unit)
        {
            var inBaseUnits = Length.From(1.0, Length.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(LengthUnit unit)
        {
            var quantity = Length.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(LengthUnit unit)
        {
            // See if there is a unit available that is not the base unit.
            var fromUnit = Length.Units.FirstOrDefault(u => u != Length.BaseUnit && u != LengthUnit.Undefined);

            // If there is only one unit for the quantity, we must use the base unit.
            if (fromUnit == LengthUnit.Undefined)
                fromUnit = Length.BaseUnit;

            var quantity = Length.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Length meter = Length.FromMeters(1);
            AssertEx.EqualTolerance(1, Length.FromAngstroms(meter.Angstroms).Meters, AngstromsTolerance);
            AssertEx.EqualTolerance(1, Length.FromAstronomicalUnits(meter.AstronomicalUnits).Meters, AstronomicalUnitsTolerance);
            AssertEx.EqualTolerance(1, Length.FromCentimeters(meter.Centimeters).Meters, CentimetersTolerance);
            AssertEx.EqualTolerance(1, Length.FromChains(meter.Chains).Meters, ChainsTolerance);
            AssertEx.EqualTolerance(1, Length.FromDecameters(meter.Decameters).Meters, DecametersTolerance);
            AssertEx.EqualTolerance(1, Length.FromDecimeters(meter.Decimeters).Meters, DecimetersTolerance);
            AssertEx.EqualTolerance(1, Length.FromDtpPicas(meter.DtpPicas).Meters, DtpPicasTolerance);
            AssertEx.EqualTolerance(1, Length.FromDtpPoints(meter.DtpPoints).Meters, DtpPointsTolerance);
            AssertEx.EqualTolerance(1, Length.FromFathoms(meter.Fathoms).Meters, FathomsTolerance);
            AssertEx.EqualTolerance(1, Length.FromFeet(meter.Feet).Meters, FeetTolerance);
            AssertEx.EqualTolerance(1, Length.FromHands(meter.Hands).Meters, HandsTolerance);
            AssertEx.EqualTolerance(1, Length.FromHectometers(meter.Hectometers).Meters, HectometersTolerance);
            AssertEx.EqualTolerance(1, Length.FromInches(meter.Inches).Meters, InchesTolerance);
            AssertEx.EqualTolerance(1, Length.FromKilolightYears(meter.KilolightYears).Meters, KilolightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.FromKilometers(meter.Kilometers).Meters, KilometersTolerance);
            AssertEx.EqualTolerance(1, Length.FromKiloparsecs(meter.Kiloparsecs).Meters, KiloparsecsTolerance);
            AssertEx.EqualTolerance(1, Length.FromLightYears(meter.LightYears).Meters, LightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.FromMegalightYears(meter.MegalightYears).Meters, MegalightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.FromMegaparsecs(meter.Megaparsecs).Meters, MegaparsecsTolerance);
            AssertEx.EqualTolerance(1, Length.FromMeters(meter.Meters).Meters, MetersTolerance);
            AssertEx.EqualTolerance(1, Length.FromMicroinches(meter.Microinches).Meters, MicroinchesTolerance);
            AssertEx.EqualTolerance(1, Length.FromMicrometers(meter.Micrometers).Meters, MicrometersTolerance);
            AssertEx.EqualTolerance(1, Length.FromMils(meter.Mils).Meters, MilsTolerance);
            AssertEx.EqualTolerance(1, Length.FromMiles(meter.Miles).Meters, MilesTolerance);
            AssertEx.EqualTolerance(1, Length.FromMillimeters(meter.Millimeters).Meters, MillimetersTolerance);
            AssertEx.EqualTolerance(1, Length.FromNanometers(meter.Nanometers).Meters, NanometersTolerance);
            AssertEx.EqualTolerance(1, Length.FromNauticalMiles(meter.NauticalMiles).Meters, NauticalMilesTolerance);
            AssertEx.EqualTolerance(1, Length.FromParsecs(meter.Parsecs).Meters, ParsecsTolerance);
            AssertEx.EqualTolerance(1, Length.FromPrinterPicas(meter.PrinterPicas).Meters, PrinterPicasTolerance);
            AssertEx.EqualTolerance(1, Length.FromPrinterPoints(meter.PrinterPoints).Meters, PrinterPointsTolerance);
            AssertEx.EqualTolerance(1, Length.FromShackles(meter.Shackles).Meters, ShacklesTolerance);
            AssertEx.EqualTolerance(1, Length.FromSolarRadiuses(meter.SolarRadiuses).Meters, SolarRadiusesTolerance);
            AssertEx.EqualTolerance(1, Length.FromTwips(meter.Twips).Meters, TwipsTolerance);
            AssertEx.EqualTolerance(1, Length.FromUsSurveyFeet(meter.UsSurveyFeet).Meters, UsSurveyFeetTolerance);
            AssertEx.EqualTolerance(1, Length.FromYards(meter.Yards).Meters, YardsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Length v = Length.FromMeters(1);
            AssertEx.EqualTolerance(-1, -v.Meters, MetersTolerance);
            AssertEx.EqualTolerance(2, (Length.FromMeters(3)-v).Meters, MetersTolerance);
            AssertEx.EqualTolerance(2, (v + v).Meters, MetersTolerance);
            AssertEx.EqualTolerance(10, (v*10).Meters, MetersTolerance);
            AssertEx.EqualTolerance(10, (10*v).Meters, MetersTolerance);
            AssertEx.EqualTolerance(2, (Length.FromMeters(10)/5).Meters, MetersTolerance);
            AssertEx.EqualTolerance(2, Length.FromMeters(10)/Length.FromMeters(5), MetersTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Length oneMeter = Length.FromMeters(1);
            Length twoMeters = Length.FromMeters(2);

            Assert.True(oneMeter < twoMeters);
            Assert.True(oneMeter <= twoMeters);
            Assert.True(twoMeters > oneMeter);
            Assert.True(twoMeters >= oneMeter);

            Assert.False(oneMeter > twoMeters);
            Assert.False(oneMeter >= twoMeters);
            Assert.False(twoMeters < oneMeter);
            Assert.False(twoMeters <= oneMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Length meter = Length.FromMeters(1);
            Assert.Equal(0, meter.CompareTo(meter));
            Assert.True(meter.CompareTo(Length.Zero) > 0);
            Assert.True(Length.Zero.CompareTo(meter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Length meter = Length.FromMeters(1);
            Assert.Throws<ArgumentException>(() => meter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Length meter = Length.FromMeters(1);
            Assert.Throws<ArgumentNullException>(() => meter.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Length.FromMeters(1);
            var b = Length.FromMeters(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = Length.FromMeters(1);
            var b = Length.FromMeters(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = Length.FromMeters(1);
            object b = Length.FromMeters(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Length.FromMeters(1);
            Assert.True(v.Equals(Length.FromMeters(1), MetersTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Length.Zero, MetersTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Length.FromMeters(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Length.FromMeters(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Length meter = Length.FromMeters(1);
            Assert.False(meter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Length meter = Length.FromMeters(1);
            Assert.False(meter.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(LengthUnit.Undefined, Length.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(LengthUnit)).Cast<LengthUnit>();
            foreach(var unit in units)
            {
                if (unit == LengthUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 Å", new Length(1, LengthUnit.Angstrom).ToString());
                Assert.Equal("1 au", new Length(1, LengthUnit.AstronomicalUnit).ToString());
                Assert.Equal("1 cm", new Length(1, LengthUnit.Centimeter).ToString());
                Assert.Equal("1 ch", new Length(1, LengthUnit.Chain).ToString());
                Assert.Equal("1 dam", new Length(1, LengthUnit.Decameter).ToString());
                Assert.Equal("1 dm", new Length(1, LengthUnit.Decimeter).ToString());
                Assert.Equal("1 pica", new Length(1, LengthUnit.DtpPica).ToString());
                Assert.Equal("1 pt", new Length(1, LengthUnit.DtpPoint).ToString());
                Assert.Equal("1 fathom", new Length(1, LengthUnit.Fathom).ToString());
                Assert.Equal("1 ft", new Length(1, LengthUnit.Foot).ToString());
                Assert.Equal("1 h", new Length(1, LengthUnit.Hand).ToString());
                Assert.Equal("1 hm", new Length(1, LengthUnit.Hectometer).ToString());
                Assert.Equal("1 in", new Length(1, LengthUnit.Inch).ToString());
                Assert.Equal("1 kly", new Length(1, LengthUnit.KilolightYear).ToString());
                Assert.Equal("1 km", new Length(1, LengthUnit.Kilometer).ToString());
                Assert.Equal("1 kpc", new Length(1, LengthUnit.Kiloparsec).ToString());
                Assert.Equal("1 ly", new Length(1, LengthUnit.LightYear).ToString());
                Assert.Equal("1 Mly", new Length(1, LengthUnit.MegalightYear).ToString());
                Assert.Equal("1 Mpc", new Length(1, LengthUnit.Megaparsec).ToString());
                Assert.Equal("1 m", new Length(1, LengthUnit.Meter).ToString());
                Assert.Equal("1 µin", new Length(1, LengthUnit.Microinch).ToString());
                Assert.Equal("1 µm", new Length(1, LengthUnit.Micrometer).ToString());
                Assert.Equal("1 mil", new Length(1, LengthUnit.Mil).ToString());
                Assert.Equal("1 mi", new Length(1, LengthUnit.Mile).ToString());
                Assert.Equal("1 mm", new Length(1, LengthUnit.Millimeter).ToString());
                Assert.Equal("1 nm", new Length(1, LengthUnit.Nanometer).ToString());
                Assert.Equal("1 NM", new Length(1, LengthUnit.NauticalMile).ToString());
                Assert.Equal("1 pc", new Length(1, LengthUnit.Parsec).ToString());
                Assert.Equal("1 pica", new Length(1, LengthUnit.PrinterPica).ToString());
                Assert.Equal("1 pt", new Length(1, LengthUnit.PrinterPoint).ToString());
                Assert.Equal("1 shackle", new Length(1, LengthUnit.Shackle).ToString());
                Assert.Equal("1 R⊙", new Length(1, LengthUnit.SolarRadius).ToString());
                Assert.Equal("1 twip", new Length(1, LengthUnit.Twip).ToString());
                Assert.Equal("1 ftUS", new Length(1, LengthUnit.UsSurveyFoot).ToString());
                Assert.Equal("1 yd", new Length(1, LengthUnit.Yard).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 Å", new Length(1, LengthUnit.Angstrom).ToString(swedishCulture));
            Assert.Equal("1 au", new Length(1, LengthUnit.AstronomicalUnit).ToString(swedishCulture));
            Assert.Equal("1 cm", new Length(1, LengthUnit.Centimeter).ToString(swedishCulture));
            Assert.Equal("1 ch", new Length(1, LengthUnit.Chain).ToString(swedishCulture));
            Assert.Equal("1 dam", new Length(1, LengthUnit.Decameter).ToString(swedishCulture));
            Assert.Equal("1 dm", new Length(1, LengthUnit.Decimeter).ToString(swedishCulture));
            Assert.Equal("1 pica", new Length(1, LengthUnit.DtpPica).ToString(swedishCulture));
            Assert.Equal("1 pt", new Length(1, LengthUnit.DtpPoint).ToString(swedishCulture));
            Assert.Equal("1 fathom", new Length(1, LengthUnit.Fathom).ToString(swedishCulture));
            Assert.Equal("1 ft", new Length(1, LengthUnit.Foot).ToString(swedishCulture));
            Assert.Equal("1 h", new Length(1, LengthUnit.Hand).ToString(swedishCulture));
            Assert.Equal("1 hm", new Length(1, LengthUnit.Hectometer).ToString(swedishCulture));
            Assert.Equal("1 in", new Length(1, LengthUnit.Inch).ToString(swedishCulture));
            Assert.Equal("1 kly", new Length(1, LengthUnit.KilolightYear).ToString(swedishCulture));
            Assert.Equal("1 km", new Length(1, LengthUnit.Kilometer).ToString(swedishCulture));
            Assert.Equal("1 kpc", new Length(1, LengthUnit.Kiloparsec).ToString(swedishCulture));
            Assert.Equal("1 ly", new Length(1, LengthUnit.LightYear).ToString(swedishCulture));
            Assert.Equal("1 Mly", new Length(1, LengthUnit.MegalightYear).ToString(swedishCulture));
            Assert.Equal("1 Mpc", new Length(1, LengthUnit.Megaparsec).ToString(swedishCulture));
            Assert.Equal("1 m", new Length(1, LengthUnit.Meter).ToString(swedishCulture));
            Assert.Equal("1 µin", new Length(1, LengthUnit.Microinch).ToString(swedishCulture));
            Assert.Equal("1 µm", new Length(1, LengthUnit.Micrometer).ToString(swedishCulture));
            Assert.Equal("1 mil", new Length(1, LengthUnit.Mil).ToString(swedishCulture));
            Assert.Equal("1 mi", new Length(1, LengthUnit.Mile).ToString(swedishCulture));
            Assert.Equal("1 mm", new Length(1, LengthUnit.Millimeter).ToString(swedishCulture));
            Assert.Equal("1 nm", new Length(1, LengthUnit.Nanometer).ToString(swedishCulture));
            Assert.Equal("1 NM", new Length(1, LengthUnit.NauticalMile).ToString(swedishCulture));
            Assert.Equal("1 pc", new Length(1, LengthUnit.Parsec).ToString(swedishCulture));
            Assert.Equal("1 pica", new Length(1, LengthUnit.PrinterPica).ToString(swedishCulture));
            Assert.Equal("1 pt", new Length(1, LengthUnit.PrinterPoint).ToString(swedishCulture));
            Assert.Equal("1 shackle", new Length(1, LengthUnit.Shackle).ToString(swedishCulture));
            Assert.Equal("1 R⊙", new Length(1, LengthUnit.SolarRadius).ToString(swedishCulture));
            Assert.Equal("1 twip", new Length(1, LengthUnit.Twip).ToString(swedishCulture));
            Assert.Equal("1 ftUS", new Length(1, LengthUnit.UsSurveyFoot).ToString(swedishCulture));
            Assert.Equal("1 yd", new Length(1, LengthUnit.Yard).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 m", new Length(0.123456, LengthUnit.Meter).ToString("s1"));
                Assert.Equal("0.12 m", new Length(0.123456, LengthUnit.Meter).ToString("s2"));
                Assert.Equal("0.123 m", new Length(0.123456, LengthUnit.Meter).ToString("s3"));
                Assert.Equal("0.1235 m", new Length(0.123456, LengthUnit.Meter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 m", new Length(0.123456, LengthUnit.Meter).ToString("s1", culture));
            Assert.Equal("0.12 m", new Length(0.123456, LengthUnit.Meter).ToString("s2", culture));
            Assert.Equal("0.123 m", new Length(0.123456, LengthUnit.Meter).ToString("s3", culture));
            Assert.Equal("0.1235 m", new Length(0.123456, LengthUnit.Meter).ToString("s4", culture));
        }

/*
        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }
*/

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
           Assert.Equal((byte)quantity.Value.Real, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((decimal)quantity.Value.Real, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((double)quantity.Value.Real, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((short)quantity.Value.Real, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((int)quantity.Value.Real, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((long)quantity.Value.Real, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((sbyte)quantity.Value.Real, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((float)quantity.Value.Real, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((ushort)quantity.Value.Real, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((uint)quantity.Value.Real, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((ulong)quantity.Value.Real, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Length)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(LengthUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal(Length.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal(Length.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal(new {Length.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Length.FromMeters(value);
            Assert.Equal(Length.FromMeters(-value), -quantity);
        }
    }
}
