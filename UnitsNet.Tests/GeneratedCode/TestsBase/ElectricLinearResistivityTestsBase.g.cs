//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ElectricLinearResistivity.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ElectricLinearResistivityTestsBase : QuantityTestsBase
    {
        protected abstract double KiloohmsPerCentimeterInOneOhmPerMeter { get; }
        protected abstract double KiloohmsPerFootInOneOhmPerMeter { get; }
        protected abstract double KiloohmsPerKilometerInOneOhmPerMeter { get; }
        protected abstract double KiloohmsPerMeterInOneOhmPerMeter { get; }
        protected abstract double KiloohmsPerMileInOneOhmPerMeter { get; }
        protected abstract double MegaohmsPerCentimeterInOneOhmPerMeter { get; }
        protected abstract double MegaohmsPerFootInOneOhmPerMeter { get; }
        protected abstract double MegaohmsPerKilometerInOneOhmPerMeter { get; }
        protected abstract double MegaohmsPerMeterInOneOhmPerMeter { get; }
        protected abstract double MegaohmsPerMileInOneOhmPerMeter { get; }
        protected abstract double MicroohmsPerCentimeterInOneOhmPerMeter { get; }
        protected abstract double MicroohmsPerFootInOneOhmPerMeter { get; }
        protected abstract double MicroohmsPerKilometerInOneOhmPerMeter { get; }
        protected abstract double MicroohmsPerMeterInOneOhmPerMeter { get; }
        protected abstract double MicroohmsPerMileInOneOhmPerMeter { get; }
        protected abstract double MilliohmsPerCentimeterInOneOhmPerMeter { get; }
        protected abstract double MilliohmsPerFootInOneOhmPerMeter { get; }
        protected abstract double MilliohmsPerKilometerInOneOhmPerMeter { get; }
        protected abstract double MilliohmsPerMeterInOneOhmPerMeter { get; }
        protected abstract double MilliohmsPerMileInOneOhmPerMeter { get; }
        protected abstract double NanoohmsPerCentimeterInOneOhmPerMeter { get; }
        protected abstract double NanoohmsPerFootInOneOhmPerMeter { get; }
        protected abstract double NanoohmsPerKilometerInOneOhmPerMeter { get; }
        protected abstract double NanoohmsPerMeterInOneOhmPerMeter { get; }
        protected abstract double NanoohmsPerMileInOneOhmPerMeter { get; }
        protected abstract double OhmsPerCentimeterInOneOhmPerMeter { get; }
        protected abstract double OhmsPerFootInOneOhmPerMeter { get; }
        protected abstract double OhmsPerKilometerInOneOhmPerMeter { get; }
        protected abstract double OhmsPerMeterInOneOhmPerMeter { get; }
        protected abstract double OhmsPerMileInOneOhmPerMeter { get; }
        protected abstract double PicoohmsPerCentimeterInOneOhmPerMeter { get; }
        protected abstract double PicoohmsPerFootInOneOhmPerMeter { get; }
        protected abstract double PicoohmsPerKilometerInOneOhmPerMeter { get; }
        protected abstract double PicoohmsPerMeterInOneOhmPerMeter { get; }
        protected abstract double PicoohmsPerMileInOneOhmPerMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KiloohmsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KiloohmsPerFootTolerance { get { return 1e-5; } }
        protected virtual double KiloohmsPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double KiloohmsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double KiloohmsPerMileTolerance { get { return 1e-5; } }
        protected virtual double MegaohmsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MegaohmsPerFootTolerance { get { return 1e-5; } }
        protected virtual double MegaohmsPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double MegaohmsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MegaohmsPerMileTolerance { get { return 1e-5; } }
        protected virtual double MicroohmsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MicroohmsPerFootTolerance { get { return 1e-5; } }
        protected virtual double MicroohmsPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double MicroohmsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MicroohmsPerMileTolerance { get { return 1e-5; } }
        protected virtual double MilliohmsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MilliohmsPerFootTolerance { get { return 1e-5; } }
        protected virtual double MilliohmsPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double MilliohmsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MilliohmsPerMileTolerance { get { return 1e-5; } }
        protected virtual double NanoohmsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double NanoohmsPerFootTolerance { get { return 1e-5; } }
        protected virtual double NanoohmsPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double NanoohmsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double NanoohmsPerMileTolerance { get { return 1e-5; } }
        protected virtual double OhmsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double OhmsPerFootTolerance { get { return 1e-5; } }
        protected virtual double OhmsPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double OhmsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double OhmsPerMileTolerance { get { return 1e-5; } }
        protected virtual double PicoohmsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double PicoohmsPerFootTolerance { get { return 1e-5; } }
        protected virtual double PicoohmsPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double PicoohmsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double PicoohmsPerMileTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(ElectricLinearResistivityUnit unit)
        {
            return unit switch
            {
                ElectricLinearResistivityUnit.KiloohmPerCentimeter => (KiloohmsPerCentimeterInOneOhmPerMeter, KiloohmsPerCentimeterTolerance),
                ElectricLinearResistivityUnit.KiloohmPerFoot => (KiloohmsPerFootInOneOhmPerMeter, KiloohmsPerFootTolerance),
                ElectricLinearResistivityUnit.KiloohmPerKilometer => (KiloohmsPerKilometerInOneOhmPerMeter, KiloohmsPerKilometerTolerance),
                ElectricLinearResistivityUnit.KiloohmPerMeter => (KiloohmsPerMeterInOneOhmPerMeter, KiloohmsPerMeterTolerance),
                ElectricLinearResistivityUnit.KiloohmPerMile => (KiloohmsPerMileInOneOhmPerMeter, KiloohmsPerMileTolerance),
                ElectricLinearResistivityUnit.MegaohmPerCentimeter => (MegaohmsPerCentimeterInOneOhmPerMeter, MegaohmsPerCentimeterTolerance),
                ElectricLinearResistivityUnit.MegaohmPerFoot => (MegaohmsPerFootInOneOhmPerMeter, MegaohmsPerFootTolerance),
                ElectricLinearResistivityUnit.MegaohmPerKilometer => (MegaohmsPerKilometerInOneOhmPerMeter, MegaohmsPerKilometerTolerance),
                ElectricLinearResistivityUnit.MegaohmPerMeter => (MegaohmsPerMeterInOneOhmPerMeter, MegaohmsPerMeterTolerance),
                ElectricLinearResistivityUnit.MegaohmPerMile => (MegaohmsPerMileInOneOhmPerMeter, MegaohmsPerMileTolerance),
                ElectricLinearResistivityUnit.MicroohmPerCentimeter => (MicroohmsPerCentimeterInOneOhmPerMeter, MicroohmsPerCentimeterTolerance),
                ElectricLinearResistivityUnit.MicroohmPerFoot => (MicroohmsPerFootInOneOhmPerMeter, MicroohmsPerFootTolerance),
                ElectricLinearResistivityUnit.MicroohmPerKilometer => (MicroohmsPerKilometerInOneOhmPerMeter, MicroohmsPerKilometerTolerance),
                ElectricLinearResistivityUnit.MicroohmPerMeter => (MicroohmsPerMeterInOneOhmPerMeter, MicroohmsPerMeterTolerance),
                ElectricLinearResistivityUnit.MicroohmPerMile => (MicroohmsPerMileInOneOhmPerMeter, MicroohmsPerMileTolerance),
                ElectricLinearResistivityUnit.MilliohmPerCentimeter => (MilliohmsPerCentimeterInOneOhmPerMeter, MilliohmsPerCentimeterTolerance),
                ElectricLinearResistivityUnit.MilliohmPerFoot => (MilliohmsPerFootInOneOhmPerMeter, MilliohmsPerFootTolerance),
                ElectricLinearResistivityUnit.MilliohmPerKilometer => (MilliohmsPerKilometerInOneOhmPerMeter, MilliohmsPerKilometerTolerance),
                ElectricLinearResistivityUnit.MilliohmPerMeter => (MilliohmsPerMeterInOneOhmPerMeter, MilliohmsPerMeterTolerance),
                ElectricLinearResistivityUnit.MilliohmPerMile => (MilliohmsPerMileInOneOhmPerMeter, MilliohmsPerMileTolerance),
                ElectricLinearResistivityUnit.NanoohmPerCentimeter => (NanoohmsPerCentimeterInOneOhmPerMeter, NanoohmsPerCentimeterTolerance),
                ElectricLinearResistivityUnit.NanoohmPerFoot => (NanoohmsPerFootInOneOhmPerMeter, NanoohmsPerFootTolerance),
                ElectricLinearResistivityUnit.NanoohmPerKilometer => (NanoohmsPerKilometerInOneOhmPerMeter, NanoohmsPerKilometerTolerance),
                ElectricLinearResistivityUnit.NanoohmPerMeter => (NanoohmsPerMeterInOneOhmPerMeter, NanoohmsPerMeterTolerance),
                ElectricLinearResistivityUnit.NanoohmPerMile => (NanoohmsPerMileInOneOhmPerMeter, NanoohmsPerMileTolerance),
                ElectricLinearResistivityUnit.OhmPerCentimeter => (OhmsPerCentimeterInOneOhmPerMeter, OhmsPerCentimeterTolerance),
                ElectricLinearResistivityUnit.OhmPerFoot => (OhmsPerFootInOneOhmPerMeter, OhmsPerFootTolerance),
                ElectricLinearResistivityUnit.OhmPerKilometer => (OhmsPerKilometerInOneOhmPerMeter, OhmsPerKilometerTolerance),
                ElectricLinearResistivityUnit.OhmPerMeter => (OhmsPerMeterInOneOhmPerMeter, OhmsPerMeterTolerance),
                ElectricLinearResistivityUnit.OhmPerMile => (OhmsPerMileInOneOhmPerMeter, OhmsPerMileTolerance),
                ElectricLinearResistivityUnit.PicoohmPerCentimeter => (PicoohmsPerCentimeterInOneOhmPerMeter, PicoohmsPerCentimeterTolerance),
                ElectricLinearResistivityUnit.PicoohmPerFoot => (PicoohmsPerFootInOneOhmPerMeter, PicoohmsPerFootTolerance),
                ElectricLinearResistivityUnit.PicoohmPerKilometer => (PicoohmsPerKilometerInOneOhmPerMeter, PicoohmsPerKilometerTolerance),
                ElectricLinearResistivityUnit.PicoohmPerMeter => (PicoohmsPerMeterInOneOhmPerMeter, PicoohmsPerMeterTolerance),
                ElectricLinearResistivityUnit.PicoohmPerMile => (PicoohmsPerMileInOneOhmPerMeter, PicoohmsPerMileTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { ElectricLinearResistivityUnit.KiloohmPerCentimeter },
            new object[] { ElectricLinearResistivityUnit.KiloohmPerFoot },
            new object[] { ElectricLinearResistivityUnit.KiloohmPerKilometer },
            new object[] { ElectricLinearResistivityUnit.KiloohmPerMeter },
            new object[] { ElectricLinearResistivityUnit.KiloohmPerMile },
            new object[] { ElectricLinearResistivityUnit.MegaohmPerCentimeter },
            new object[] { ElectricLinearResistivityUnit.MegaohmPerFoot },
            new object[] { ElectricLinearResistivityUnit.MegaohmPerKilometer },
            new object[] { ElectricLinearResistivityUnit.MegaohmPerMeter },
            new object[] { ElectricLinearResistivityUnit.MegaohmPerMile },
            new object[] { ElectricLinearResistivityUnit.MicroohmPerCentimeter },
            new object[] { ElectricLinearResistivityUnit.MicroohmPerFoot },
            new object[] { ElectricLinearResistivityUnit.MicroohmPerKilometer },
            new object[] { ElectricLinearResistivityUnit.MicroohmPerMeter },
            new object[] { ElectricLinearResistivityUnit.MicroohmPerMile },
            new object[] { ElectricLinearResistivityUnit.MilliohmPerCentimeter },
            new object[] { ElectricLinearResistivityUnit.MilliohmPerFoot },
            new object[] { ElectricLinearResistivityUnit.MilliohmPerKilometer },
            new object[] { ElectricLinearResistivityUnit.MilliohmPerMeter },
            new object[] { ElectricLinearResistivityUnit.MilliohmPerMile },
            new object[] { ElectricLinearResistivityUnit.NanoohmPerCentimeter },
            new object[] { ElectricLinearResistivityUnit.NanoohmPerFoot },
            new object[] { ElectricLinearResistivityUnit.NanoohmPerKilometer },
            new object[] { ElectricLinearResistivityUnit.NanoohmPerMeter },
            new object[] { ElectricLinearResistivityUnit.NanoohmPerMile },
            new object[] { ElectricLinearResistivityUnit.OhmPerCentimeter },
            new object[] { ElectricLinearResistivityUnit.OhmPerFoot },
            new object[] { ElectricLinearResistivityUnit.OhmPerKilometer },
            new object[] { ElectricLinearResistivityUnit.OhmPerMeter },
            new object[] { ElectricLinearResistivityUnit.OhmPerMile },
            new object[] { ElectricLinearResistivityUnit.PicoohmPerCentimeter },
            new object[] { ElectricLinearResistivityUnit.PicoohmPerFoot },
            new object[] { ElectricLinearResistivityUnit.PicoohmPerKilometer },
            new object[] { ElectricLinearResistivityUnit.PicoohmPerMeter },
            new object[] { ElectricLinearResistivityUnit.PicoohmPerMile },
        };

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ElectricLinearResistivity((QuantityValue)0.0, ElectricLinearResistivityUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new ElectricLinearResistivity();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ElectricLinearResistivityUnit.OhmPerMeter, quantity.Unit);
        }


        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new ElectricLinearResistivity(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new ElectricLinearResistivity(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (ElectricLinearResistivity) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void ElectricLinearResistivity_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.OhmPerMeter);

            QuantityInfo<ElectricLinearResistivityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(ElectricLinearResistivity.Zero, quantityInfo.Zero);
            Assert.Equal("ElectricLinearResistivity", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<ElectricLinearResistivityUnit>().Except(new[] {ElectricLinearResistivityUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

        }

        [Fact]
        public void OhmPerMeterToElectricLinearResistivityUnits()
        {
            ElectricLinearResistivity ohmpermeter = ElectricLinearResistivity.FromOhmsPerMeter(1);
            AssertEx.EqualTolerance(KiloohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.KiloohmsPerCentimeter, KiloohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(KiloohmsPerFootInOneOhmPerMeter, ohmpermeter.KiloohmsPerFoot, KiloohmsPerFootTolerance);
            AssertEx.EqualTolerance(KiloohmsPerKilometerInOneOhmPerMeter, ohmpermeter.KiloohmsPerKilometer, KiloohmsPerKilometerTolerance);
            AssertEx.EqualTolerance(KiloohmsPerMeterInOneOhmPerMeter, ohmpermeter.KiloohmsPerMeter, KiloohmsPerMeterTolerance);
            AssertEx.EqualTolerance(KiloohmsPerMileInOneOhmPerMeter, ohmpermeter.KiloohmsPerMile, KiloohmsPerMileTolerance);
            AssertEx.EqualTolerance(MegaohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.MegaohmsPerCentimeter, MegaohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MegaohmsPerFootInOneOhmPerMeter, ohmpermeter.MegaohmsPerFoot, MegaohmsPerFootTolerance);
            AssertEx.EqualTolerance(MegaohmsPerKilometerInOneOhmPerMeter, ohmpermeter.MegaohmsPerKilometer, MegaohmsPerKilometerTolerance);
            AssertEx.EqualTolerance(MegaohmsPerMeterInOneOhmPerMeter, ohmpermeter.MegaohmsPerMeter, MegaohmsPerMeterTolerance);
            AssertEx.EqualTolerance(MegaohmsPerMileInOneOhmPerMeter, ohmpermeter.MegaohmsPerMile, MegaohmsPerMileTolerance);
            AssertEx.EqualTolerance(MicroohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.MicroohmsPerCentimeter, MicroohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MicroohmsPerFootInOneOhmPerMeter, ohmpermeter.MicroohmsPerFoot, MicroohmsPerFootTolerance);
            AssertEx.EqualTolerance(MicroohmsPerKilometerInOneOhmPerMeter, ohmpermeter.MicroohmsPerKilometer, MicroohmsPerKilometerTolerance);
            AssertEx.EqualTolerance(MicroohmsPerMeterInOneOhmPerMeter, ohmpermeter.MicroohmsPerMeter, MicroohmsPerMeterTolerance);
            AssertEx.EqualTolerance(MicroohmsPerMileInOneOhmPerMeter, ohmpermeter.MicroohmsPerMile, MicroohmsPerMileTolerance);
            AssertEx.EqualTolerance(MilliohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.MilliohmsPerCentimeter, MilliohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MilliohmsPerFootInOneOhmPerMeter, ohmpermeter.MilliohmsPerFoot, MilliohmsPerFootTolerance);
            AssertEx.EqualTolerance(MilliohmsPerKilometerInOneOhmPerMeter, ohmpermeter.MilliohmsPerKilometer, MilliohmsPerKilometerTolerance);
            AssertEx.EqualTolerance(MilliohmsPerMeterInOneOhmPerMeter, ohmpermeter.MilliohmsPerMeter, MilliohmsPerMeterTolerance);
            AssertEx.EqualTolerance(MilliohmsPerMileInOneOhmPerMeter, ohmpermeter.MilliohmsPerMile, MilliohmsPerMileTolerance);
            AssertEx.EqualTolerance(NanoohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.NanoohmsPerCentimeter, NanoohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(NanoohmsPerFootInOneOhmPerMeter, ohmpermeter.NanoohmsPerFoot, NanoohmsPerFootTolerance);
            AssertEx.EqualTolerance(NanoohmsPerKilometerInOneOhmPerMeter, ohmpermeter.NanoohmsPerKilometer, NanoohmsPerKilometerTolerance);
            AssertEx.EqualTolerance(NanoohmsPerMeterInOneOhmPerMeter, ohmpermeter.NanoohmsPerMeter, NanoohmsPerMeterTolerance);
            AssertEx.EqualTolerance(NanoohmsPerMileInOneOhmPerMeter, ohmpermeter.NanoohmsPerMile, NanoohmsPerMileTolerance);
            AssertEx.EqualTolerance(OhmsPerCentimeterInOneOhmPerMeter, ohmpermeter.OhmsPerCentimeter, OhmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(OhmsPerFootInOneOhmPerMeter, ohmpermeter.OhmsPerFoot, OhmsPerFootTolerance);
            AssertEx.EqualTolerance(OhmsPerKilometerInOneOhmPerMeter, ohmpermeter.OhmsPerKilometer, OhmsPerKilometerTolerance);
            AssertEx.EqualTolerance(OhmsPerMeterInOneOhmPerMeter, ohmpermeter.OhmsPerMeter, OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(OhmsPerMileInOneOhmPerMeter, ohmpermeter.OhmsPerMile, OhmsPerMileTolerance);
            AssertEx.EqualTolerance(PicoohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.PicoohmsPerCentimeter, PicoohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(PicoohmsPerFootInOneOhmPerMeter, ohmpermeter.PicoohmsPerFoot, PicoohmsPerFootTolerance);
            AssertEx.EqualTolerance(PicoohmsPerKilometerInOneOhmPerMeter, ohmpermeter.PicoohmsPerKilometer, PicoohmsPerKilometerTolerance);
            AssertEx.EqualTolerance(PicoohmsPerMeterInOneOhmPerMeter, ohmpermeter.PicoohmsPerMeter, PicoohmsPerMeterTolerance);
            AssertEx.EqualTolerance(PicoohmsPerMileInOneOhmPerMeter, ohmpermeter.PicoohmsPerMile, PicoohmsPerMileTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.KiloohmPerCentimeter);
            AssertEx.EqualTolerance(1, quantity00.KiloohmsPerCentimeter, KiloohmsPerCentimeterTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.KiloohmPerCentimeter, quantity00.Unit);

            var quantity01 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.KiloohmPerFoot);
            AssertEx.EqualTolerance(1, quantity01.KiloohmsPerFoot, KiloohmsPerFootTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.KiloohmPerFoot, quantity01.Unit);

            var quantity02 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.KiloohmPerKilometer);
            AssertEx.EqualTolerance(1, quantity02.KiloohmsPerKilometer, KiloohmsPerKilometerTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.KiloohmPerKilometer, quantity02.Unit);

            var quantity03 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.KiloohmPerMeter);
            AssertEx.EqualTolerance(1, quantity03.KiloohmsPerMeter, KiloohmsPerMeterTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.KiloohmPerMeter, quantity03.Unit);

            var quantity04 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.KiloohmPerMile);
            AssertEx.EqualTolerance(1, quantity04.KiloohmsPerMile, KiloohmsPerMileTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.KiloohmPerMile, quantity04.Unit);

            var quantity05 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.MegaohmPerCentimeter);
            AssertEx.EqualTolerance(1, quantity05.MegaohmsPerCentimeter, MegaohmsPerCentimeterTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.MegaohmPerCentimeter, quantity05.Unit);

            var quantity06 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.MegaohmPerFoot);
            AssertEx.EqualTolerance(1, quantity06.MegaohmsPerFoot, MegaohmsPerFootTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.MegaohmPerFoot, quantity06.Unit);

            var quantity07 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.MegaohmPerKilometer);
            AssertEx.EqualTolerance(1, quantity07.MegaohmsPerKilometer, MegaohmsPerKilometerTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.MegaohmPerKilometer, quantity07.Unit);

            var quantity08 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.MegaohmPerMeter);
            AssertEx.EqualTolerance(1, quantity08.MegaohmsPerMeter, MegaohmsPerMeterTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.MegaohmPerMeter, quantity08.Unit);

            var quantity09 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.MegaohmPerMile);
            AssertEx.EqualTolerance(1, quantity09.MegaohmsPerMile, MegaohmsPerMileTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.MegaohmPerMile, quantity09.Unit);

            var quantity10 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.MicroohmPerCentimeter);
            AssertEx.EqualTolerance(1, quantity10.MicroohmsPerCentimeter, MicroohmsPerCentimeterTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.MicroohmPerCentimeter, quantity10.Unit);

            var quantity11 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.MicroohmPerFoot);
            AssertEx.EqualTolerance(1, quantity11.MicroohmsPerFoot, MicroohmsPerFootTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.MicroohmPerFoot, quantity11.Unit);

            var quantity12 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.MicroohmPerKilometer);
            AssertEx.EqualTolerance(1, quantity12.MicroohmsPerKilometer, MicroohmsPerKilometerTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.MicroohmPerKilometer, quantity12.Unit);

            var quantity13 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.MicroohmPerMeter);
            AssertEx.EqualTolerance(1, quantity13.MicroohmsPerMeter, MicroohmsPerMeterTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.MicroohmPerMeter, quantity13.Unit);

            var quantity14 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.MicroohmPerMile);
            AssertEx.EqualTolerance(1, quantity14.MicroohmsPerMile, MicroohmsPerMileTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.MicroohmPerMile, quantity14.Unit);

            var quantity15 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.MilliohmPerCentimeter);
            AssertEx.EqualTolerance(1, quantity15.MilliohmsPerCentimeter, MilliohmsPerCentimeterTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.MilliohmPerCentimeter, quantity15.Unit);

            var quantity16 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.MilliohmPerFoot);
            AssertEx.EqualTolerance(1, quantity16.MilliohmsPerFoot, MilliohmsPerFootTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.MilliohmPerFoot, quantity16.Unit);

            var quantity17 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.MilliohmPerKilometer);
            AssertEx.EqualTolerance(1, quantity17.MilliohmsPerKilometer, MilliohmsPerKilometerTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.MilliohmPerKilometer, quantity17.Unit);

            var quantity18 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.MilliohmPerMeter);
            AssertEx.EqualTolerance(1, quantity18.MilliohmsPerMeter, MilliohmsPerMeterTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.MilliohmPerMeter, quantity18.Unit);

            var quantity19 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.MilliohmPerMile);
            AssertEx.EqualTolerance(1, quantity19.MilliohmsPerMile, MilliohmsPerMileTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.MilliohmPerMile, quantity19.Unit);

            var quantity20 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.NanoohmPerCentimeter);
            AssertEx.EqualTolerance(1, quantity20.NanoohmsPerCentimeter, NanoohmsPerCentimeterTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.NanoohmPerCentimeter, quantity20.Unit);

            var quantity21 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.NanoohmPerFoot);
            AssertEx.EqualTolerance(1, quantity21.NanoohmsPerFoot, NanoohmsPerFootTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.NanoohmPerFoot, quantity21.Unit);

            var quantity22 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.NanoohmPerKilometer);
            AssertEx.EqualTolerance(1, quantity22.NanoohmsPerKilometer, NanoohmsPerKilometerTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.NanoohmPerKilometer, quantity22.Unit);

            var quantity23 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.NanoohmPerMeter);
            AssertEx.EqualTolerance(1, quantity23.NanoohmsPerMeter, NanoohmsPerMeterTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.NanoohmPerMeter, quantity23.Unit);

            var quantity24 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.NanoohmPerMile);
            AssertEx.EqualTolerance(1, quantity24.NanoohmsPerMile, NanoohmsPerMileTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.NanoohmPerMile, quantity24.Unit);

            var quantity25 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.OhmPerCentimeter);
            AssertEx.EqualTolerance(1, quantity25.OhmsPerCentimeter, OhmsPerCentimeterTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.OhmPerCentimeter, quantity25.Unit);

            var quantity26 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.OhmPerFoot);
            AssertEx.EqualTolerance(1, quantity26.OhmsPerFoot, OhmsPerFootTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.OhmPerFoot, quantity26.Unit);

            var quantity27 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.OhmPerKilometer);
            AssertEx.EqualTolerance(1, quantity27.OhmsPerKilometer, OhmsPerKilometerTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.OhmPerKilometer, quantity27.Unit);

            var quantity28 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.OhmPerMeter);
            AssertEx.EqualTolerance(1, quantity28.OhmsPerMeter, OhmsPerMeterTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.OhmPerMeter, quantity28.Unit);

            var quantity29 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.OhmPerMile);
            AssertEx.EqualTolerance(1, quantity29.OhmsPerMile, OhmsPerMileTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.OhmPerMile, quantity29.Unit);

            var quantity30 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.PicoohmPerCentimeter);
            AssertEx.EqualTolerance(1, quantity30.PicoohmsPerCentimeter, PicoohmsPerCentimeterTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.PicoohmPerCentimeter, quantity30.Unit);

            var quantity31 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.PicoohmPerFoot);
            AssertEx.EqualTolerance(1, quantity31.PicoohmsPerFoot, PicoohmsPerFootTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.PicoohmPerFoot, quantity31.Unit);

            var quantity32 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.PicoohmPerKilometer);
            AssertEx.EqualTolerance(1, quantity32.PicoohmsPerKilometer, PicoohmsPerKilometerTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.PicoohmPerKilometer, quantity32.Unit);

            var quantity33 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.PicoohmPerMeter);
            AssertEx.EqualTolerance(1, quantity33.PicoohmsPerMeter, PicoohmsPerMeterTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.PicoohmPerMeter, quantity33.Unit);

            var quantity34 = ElectricLinearResistivity.From(1, ElectricLinearResistivityUnit.PicoohmPerMile);
            AssertEx.EqualTolerance(1, quantity34.PicoohmsPerMile, PicoohmsPerMileTolerance);
            Assert.Equal(ElectricLinearResistivityUnit.PicoohmPerMile, quantity34.Unit);

        }

        [Fact]
        public void As()
        {
            var ohmpermeter = ElectricLinearResistivity.FromOhmsPerMeter(1);
            AssertEx.EqualTolerance(KiloohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.KiloohmPerCentimeter), KiloohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(KiloohmsPerFootInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.KiloohmPerFoot), KiloohmsPerFootTolerance);
            AssertEx.EqualTolerance(KiloohmsPerKilometerInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.KiloohmPerKilometer), KiloohmsPerKilometerTolerance);
            AssertEx.EqualTolerance(KiloohmsPerMeterInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.KiloohmPerMeter), KiloohmsPerMeterTolerance);
            AssertEx.EqualTolerance(KiloohmsPerMileInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.KiloohmPerMile), KiloohmsPerMileTolerance);
            AssertEx.EqualTolerance(MegaohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.MegaohmPerCentimeter), MegaohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MegaohmsPerFootInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.MegaohmPerFoot), MegaohmsPerFootTolerance);
            AssertEx.EqualTolerance(MegaohmsPerKilometerInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.MegaohmPerKilometer), MegaohmsPerKilometerTolerance);
            AssertEx.EqualTolerance(MegaohmsPerMeterInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.MegaohmPerMeter), MegaohmsPerMeterTolerance);
            AssertEx.EqualTolerance(MegaohmsPerMileInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.MegaohmPerMile), MegaohmsPerMileTolerance);
            AssertEx.EqualTolerance(MicroohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.MicroohmPerCentimeter), MicroohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MicroohmsPerFootInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.MicroohmPerFoot), MicroohmsPerFootTolerance);
            AssertEx.EqualTolerance(MicroohmsPerKilometerInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.MicroohmPerKilometer), MicroohmsPerKilometerTolerance);
            AssertEx.EqualTolerance(MicroohmsPerMeterInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.MicroohmPerMeter), MicroohmsPerMeterTolerance);
            AssertEx.EqualTolerance(MicroohmsPerMileInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.MicroohmPerMile), MicroohmsPerMileTolerance);
            AssertEx.EqualTolerance(MilliohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.MilliohmPerCentimeter), MilliohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MilliohmsPerFootInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.MilliohmPerFoot), MilliohmsPerFootTolerance);
            AssertEx.EqualTolerance(MilliohmsPerKilometerInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.MilliohmPerKilometer), MilliohmsPerKilometerTolerance);
            AssertEx.EqualTolerance(MilliohmsPerMeterInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.MilliohmPerMeter), MilliohmsPerMeterTolerance);
            AssertEx.EqualTolerance(MilliohmsPerMileInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.MilliohmPerMile), MilliohmsPerMileTolerance);
            AssertEx.EqualTolerance(NanoohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.NanoohmPerCentimeter), NanoohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(NanoohmsPerFootInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.NanoohmPerFoot), NanoohmsPerFootTolerance);
            AssertEx.EqualTolerance(NanoohmsPerKilometerInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.NanoohmPerKilometer), NanoohmsPerKilometerTolerance);
            AssertEx.EqualTolerance(NanoohmsPerMeterInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.NanoohmPerMeter), NanoohmsPerMeterTolerance);
            AssertEx.EqualTolerance(NanoohmsPerMileInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.NanoohmPerMile), NanoohmsPerMileTolerance);
            AssertEx.EqualTolerance(OhmsPerCentimeterInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.OhmPerCentimeter), OhmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(OhmsPerFootInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.OhmPerFoot), OhmsPerFootTolerance);
            AssertEx.EqualTolerance(OhmsPerKilometerInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.OhmPerKilometer), OhmsPerKilometerTolerance);
            AssertEx.EqualTolerance(OhmsPerMeterInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.OhmPerMeter), OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(OhmsPerMileInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.OhmPerMile), OhmsPerMileTolerance);
            AssertEx.EqualTolerance(PicoohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.PicoohmPerCentimeter), PicoohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(PicoohmsPerFootInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.PicoohmPerFoot), PicoohmsPerFootTolerance);
            AssertEx.EqualTolerance(PicoohmsPerKilometerInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.PicoohmPerKilometer), PicoohmsPerKilometerTolerance);
            AssertEx.EqualTolerance(PicoohmsPerMeterInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.PicoohmPerMeter), PicoohmsPerMeterTolerance);
            AssertEx.EqualTolerance(PicoohmsPerMileInOneOhmPerMeter, ohmpermeter.As(ElectricLinearResistivityUnit.PicoohmPerMile), PicoohmsPerMileTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new ElectricLinearResistivity(value: 1, unit: ElectricLinearResistivity.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (QuantityValue) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(ElectricLinearResistivityUnit unit)
        {
            var inBaseUnits = ElectricLinearResistivity.From(1.0, ElectricLinearResistivity.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(ElectricLinearResistivityUnit unit)
        {
            var quantity = ElectricLinearResistivity.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(ElectricLinearResistivityUnit unit)
        {
            // See if there is a unit available that is not the base unit.
            var fromUnit = ElectricLinearResistivity.Units.FirstOrDefault(u => u != ElectricLinearResistivity.BaseUnit && u != ElectricLinearResistivityUnit.Undefined);

            // If there is only one unit for the quantity, we must use the base unit.
            if (fromUnit == ElectricLinearResistivityUnit.Undefined)
                fromUnit = ElectricLinearResistivity.BaseUnit;

            var quantity = ElectricLinearResistivity.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ElectricLinearResistivity ohmpermeter = ElectricLinearResistivity.FromOhmsPerMeter(1);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromKiloohmsPerCentimeter(ohmpermeter.KiloohmsPerCentimeter).OhmsPerMeter, KiloohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromKiloohmsPerFoot(ohmpermeter.KiloohmsPerFoot).OhmsPerMeter, KiloohmsPerFootTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromKiloohmsPerKilometer(ohmpermeter.KiloohmsPerKilometer).OhmsPerMeter, KiloohmsPerKilometerTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromKiloohmsPerMeter(ohmpermeter.KiloohmsPerMeter).OhmsPerMeter, KiloohmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromKiloohmsPerMile(ohmpermeter.KiloohmsPerMile).OhmsPerMeter, KiloohmsPerMileTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromMegaohmsPerCentimeter(ohmpermeter.MegaohmsPerCentimeter).OhmsPerMeter, MegaohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromMegaohmsPerFoot(ohmpermeter.MegaohmsPerFoot).OhmsPerMeter, MegaohmsPerFootTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromMegaohmsPerKilometer(ohmpermeter.MegaohmsPerKilometer).OhmsPerMeter, MegaohmsPerKilometerTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromMegaohmsPerMeter(ohmpermeter.MegaohmsPerMeter).OhmsPerMeter, MegaohmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromMegaohmsPerMile(ohmpermeter.MegaohmsPerMile).OhmsPerMeter, MegaohmsPerMileTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromMicroohmsPerCentimeter(ohmpermeter.MicroohmsPerCentimeter).OhmsPerMeter, MicroohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromMicroohmsPerFoot(ohmpermeter.MicroohmsPerFoot).OhmsPerMeter, MicroohmsPerFootTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromMicroohmsPerKilometer(ohmpermeter.MicroohmsPerKilometer).OhmsPerMeter, MicroohmsPerKilometerTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromMicroohmsPerMeter(ohmpermeter.MicroohmsPerMeter).OhmsPerMeter, MicroohmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromMicroohmsPerMile(ohmpermeter.MicroohmsPerMile).OhmsPerMeter, MicroohmsPerMileTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromMilliohmsPerCentimeter(ohmpermeter.MilliohmsPerCentimeter).OhmsPerMeter, MilliohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromMilliohmsPerFoot(ohmpermeter.MilliohmsPerFoot).OhmsPerMeter, MilliohmsPerFootTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromMilliohmsPerKilometer(ohmpermeter.MilliohmsPerKilometer).OhmsPerMeter, MilliohmsPerKilometerTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromMilliohmsPerMeter(ohmpermeter.MilliohmsPerMeter).OhmsPerMeter, MilliohmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromMilliohmsPerMile(ohmpermeter.MilliohmsPerMile).OhmsPerMeter, MilliohmsPerMileTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromNanoohmsPerCentimeter(ohmpermeter.NanoohmsPerCentimeter).OhmsPerMeter, NanoohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromNanoohmsPerFoot(ohmpermeter.NanoohmsPerFoot).OhmsPerMeter, NanoohmsPerFootTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromNanoohmsPerKilometer(ohmpermeter.NanoohmsPerKilometer).OhmsPerMeter, NanoohmsPerKilometerTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromNanoohmsPerMeter(ohmpermeter.NanoohmsPerMeter).OhmsPerMeter, NanoohmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromNanoohmsPerMile(ohmpermeter.NanoohmsPerMile).OhmsPerMeter, NanoohmsPerMileTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromOhmsPerCentimeter(ohmpermeter.OhmsPerCentimeter).OhmsPerMeter, OhmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromOhmsPerFoot(ohmpermeter.OhmsPerFoot).OhmsPerMeter, OhmsPerFootTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromOhmsPerKilometer(ohmpermeter.OhmsPerKilometer).OhmsPerMeter, OhmsPerKilometerTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromOhmsPerMeter(ohmpermeter.OhmsPerMeter).OhmsPerMeter, OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromOhmsPerMile(ohmpermeter.OhmsPerMile).OhmsPerMeter, OhmsPerMileTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromPicoohmsPerCentimeter(ohmpermeter.PicoohmsPerCentimeter).OhmsPerMeter, PicoohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromPicoohmsPerFoot(ohmpermeter.PicoohmsPerFoot).OhmsPerMeter, PicoohmsPerFootTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromPicoohmsPerKilometer(ohmpermeter.PicoohmsPerKilometer).OhmsPerMeter, PicoohmsPerKilometerTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromPicoohmsPerMeter(ohmpermeter.PicoohmsPerMeter).OhmsPerMeter, PicoohmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricLinearResistivity.FromPicoohmsPerMile(ohmpermeter.PicoohmsPerMile).OhmsPerMeter, PicoohmsPerMileTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ElectricLinearResistivity v = ElectricLinearResistivity.FromOhmsPerMeter(1);
            AssertEx.EqualTolerance(-1, -v.OhmsPerMeter, OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(2, (ElectricLinearResistivity.FromOhmsPerMeter(3)-v).OhmsPerMeter, OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).OhmsPerMeter, OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).OhmsPerMeter, OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).OhmsPerMeter, OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(2, (ElectricLinearResistivity.FromOhmsPerMeter(10)/5).OhmsPerMeter, OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(2, ElectricLinearResistivity.FromOhmsPerMeter(10)/ElectricLinearResistivity.FromOhmsPerMeter(5), OhmsPerMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ElectricLinearResistivity oneOhmPerMeter = ElectricLinearResistivity.FromOhmsPerMeter(1);
            ElectricLinearResistivity twoOhmsPerMeter = ElectricLinearResistivity.FromOhmsPerMeter(2);

            Assert.True(oneOhmPerMeter < twoOhmsPerMeter);
            Assert.True(oneOhmPerMeter <= twoOhmsPerMeter);
            Assert.True(twoOhmsPerMeter > oneOhmPerMeter);
            Assert.True(twoOhmsPerMeter >= oneOhmPerMeter);

            Assert.False(oneOhmPerMeter > twoOhmsPerMeter);
            Assert.False(oneOhmPerMeter >= twoOhmsPerMeter);
            Assert.False(twoOhmsPerMeter < oneOhmPerMeter);
            Assert.False(twoOhmsPerMeter <= oneOhmPerMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ElectricLinearResistivity ohmpermeter = ElectricLinearResistivity.FromOhmsPerMeter(1);
            Assert.Equal(0, ohmpermeter.CompareTo(ohmpermeter));
            Assert.True(ohmpermeter.CompareTo(ElectricLinearResistivity.Zero) > 0);
            Assert.True(ElectricLinearResistivity.Zero.CompareTo(ohmpermeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ElectricLinearResistivity ohmpermeter = ElectricLinearResistivity.FromOhmsPerMeter(1);
            Assert.Throws<ArgumentException>(() => ohmpermeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ElectricLinearResistivity ohmpermeter = ElectricLinearResistivity.FromOhmsPerMeter(1);
            Assert.Throws<ArgumentNullException>(() => ohmpermeter.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = ElectricLinearResistivity.FromOhmsPerMeter(1);
            var b = ElectricLinearResistivity.FromOhmsPerMeter(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = ElectricLinearResistivity.FromOhmsPerMeter(1);
            var b = ElectricLinearResistivity.FromOhmsPerMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = ElectricLinearResistivity.FromOhmsPerMeter(1);
            object b = ElectricLinearResistivity.FromOhmsPerMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = ElectricLinearResistivity.FromOhmsPerMeter(1);
            Assert.True(v.Equals(ElectricLinearResistivity.FromOhmsPerMeter(1), OhmsPerMeterTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(ElectricLinearResistivity.Zero, OhmsPerMeterTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = ElectricLinearResistivity.FromOhmsPerMeter(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(ElectricLinearResistivity.FromOhmsPerMeter(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ElectricLinearResistivity ohmpermeter = ElectricLinearResistivity.FromOhmsPerMeter(1);
            Assert.False(ohmpermeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ElectricLinearResistivity ohmpermeter = ElectricLinearResistivity.FromOhmsPerMeter(1);
            Assert.False(ohmpermeter.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(ElectricLinearResistivityUnit.Undefined, ElectricLinearResistivity.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(ElectricLinearResistivityUnit)).Cast<ElectricLinearResistivityUnit>();
            foreach(var unit in units)
            {
                if (unit == ElectricLinearResistivityUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 kΩ/cm", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.KiloohmPerCentimeter).ToString());
                Assert.Equal("1 kΩ/ft", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.KiloohmPerFoot).ToString());
                Assert.Equal("1 kΩ/km", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.KiloohmPerKilometer).ToString());
                Assert.Equal("1 kΩ/m", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.KiloohmPerMeter).ToString());
                Assert.Equal("1 kΩ/mi", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.KiloohmPerMile).ToString());
                Assert.Equal("1 MΩ/cm", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MegaohmPerCentimeter).ToString());
                Assert.Equal("1 MΩ/ft", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MegaohmPerFoot).ToString());
                Assert.Equal("1 MΩ/km", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MegaohmPerKilometer).ToString());
                Assert.Equal("1 MΩ/m", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MegaohmPerMeter).ToString());
                Assert.Equal("1 MΩ/mi", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MegaohmPerMile).ToString());
                Assert.Equal("1 µΩ/cm", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MicroohmPerCentimeter).ToString());
                Assert.Equal("1 µΩ/ft", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MicroohmPerFoot).ToString());
                Assert.Equal("1 µΩ/km", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MicroohmPerKilometer).ToString());
                Assert.Equal("1 µΩ/m", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MicroohmPerMeter).ToString());
                Assert.Equal("1 µΩ/mi", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MicroohmPerMile).ToString());
                Assert.Equal("1 mΩ/cm", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MilliohmPerCentimeter).ToString());
                Assert.Equal("1 mΩ/ft", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MilliohmPerFoot).ToString());
                Assert.Equal("1 mΩ/km", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MilliohmPerKilometer).ToString());
                Assert.Equal("1 mΩ/m", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MilliohmPerMeter).ToString());
                Assert.Equal("1 mΩ/mi", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MilliohmPerMile).ToString());
                Assert.Equal("1 nΩ/cm", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.NanoohmPerCentimeter).ToString());
                Assert.Equal("1 nΩ/ft", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.NanoohmPerFoot).ToString());
                Assert.Equal("1 nΩ/km", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.NanoohmPerKilometer).ToString());
                Assert.Equal("1 nΩ/m", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.NanoohmPerMeter).ToString());
                Assert.Equal("1 nΩ/mi", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.NanoohmPerMile).ToString());
                Assert.Equal("1 Ω/cm", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.OhmPerCentimeter).ToString());
                Assert.Equal("1 Ω/ft", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.OhmPerFoot).ToString());
                Assert.Equal("1 Ω/km", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.OhmPerKilometer).ToString());
                Assert.Equal("1 Ω/m", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.OhmPerMeter).ToString());
                Assert.Equal("1 Ω/mi", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.OhmPerMile).ToString());
                Assert.Equal("1 pΩ/cm", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.PicoohmPerCentimeter).ToString());
                Assert.Equal("1 pΩ/ft", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.PicoohmPerFoot).ToString());
                Assert.Equal("1 pΩ/km", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.PicoohmPerKilometer).ToString());
                Assert.Equal("1 pΩ/m", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.PicoohmPerMeter).ToString());
                Assert.Equal("1 pΩ/mi", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.PicoohmPerMile).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 kΩ/cm", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.KiloohmPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kΩ/ft", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.KiloohmPerFoot).ToString(swedishCulture));
            Assert.Equal("1 kΩ/km", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.KiloohmPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 kΩ/m", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.KiloohmPerMeter).ToString(swedishCulture));
            Assert.Equal("1 kΩ/mi", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.KiloohmPerMile).ToString(swedishCulture));
            Assert.Equal("1 MΩ/cm", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MegaohmPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 MΩ/ft", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MegaohmPerFoot).ToString(swedishCulture));
            Assert.Equal("1 MΩ/km", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MegaohmPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 MΩ/m", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MegaohmPerMeter).ToString(swedishCulture));
            Assert.Equal("1 MΩ/mi", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MegaohmPerMile).ToString(swedishCulture));
            Assert.Equal("1 µΩ/cm", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MicroohmPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 µΩ/ft", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MicroohmPerFoot).ToString(swedishCulture));
            Assert.Equal("1 µΩ/km", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MicroohmPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 µΩ/m", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MicroohmPerMeter).ToString(swedishCulture));
            Assert.Equal("1 µΩ/mi", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MicroohmPerMile).ToString(swedishCulture));
            Assert.Equal("1 mΩ/cm", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MilliohmPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 mΩ/ft", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MilliohmPerFoot).ToString(swedishCulture));
            Assert.Equal("1 mΩ/km", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MilliohmPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 mΩ/m", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MilliohmPerMeter).ToString(swedishCulture));
            Assert.Equal("1 mΩ/mi", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.MilliohmPerMile).ToString(swedishCulture));
            Assert.Equal("1 nΩ/cm", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.NanoohmPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 nΩ/ft", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.NanoohmPerFoot).ToString(swedishCulture));
            Assert.Equal("1 nΩ/km", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.NanoohmPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 nΩ/m", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.NanoohmPerMeter).ToString(swedishCulture));
            Assert.Equal("1 nΩ/mi", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.NanoohmPerMile).ToString(swedishCulture));
            Assert.Equal("1 Ω/cm", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.OhmPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 Ω/ft", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.OhmPerFoot).ToString(swedishCulture));
            Assert.Equal("1 Ω/km", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.OhmPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 Ω/m", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.OhmPerMeter).ToString(swedishCulture));
            Assert.Equal("1 Ω/mi", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.OhmPerMile).ToString(swedishCulture));
            Assert.Equal("1 pΩ/cm", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.PicoohmPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 pΩ/ft", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.PicoohmPerFoot).ToString(swedishCulture));
            Assert.Equal("1 pΩ/km", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.PicoohmPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 pΩ/m", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.PicoohmPerMeter).ToString(swedishCulture));
            Assert.Equal("1 pΩ/mi", new ElectricLinearResistivity(1, ElectricLinearResistivityUnit.PicoohmPerMile).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 Ω/m", new ElectricLinearResistivity(0.123456, ElectricLinearResistivityUnit.OhmPerMeter).ToString("s1"));
                Assert.Equal("0.12 Ω/m", new ElectricLinearResistivity(0.123456, ElectricLinearResistivityUnit.OhmPerMeter).ToString("s2"));
                Assert.Equal("0.123 Ω/m", new ElectricLinearResistivity(0.123456, ElectricLinearResistivityUnit.OhmPerMeter).ToString("s3"));
                Assert.Equal("0.1235 Ω/m", new ElectricLinearResistivity(0.123456, ElectricLinearResistivityUnit.OhmPerMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Ω/m", new ElectricLinearResistivity(0.123456, ElectricLinearResistivityUnit.OhmPerMeter).ToString("s1", culture));
            Assert.Equal("0.12 Ω/m", new ElectricLinearResistivity(0.123456, ElectricLinearResistivityUnit.OhmPerMeter).ToString("s2", culture));
            Assert.Equal("0.123 Ω/m", new ElectricLinearResistivity(0.123456, ElectricLinearResistivityUnit.OhmPerMeter).ToString("s3", culture));
            Assert.Equal("0.1235 Ω/m", new ElectricLinearResistivity(0.123456, ElectricLinearResistivityUnit.OhmPerMeter).ToString("s4", culture));
        }

/*
        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }
*/

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
           Assert.Equal((byte)quantity.Value.Real, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Equal((decimal)quantity.Value.Real, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Equal((double)quantity.Value.Real, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Equal((short)quantity.Value.Real, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Equal((int)quantity.Value.Real, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Equal((long)quantity.Value.Real, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Equal((sbyte)quantity.Value.Real, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Equal((float)quantity.Value.Real, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Equal((ushort)quantity.Value.Real, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Equal((uint)quantity.Value.Real, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Equal((ulong)quantity.Value.Real, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(ElectricLinearResistivity)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(ElectricLinearResistivityUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Equal(ElectricLinearResistivity.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Equal(ElectricLinearResistivity.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(1.0);
            Assert.Equal(new {ElectricLinearResistivity.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = ElectricLinearResistivity.FromOhmsPerMeter(value);
            Assert.Equal(ElectricLinearResistivity.FromOhmsPerMeter(-value), -quantity);
        }
    }
}
