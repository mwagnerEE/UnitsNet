//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToElectricLinearResistivity;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToElectricLinearResistivityExtensionsTests
    {
        [Fact]
        public void NumberToKiloohmsPerCentimeterTest() =>
            Assert.Equal(ElectricLinearResistivity.FromKiloohmsPerCentimeter(2), 2.KiloohmsPerCentimeter());

        [Fact]
        public void NumberToKiloohmsPerFootTest() =>
            Assert.Equal(ElectricLinearResistivity.FromKiloohmsPerFoot(2), 2.KiloohmsPerFoot());

        [Fact]
        public void NumberToKiloohmsPerKilometerTest() =>
            Assert.Equal(ElectricLinearResistivity.FromKiloohmsPerKilometer(2), 2.KiloohmsPerKilometer());

        [Fact]
        public void NumberToKiloohmsPerMeterTest() =>
            Assert.Equal(ElectricLinearResistivity.FromKiloohmsPerMeter(2), 2.KiloohmsPerMeter());

        [Fact]
        public void NumberToKiloohmsPerMileTest() =>
            Assert.Equal(ElectricLinearResistivity.FromKiloohmsPerMile(2), 2.KiloohmsPerMile());

        [Fact]
        public void NumberToMegaohmsPerCentimeterTest() =>
            Assert.Equal(ElectricLinearResistivity.FromMegaohmsPerCentimeter(2), 2.MegaohmsPerCentimeter());

        [Fact]
        public void NumberToMegaohmsPerFootTest() =>
            Assert.Equal(ElectricLinearResistivity.FromMegaohmsPerFoot(2), 2.MegaohmsPerFoot());

        [Fact]
        public void NumberToMegaohmsPerKilometerTest() =>
            Assert.Equal(ElectricLinearResistivity.FromMegaohmsPerKilometer(2), 2.MegaohmsPerKilometer());

        [Fact]
        public void NumberToMegaohmsPerMeterTest() =>
            Assert.Equal(ElectricLinearResistivity.FromMegaohmsPerMeter(2), 2.MegaohmsPerMeter());

        [Fact]
        public void NumberToMegaohmsPerMileTest() =>
            Assert.Equal(ElectricLinearResistivity.FromMegaohmsPerMile(2), 2.MegaohmsPerMile());

        [Fact]
        public void NumberToMicroohmsPerCentimeterTest() =>
            Assert.Equal(ElectricLinearResistivity.FromMicroohmsPerCentimeter(2), 2.MicroohmsPerCentimeter());

        [Fact]
        public void NumberToMicroohmsPerFootTest() =>
            Assert.Equal(ElectricLinearResistivity.FromMicroohmsPerFoot(2), 2.MicroohmsPerFoot());

        [Fact]
        public void NumberToMicroohmsPerKilometerTest() =>
            Assert.Equal(ElectricLinearResistivity.FromMicroohmsPerKilometer(2), 2.MicroohmsPerKilometer());

        [Fact]
        public void NumberToMicroohmsPerMeterTest() =>
            Assert.Equal(ElectricLinearResistivity.FromMicroohmsPerMeter(2), 2.MicroohmsPerMeter());

        [Fact]
        public void NumberToMicroohmsPerMileTest() =>
            Assert.Equal(ElectricLinearResistivity.FromMicroohmsPerMile(2), 2.MicroohmsPerMile());

        [Fact]
        public void NumberToMilliohmsPerCentimeterTest() =>
            Assert.Equal(ElectricLinearResistivity.FromMilliohmsPerCentimeter(2), 2.MilliohmsPerCentimeter());

        [Fact]
        public void NumberToMilliohmsPerFootTest() =>
            Assert.Equal(ElectricLinearResistivity.FromMilliohmsPerFoot(2), 2.MilliohmsPerFoot());

        [Fact]
        public void NumberToMilliohmsPerKilometerTest() =>
            Assert.Equal(ElectricLinearResistivity.FromMilliohmsPerKilometer(2), 2.MilliohmsPerKilometer());

        [Fact]
        public void NumberToMilliohmsPerMeterTest() =>
            Assert.Equal(ElectricLinearResistivity.FromMilliohmsPerMeter(2), 2.MilliohmsPerMeter());

        [Fact]
        public void NumberToMilliohmsPerMileTest() =>
            Assert.Equal(ElectricLinearResistivity.FromMilliohmsPerMile(2), 2.MilliohmsPerMile());

        [Fact]
        public void NumberToNanoohmsPerCentimeterTest() =>
            Assert.Equal(ElectricLinearResistivity.FromNanoohmsPerCentimeter(2), 2.NanoohmsPerCentimeter());

        [Fact]
        public void NumberToNanoohmsPerFootTest() =>
            Assert.Equal(ElectricLinearResistivity.FromNanoohmsPerFoot(2), 2.NanoohmsPerFoot());

        [Fact]
        public void NumberToNanoohmsPerKilometerTest() =>
            Assert.Equal(ElectricLinearResistivity.FromNanoohmsPerKilometer(2), 2.NanoohmsPerKilometer());

        [Fact]
        public void NumberToNanoohmsPerMeterTest() =>
            Assert.Equal(ElectricLinearResistivity.FromNanoohmsPerMeter(2), 2.NanoohmsPerMeter());

        [Fact]
        public void NumberToNanoohmsPerMileTest() =>
            Assert.Equal(ElectricLinearResistivity.FromNanoohmsPerMile(2), 2.NanoohmsPerMile());

        [Fact]
        public void NumberToOhmsPerCentimeterTest() =>
            Assert.Equal(ElectricLinearResistivity.FromOhmsPerCentimeter(2), 2.OhmsPerCentimeter());

        [Fact]
        public void NumberToOhmsPerFootTest() =>
            Assert.Equal(ElectricLinearResistivity.FromOhmsPerFoot(2), 2.OhmsPerFoot());

        [Fact]
        public void NumberToOhmsPerKilometerTest() =>
            Assert.Equal(ElectricLinearResistivity.FromOhmsPerKilometer(2), 2.OhmsPerKilometer());

        [Fact]
        public void NumberToOhmsPerMeterTest() =>
            Assert.Equal(ElectricLinearResistivity.FromOhmsPerMeter(2), 2.OhmsPerMeter());

        [Fact]
        public void NumberToOhmsPerMileTest() =>
            Assert.Equal(ElectricLinearResistivity.FromOhmsPerMile(2), 2.OhmsPerMile());

        [Fact]
        public void NumberToPicoohmsPerCentimeterTest() =>
            Assert.Equal(ElectricLinearResistivity.FromPicoohmsPerCentimeter(2), 2.PicoohmsPerCentimeter());

        [Fact]
        public void NumberToPicoohmsPerFootTest() =>
            Assert.Equal(ElectricLinearResistivity.FromPicoohmsPerFoot(2), 2.PicoohmsPerFoot());

        [Fact]
        public void NumberToPicoohmsPerKilometerTest() =>
            Assert.Equal(ElectricLinearResistivity.FromPicoohmsPerKilometer(2), 2.PicoohmsPerKilometer());

        [Fact]
        public void NumberToPicoohmsPerMeterTest() =>
            Assert.Equal(ElectricLinearResistivity.FromPicoohmsPerMeter(2), 2.PicoohmsPerMeter());

        [Fact]
        public void NumberToPicoohmsPerMileTest() =>
            Assert.Equal(ElectricLinearResistivity.FromPicoohmsPerMile(2), 2.PicoohmsPerMile());

    }
}
