//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Electrical conductivity or specific conductance is the reciprocal of electrical resistivity, and measures a material's ability to conduct an electric current.
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Electrical_resistivity_and_conductivity
    /// </remarks>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class ElectricConductivity : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly QuantityValue _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly ElectricConductivityUnit? _unit;

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit SiemensPerMeter.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public ElectricConductivity()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private ElectricConductivity(QuantityValue value, ElectricConductivityUnit unit)
        {
            if (unit == ElectricConductivityUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = value;
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of ElectricConductivity, which is SiemensPerMeter. All conversions go via this value.
        /// </summary>
        public static ElectricConductivityUnit BaseUnit { get; }

        /// <summary>
        /// Represents the largest possible value of ElectricConductivity
        /// </summary>
        public static ElectricConductivity MaxValue { get; }

        /// <summary>
        /// Represents the smallest possible value of ElectricConductivity
        /// </summary>
        public static ElectricConductivity MinValue { get; }

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public static QuantityType QuantityType { get; }

        /// <summary>
        ///     All units of measurement for the ElectricConductivity quantity.
        /// </summary>
        public static ElectricConductivityUnit[] Units { get; }

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit SiemensPerMeter.
        /// </summary>
        public static ElectricConductivity Zero { get; }

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public ElectricConductivityUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public QuantityType Type => ElectricConductivity.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => ElectricConductivity.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.KilosiemenPerFoot"/>
        /// </summary>
        public double KilosiemensPerFoot => As(ElectricConductivityUnit.KilosiemenPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.KilosiemenPerInch"/>
        /// </summary>
        public double KilosiemensPerInch => As(ElectricConductivityUnit.KilosiemenPerInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.KilosiemenPerKilofoot"/>
        /// </summary>
        public double KilosiemensPerKilofoot => As(ElectricConductivityUnit.KilosiemenPerKilofoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.KilosiemenPerKilometer"/>
        /// </summary>
        public double KilosiemensPerKilometer => As(ElectricConductivityUnit.KilosiemenPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.KilosiemenPerMile"/>
        /// </summary>
        public double KilosiemensPerMile => As(ElectricConductivityUnit.KilosiemenPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.KilosiemensPerMeter"/>
        /// </summary>
        public double KilosiemensPerMeter => As(ElectricConductivityUnit.KilosiemensPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MegasiemenPerFoot"/>
        /// </summary>
        public double MegasiemensPerFoot => As(ElectricConductivityUnit.MegasiemenPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MegasiemenPerInch"/>
        /// </summary>
        public double MegasiemensPerInch => As(ElectricConductivityUnit.MegasiemenPerInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MegasiemenPerKilofoot"/>
        /// </summary>
        public double MegasiemensPerKilofoot => As(ElectricConductivityUnit.MegasiemenPerKilofoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MegasiemenPerKilometer"/>
        /// </summary>
        public double MegasiemensPerKilometer => As(ElectricConductivityUnit.MegasiemenPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MegasiemenPerMile"/>
        /// </summary>
        public double MegasiemensPerMile => As(ElectricConductivityUnit.MegasiemenPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MegasiemensPerMeter"/>
        /// </summary>
        public double MegasiemensPerMeter => As(ElectricConductivityUnit.MegasiemensPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MicrosiemenPerFoot"/>
        /// </summary>
        public double MicrosiemensPerFoot => As(ElectricConductivityUnit.MicrosiemenPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MicrosiemenPerInch"/>
        /// </summary>
        public double MicrosiemensPerInch => As(ElectricConductivityUnit.MicrosiemenPerInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MicrosiemenPerKilofoot"/>
        /// </summary>
        public double MicrosiemensPerKilofoot => As(ElectricConductivityUnit.MicrosiemenPerKilofoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MicrosiemenPerKilometer"/>
        /// </summary>
        public double MicrosiemensPerKilometer => As(ElectricConductivityUnit.MicrosiemenPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MicrosiemenPerMile"/>
        /// </summary>
        public double MicrosiemensPerMile => As(ElectricConductivityUnit.MicrosiemenPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MicrosiemensPerMeter"/>
        /// </summary>
        public double MicrosiemensPerMeter => As(ElectricConductivityUnit.MicrosiemensPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MillisiemenPerFoot"/>
        /// </summary>
        public double MillisiemensPerFoot => As(ElectricConductivityUnit.MillisiemenPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MillisiemenPerInch"/>
        /// </summary>
        public double MillisiemensPerInch => As(ElectricConductivityUnit.MillisiemenPerInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MillisiemenPerKilofoot"/>
        /// </summary>
        public double MillisiemensPerKilofoot => As(ElectricConductivityUnit.MillisiemenPerKilofoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MillisiemenPerKilometer"/>
        /// </summary>
        public double MillisiemensPerKilometer => As(ElectricConductivityUnit.MillisiemenPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MillisiemenPerMile"/>
        /// </summary>
        public double MillisiemensPerMile => As(ElectricConductivityUnit.MillisiemenPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MillisiemensPerMeter"/>
        /// </summary>
        public double MillisiemensPerMeter => As(ElectricConductivityUnit.MillisiemensPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.NanosiemenPerFoot"/>
        /// </summary>
        public double NanosiemensPerFoot => As(ElectricConductivityUnit.NanosiemenPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.NanosiemenPerInch"/>
        /// </summary>
        public double NanosiemensPerInch => As(ElectricConductivityUnit.NanosiemenPerInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.NanosiemenPerKilofoot"/>
        /// </summary>
        public double NanosiemensPerKilofoot => As(ElectricConductivityUnit.NanosiemenPerKilofoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.NanosiemenPerKilometer"/>
        /// </summary>
        public double NanosiemensPerKilometer => As(ElectricConductivityUnit.NanosiemenPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.NanosiemenPerMile"/>
        /// </summary>
        public double NanosiemensPerMile => As(ElectricConductivityUnit.NanosiemenPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.NanosiemensPerMeter"/>
        /// </summary>
        public double NanosiemensPerMeter => As(ElectricConductivityUnit.NanosiemensPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.PicosiemenPerFoot"/>
        /// </summary>
        public double PicosiemensPerFoot => As(ElectricConductivityUnit.PicosiemenPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.PicosiemenPerInch"/>
        /// </summary>
        public double PicosiemensPerInch => As(ElectricConductivityUnit.PicosiemenPerInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.PicosiemenPerKilofoot"/>
        /// </summary>
        public double PicosiemensPerKilofoot => As(ElectricConductivityUnit.PicosiemenPerKilofoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.PicosiemenPerKilometer"/>
        /// </summary>
        public double PicosiemensPerKilometer => As(ElectricConductivityUnit.PicosiemenPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.PicosiemenPerMile"/>
        /// </summary>
        public double PicosiemensPerMile => As(ElectricConductivityUnit.PicosiemenPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.PicosiemensPerMeter"/>
        /// </summary>
        public double PicosiemensPerMeter => As(ElectricConductivityUnit.PicosiemensPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.SiemenPerFoot"/>
        /// </summary>
        public double SiemensPerFoot => As(ElectricConductivityUnit.SiemenPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.SiemenPerInch"/>
        /// </summary>
        public double SiemensPerInch => As(ElectricConductivityUnit.SiemenPerInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.SiemenPerKilofoot"/>
        /// </summary>
        public double SiemensPerKilofoot => As(ElectricConductivityUnit.SiemenPerKilofoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.SiemenPerKilometer"/>
        /// </summary>
        public double SiemensPerKilometer => As(ElectricConductivityUnit.SiemenPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.SiemenPerMile"/>
        /// </summary>
        public double SiemensPerMile => As(ElectricConductivityUnit.SiemenPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.SiemensPerMeter"/>
        /// </summary>
        public double SiemensPerMeter => As(ElectricConductivityUnit.SiemensPerMeter);

        #endregion

        #region Static Methods

        internal static void MapGeneratedLocalizations(UnitAbbreviationsCache unitAbbreviationsCache)
        {
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.KilosiemenPerFoot, new CultureInfo("en-US"), false, true, new string[]{"kS/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.KilosiemenPerInch, new CultureInfo("en-US"), false, true, new string[]{"kS/in"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.KilosiemenPerKilofoot, new CultureInfo("en-US"), false, true, new string[]{"kS/kft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.KilosiemenPerKilometer, new CultureInfo("en-US"), false, true, new string[]{"kS/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.KilosiemenPerMile, new CultureInfo("en-US"), false, true, new string[]{"kS/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.KilosiemensPerMeter, new CultureInfo("en-US"), false, true, new string[]{"kS/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.MegasiemenPerFoot, new CultureInfo("en-US"), false, true, new string[]{"MS/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.MegasiemenPerInch, new CultureInfo("en-US"), false, true, new string[]{"MS/in"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.MegasiemenPerKilofoot, new CultureInfo("en-US"), false, true, new string[]{"MS/kft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.MegasiemenPerKilometer, new CultureInfo("en-US"), false, true, new string[]{"MS/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.MegasiemenPerMile, new CultureInfo("en-US"), false, true, new string[]{"MS/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.MegasiemensPerMeter, new CultureInfo("en-US"), false, true, new string[]{"MS/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.MicrosiemenPerFoot, new CultureInfo("en-US"), false, true, new string[]{"µS/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.MicrosiemenPerInch, new CultureInfo("en-US"), false, true, new string[]{"µS/in"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.MicrosiemenPerKilofoot, new CultureInfo("en-US"), false, true, new string[]{"µS/kft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.MicrosiemenPerKilometer, new CultureInfo("en-US"), false, true, new string[]{"µS/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.MicrosiemenPerMile, new CultureInfo("en-US"), false, true, new string[]{"µS/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.MicrosiemensPerMeter, new CultureInfo("en-US"), false, true, new string[]{"µS/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.MillisiemenPerFoot, new CultureInfo("en-US"), false, true, new string[]{"mS/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.MillisiemenPerInch, new CultureInfo("en-US"), false, true, new string[]{"mS/in"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.MillisiemenPerKilofoot, new CultureInfo("en-US"), false, true, new string[]{"mS/kft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.MillisiemenPerKilometer, new CultureInfo("en-US"), false, true, new string[]{"mS/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.MillisiemenPerMile, new CultureInfo("en-US"), false, true, new string[]{"mS/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.MillisiemensPerMeter, new CultureInfo("en-US"), false, true, new string[]{"mS/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.NanosiemenPerFoot, new CultureInfo("en-US"), false, true, new string[]{"nS/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.NanosiemenPerInch, new CultureInfo("en-US"), false, true, new string[]{"nS/in"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.NanosiemenPerKilofoot, new CultureInfo("en-US"), false, true, new string[]{"nS/kft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.NanosiemenPerKilometer, new CultureInfo("en-US"), false, true, new string[]{"nS/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.NanosiemenPerMile, new CultureInfo("en-US"), false, true, new string[]{"nS/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.NanosiemensPerMeter, new CultureInfo("en-US"), false, true, new string[]{"nS/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.PicosiemenPerFoot, new CultureInfo("en-US"), false, true, new string[]{"pS/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.PicosiemenPerInch, new CultureInfo("en-US"), false, true, new string[]{"pS/in"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.PicosiemenPerKilofoot, new CultureInfo("en-US"), false, true, new string[]{"pS/kft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.PicosiemenPerKilometer, new CultureInfo("en-US"), false, true, new string[]{"pS/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.PicosiemenPerMile, new CultureInfo("en-US"), false, true, new string[]{"pS/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.PicosiemensPerMeter, new CultureInfo("en-US"), false, true, new string[]{"pS/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.SiemenPerFoot, new CultureInfo("en-US"), false, true, new string[]{"S/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.SiemenPerInch, new CultureInfo("en-US"), false, true, new string[]{"S/in"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.SiemenPerKilofoot, new CultureInfo("en-US"), false, true, new string[]{"S/kft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.SiemenPerKilometer, new CultureInfo("en-US"), false, true, new string[]{"S/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.SiemenPerMile, new CultureInfo("en-US"), false, true, new string[]{"S/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricConductivityUnit.SiemensPerMeter, new CultureInfo("en-US"), false, true, new string[]{"S/m"});
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(ElectricConductivityUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(ElectricConductivityUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.KilosiemenPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromKilosiemensPerFoot(double kilosiemensperfoot)
        {
            QuantityValue value = (QuantityValue) kilosiemensperfoot;
            return new ElectricConductivity(value, ElectricConductivityUnit.KilosiemenPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.KilosiemenPerInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromKilosiemensPerInch(double kilosiemensperinch)
        {
            QuantityValue value = (QuantityValue) kilosiemensperinch;
            return new ElectricConductivity(value, ElectricConductivityUnit.KilosiemenPerInch);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.KilosiemenPerKilofoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromKilosiemensPerKilofoot(double kilosiemensperkilofoot)
        {
            QuantityValue value = (QuantityValue) kilosiemensperkilofoot;
            return new ElectricConductivity(value, ElectricConductivityUnit.KilosiemenPerKilofoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.KilosiemenPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromKilosiemensPerKilometer(double kilosiemensperkilometer)
        {
            QuantityValue value = (QuantityValue) kilosiemensperkilometer;
            return new ElectricConductivity(value, ElectricConductivityUnit.KilosiemenPerKilometer);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.KilosiemenPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromKilosiemensPerMile(double kilosiemenspermile)
        {
            QuantityValue value = (QuantityValue) kilosiemenspermile;
            return new ElectricConductivity(value, ElectricConductivityUnit.KilosiemenPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.KilosiemensPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromKilosiemensPerMeter(double kilosiemenspermeter)
        {
            QuantityValue value = (QuantityValue) kilosiemenspermeter;
            return new ElectricConductivity(value, ElectricConductivityUnit.KilosiemensPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MegasiemenPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMegasiemensPerFoot(double megasiemensperfoot)
        {
            QuantityValue value = (QuantityValue) megasiemensperfoot;
            return new ElectricConductivity(value, ElectricConductivityUnit.MegasiemenPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MegasiemenPerInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMegasiemensPerInch(double megasiemensperinch)
        {
            QuantityValue value = (QuantityValue) megasiemensperinch;
            return new ElectricConductivity(value, ElectricConductivityUnit.MegasiemenPerInch);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MegasiemenPerKilofoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMegasiemensPerKilofoot(double megasiemensperkilofoot)
        {
            QuantityValue value = (QuantityValue) megasiemensperkilofoot;
            return new ElectricConductivity(value, ElectricConductivityUnit.MegasiemenPerKilofoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MegasiemenPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMegasiemensPerKilometer(double megasiemensperkilometer)
        {
            QuantityValue value = (QuantityValue) megasiemensperkilometer;
            return new ElectricConductivity(value, ElectricConductivityUnit.MegasiemenPerKilometer);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MegasiemenPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMegasiemensPerMile(double megasiemenspermile)
        {
            QuantityValue value = (QuantityValue) megasiemenspermile;
            return new ElectricConductivity(value, ElectricConductivityUnit.MegasiemenPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MegasiemensPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMegasiemensPerMeter(double megasiemenspermeter)
        {
            QuantityValue value = (QuantityValue) megasiemenspermeter;
            return new ElectricConductivity(value, ElectricConductivityUnit.MegasiemensPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MicrosiemenPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMicrosiemensPerFoot(double microsiemensperfoot)
        {
            QuantityValue value = (QuantityValue) microsiemensperfoot;
            return new ElectricConductivity(value, ElectricConductivityUnit.MicrosiemenPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MicrosiemenPerInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMicrosiemensPerInch(double microsiemensperinch)
        {
            QuantityValue value = (QuantityValue) microsiemensperinch;
            return new ElectricConductivity(value, ElectricConductivityUnit.MicrosiemenPerInch);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MicrosiemenPerKilofoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMicrosiemensPerKilofoot(double microsiemensperkilofoot)
        {
            QuantityValue value = (QuantityValue) microsiemensperkilofoot;
            return new ElectricConductivity(value, ElectricConductivityUnit.MicrosiemenPerKilofoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MicrosiemenPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMicrosiemensPerKilometer(double microsiemensperkilometer)
        {
            QuantityValue value = (QuantityValue) microsiemensperkilometer;
            return new ElectricConductivity(value, ElectricConductivityUnit.MicrosiemenPerKilometer);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MicrosiemenPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMicrosiemensPerMile(double microsiemenspermile)
        {
            QuantityValue value = (QuantityValue) microsiemenspermile;
            return new ElectricConductivity(value, ElectricConductivityUnit.MicrosiemenPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MicrosiemensPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMicrosiemensPerMeter(double microsiemenspermeter)
        {
            QuantityValue value = (QuantityValue) microsiemenspermeter;
            return new ElectricConductivity(value, ElectricConductivityUnit.MicrosiemensPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MillisiemenPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMillisiemensPerFoot(double millisiemensperfoot)
        {
            QuantityValue value = (QuantityValue) millisiemensperfoot;
            return new ElectricConductivity(value, ElectricConductivityUnit.MillisiemenPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MillisiemenPerInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMillisiemensPerInch(double millisiemensperinch)
        {
            QuantityValue value = (QuantityValue) millisiemensperinch;
            return new ElectricConductivity(value, ElectricConductivityUnit.MillisiemenPerInch);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MillisiemenPerKilofoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMillisiemensPerKilofoot(double millisiemensperkilofoot)
        {
            QuantityValue value = (QuantityValue) millisiemensperkilofoot;
            return new ElectricConductivity(value, ElectricConductivityUnit.MillisiemenPerKilofoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MillisiemenPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMillisiemensPerKilometer(double millisiemensperkilometer)
        {
            QuantityValue value = (QuantityValue) millisiemensperkilometer;
            return new ElectricConductivity(value, ElectricConductivityUnit.MillisiemenPerKilometer);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MillisiemenPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMillisiemensPerMile(double millisiemenspermile)
        {
            QuantityValue value = (QuantityValue) millisiemenspermile;
            return new ElectricConductivity(value, ElectricConductivityUnit.MillisiemenPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MillisiemensPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMillisiemensPerMeter(double millisiemenspermeter)
        {
            QuantityValue value = (QuantityValue) millisiemenspermeter;
            return new ElectricConductivity(value, ElectricConductivityUnit.MillisiemensPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.NanosiemenPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromNanosiemensPerFoot(double nanosiemensperfoot)
        {
            QuantityValue value = (QuantityValue) nanosiemensperfoot;
            return new ElectricConductivity(value, ElectricConductivityUnit.NanosiemenPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.NanosiemenPerInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromNanosiemensPerInch(double nanosiemensperinch)
        {
            QuantityValue value = (QuantityValue) nanosiemensperinch;
            return new ElectricConductivity(value, ElectricConductivityUnit.NanosiemenPerInch);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.NanosiemenPerKilofoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromNanosiemensPerKilofoot(double nanosiemensperkilofoot)
        {
            QuantityValue value = (QuantityValue) nanosiemensperkilofoot;
            return new ElectricConductivity(value, ElectricConductivityUnit.NanosiemenPerKilofoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.NanosiemenPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromNanosiemensPerKilometer(double nanosiemensperkilometer)
        {
            QuantityValue value = (QuantityValue) nanosiemensperkilometer;
            return new ElectricConductivity(value, ElectricConductivityUnit.NanosiemenPerKilometer);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.NanosiemenPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromNanosiemensPerMile(double nanosiemenspermile)
        {
            QuantityValue value = (QuantityValue) nanosiemenspermile;
            return new ElectricConductivity(value, ElectricConductivityUnit.NanosiemenPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.NanosiemensPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromNanosiemensPerMeter(double nanosiemenspermeter)
        {
            QuantityValue value = (QuantityValue) nanosiemenspermeter;
            return new ElectricConductivity(value, ElectricConductivityUnit.NanosiemensPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.PicosiemenPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromPicosiemensPerFoot(double picosiemensperfoot)
        {
            QuantityValue value = (QuantityValue) picosiemensperfoot;
            return new ElectricConductivity(value, ElectricConductivityUnit.PicosiemenPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.PicosiemenPerInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromPicosiemensPerInch(double picosiemensperinch)
        {
            QuantityValue value = (QuantityValue) picosiemensperinch;
            return new ElectricConductivity(value, ElectricConductivityUnit.PicosiemenPerInch);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.PicosiemenPerKilofoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromPicosiemensPerKilofoot(double picosiemensperkilofoot)
        {
            QuantityValue value = (QuantityValue) picosiemensperkilofoot;
            return new ElectricConductivity(value, ElectricConductivityUnit.PicosiemenPerKilofoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.PicosiemenPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromPicosiemensPerKilometer(double picosiemensperkilometer)
        {
            QuantityValue value = (QuantityValue) picosiemensperkilometer;
            return new ElectricConductivity(value, ElectricConductivityUnit.PicosiemenPerKilometer);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.PicosiemenPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromPicosiemensPerMile(double picosiemenspermile)
        {
            QuantityValue value = (QuantityValue) picosiemenspermile;
            return new ElectricConductivity(value, ElectricConductivityUnit.PicosiemenPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.PicosiemensPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromPicosiemensPerMeter(double picosiemenspermeter)
        {
            QuantityValue value = (QuantityValue) picosiemenspermeter;
            return new ElectricConductivity(value, ElectricConductivityUnit.PicosiemensPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.SiemenPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromSiemensPerFoot(double siemensperfoot)
        {
            QuantityValue value = (QuantityValue) siemensperfoot;
            return new ElectricConductivity(value, ElectricConductivityUnit.SiemenPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.SiemenPerInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromSiemensPerInch(double siemensperinch)
        {
            QuantityValue value = (QuantityValue) siemensperinch;
            return new ElectricConductivity(value, ElectricConductivityUnit.SiemenPerInch);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.SiemenPerKilofoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromSiemensPerKilofoot(double siemensperkilofoot)
        {
            QuantityValue value = (QuantityValue) siemensperkilofoot;
            return new ElectricConductivity(value, ElectricConductivityUnit.SiemenPerKilofoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.SiemenPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromSiemensPerKilometer(double siemensperkilometer)
        {
            QuantityValue value = (QuantityValue) siemensperkilometer;
            return new ElectricConductivity(value, ElectricConductivityUnit.SiemenPerKilometer);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.SiemenPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromSiemensPerMile(double siemenspermile)
        {
            QuantityValue value = (QuantityValue) siemenspermile;
            return new ElectricConductivity(value, ElectricConductivityUnit.SiemenPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.SiemensPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromSiemensPerMeter(double siemenspermeter)
        {
            QuantityValue value = (QuantityValue) siemenspermeter;
            return new ElectricConductivity(value, ElectricConductivityUnit.SiemensPerMeter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElectricConductivityUnit" /> to <see cref="ElectricConductivity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ElectricConductivity unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static ElectricConductivity From(double value, ElectricConductivityUnit fromUnit)
        {
            return new ElectricConductivity((QuantityValue)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static ElectricConductivity Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static ElectricConductivity Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<ElectricConductivity, ElectricConductivityUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out ElectricConductivity result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out ElectricConductivity result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<ElectricConductivity, ElectricConductivityUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ElectricConductivityUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static ElectricConductivityUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<ElectricConductivityUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out ElectricConductivityUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out ElectricConductivityUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<ElectricConductivityUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj is null) throw new ArgumentNullException(nameof(obj));
            if (!(obj is ElectricConductivity objElectricConductivity)) throw new ArgumentException("Expected type ElectricConductivity.", nameof(obj));

            return CompareTo(objElectricConductivity);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(ElectricConductivity other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if (obj is null || !(obj is ElectricConductivity objElectricConductivity))
                return false;

            return Equals(objElectricConductivity);
        }

        public bool Equals(ElectricConductivity other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another ElectricConductivity within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(ElectricConductivity other, double tolerance, ComparisonType comparisonType)
        {
            if (tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current ElectricConductivity.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((ElectricConductivityUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(ElectricConductivityUnit unit)
        {
            if (Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this ElectricConductivity to another ElectricConductivity with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A ElectricConductivity with the specified unit.</returns>
        public ElectricConductivity ToUnit(ElectricConductivityUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new ElectricConductivity(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private QuantityValue AsBaseUnit()
        {
            switch(Unit)
            {
                case ElectricConductivityUnit.KilosiemenPerFoot: return (_value * 3.2808398950131234) * 1e3d;
                case ElectricConductivityUnit.KilosiemenPerInch: return (_value * 3.937007874015748e1) * 1e3d;
                case ElectricConductivityUnit.KilosiemenPerKilofoot: return (_value * 3.2808398950131234e3) * 1e3d;
                case ElectricConductivityUnit.KilosiemenPerKilometer: return (_value * 1000) * 1e3d;
                case ElectricConductivityUnit.KilosiemenPerMile: return (_value * 1609) * 1e3d;
                case ElectricConductivityUnit.KilosiemensPerMeter: return (_value) * 1e3d;
                case ElectricConductivityUnit.MegasiemenPerFoot: return (_value * 3.2808398950131234) * 1e6d;
                case ElectricConductivityUnit.MegasiemenPerInch: return (_value * 3.937007874015748e1) * 1e6d;
                case ElectricConductivityUnit.MegasiemenPerKilofoot: return (_value * 3.2808398950131234e3) * 1e6d;
                case ElectricConductivityUnit.MegasiemenPerKilometer: return (_value * 1000) * 1e6d;
                case ElectricConductivityUnit.MegasiemenPerMile: return (_value * 1609) * 1e6d;
                case ElectricConductivityUnit.MegasiemensPerMeter: return (_value) * 1e6d;
                case ElectricConductivityUnit.MicrosiemenPerFoot: return (_value * 3.2808398950131234) * 1e-6d;
                case ElectricConductivityUnit.MicrosiemenPerInch: return (_value * 3.937007874015748e1) * 1e-6d;
                case ElectricConductivityUnit.MicrosiemenPerKilofoot: return (_value * 3.2808398950131234e3) * 1e-6d;
                case ElectricConductivityUnit.MicrosiemenPerKilometer: return (_value * 1000) * 1e-6d;
                case ElectricConductivityUnit.MicrosiemenPerMile: return (_value * 1609) * 1e-6d;
                case ElectricConductivityUnit.MicrosiemensPerMeter: return (_value) * 1e-6d;
                case ElectricConductivityUnit.MillisiemenPerFoot: return (_value * 3.2808398950131234) * 1e-3d;
                case ElectricConductivityUnit.MillisiemenPerInch: return (_value * 3.937007874015748e1) * 1e-3d;
                case ElectricConductivityUnit.MillisiemenPerKilofoot: return (_value * 3.2808398950131234e3) * 1e-3d;
                case ElectricConductivityUnit.MillisiemenPerKilometer: return (_value * 1000) * 1e-3d;
                case ElectricConductivityUnit.MillisiemenPerMile: return (_value * 1609) * 1e-3d;
                case ElectricConductivityUnit.MillisiemensPerMeter: return (_value) * 1e-3d;
                case ElectricConductivityUnit.NanosiemenPerFoot: return (_value * 3.2808398950131234) * 1e-9d;
                case ElectricConductivityUnit.NanosiemenPerInch: return (_value * 3.937007874015748e1) * 1e-9d;
                case ElectricConductivityUnit.NanosiemenPerKilofoot: return (_value * 3.2808398950131234e3) * 1e-9d;
                case ElectricConductivityUnit.NanosiemenPerKilometer: return (_value * 1000) * 1e-9d;
                case ElectricConductivityUnit.NanosiemenPerMile: return (_value * 1609) * 1e-9d;
                case ElectricConductivityUnit.NanosiemensPerMeter: return (_value) * 1e-9d;
                case ElectricConductivityUnit.PicosiemenPerFoot: return (_value * 3.2808398950131234) * 1e-12d;
                case ElectricConductivityUnit.PicosiemenPerInch: return (_value * 3.937007874015748e1) * 1e-12d;
                case ElectricConductivityUnit.PicosiemenPerKilofoot: return (_value * 3.2808398950131234e3) * 1e-12d;
                case ElectricConductivityUnit.PicosiemenPerKilometer: return (_value * 1000) * 1e-12d;
                case ElectricConductivityUnit.PicosiemenPerMile: return (_value * 1609) * 1e-12d;
                case ElectricConductivityUnit.PicosiemensPerMeter: return (_value) * 1e-12d;
                case ElectricConductivityUnit.SiemenPerFoot: return _value * 3.2808398950131234;
                case ElectricConductivityUnit.SiemenPerInch: return _value * 3.937007874015748e1;
                case ElectricConductivityUnit.SiemenPerKilofoot: return _value * 3.2808398950131234e3;
                case ElectricConductivityUnit.SiemenPerKilometer: return _value * 1000;
                case ElectricConductivityUnit.SiemenPerMile: return _value * 1609;
                case ElectricConductivityUnit.SiemensPerMeter: return _value;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private QuantityValue AsBaseNumericType(ElectricConductivityUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case ElectricConductivityUnit.KilosiemenPerFoot: return (baseUnitValue / 3.2808398950131234) / 1e3d;
                case ElectricConductivityUnit.KilosiemenPerInch: return (baseUnitValue / 3.937007874015748e1) / 1e3d;
                case ElectricConductivityUnit.KilosiemenPerKilofoot: return (baseUnitValue / 3.2808398950131234e3) / 1e3d;
                case ElectricConductivityUnit.KilosiemenPerKilometer: return (baseUnitValue / 1000) / 1e3d;
                case ElectricConductivityUnit.KilosiemenPerMile: return (baseUnitValue / 1609) / 1e3d;
                case ElectricConductivityUnit.KilosiemensPerMeter: return (baseUnitValue) / 1e3d;
                case ElectricConductivityUnit.MegasiemenPerFoot: return (baseUnitValue / 3.2808398950131234) / 1e6d;
                case ElectricConductivityUnit.MegasiemenPerInch: return (baseUnitValue / 3.937007874015748e1) / 1e6d;
                case ElectricConductivityUnit.MegasiemenPerKilofoot: return (baseUnitValue / 3.2808398950131234e3) / 1e6d;
                case ElectricConductivityUnit.MegasiemenPerKilometer: return (baseUnitValue / 1000) / 1e6d;
                case ElectricConductivityUnit.MegasiemenPerMile: return (baseUnitValue / 1609) / 1e6d;
                case ElectricConductivityUnit.MegasiemensPerMeter: return (baseUnitValue) / 1e6d;
                case ElectricConductivityUnit.MicrosiemenPerFoot: return (baseUnitValue / 3.2808398950131234) / 1e-6d;
                case ElectricConductivityUnit.MicrosiemenPerInch: return (baseUnitValue / 3.937007874015748e1) / 1e-6d;
                case ElectricConductivityUnit.MicrosiemenPerKilofoot: return (baseUnitValue / 3.2808398950131234e3) / 1e-6d;
                case ElectricConductivityUnit.MicrosiemenPerKilometer: return (baseUnitValue / 1000) / 1e-6d;
                case ElectricConductivityUnit.MicrosiemenPerMile: return (baseUnitValue / 1609) / 1e-6d;
                case ElectricConductivityUnit.MicrosiemensPerMeter: return (baseUnitValue) / 1e-6d;
                case ElectricConductivityUnit.MillisiemenPerFoot: return (baseUnitValue / 3.2808398950131234) / 1e-3d;
                case ElectricConductivityUnit.MillisiemenPerInch: return (baseUnitValue / 3.937007874015748e1) / 1e-3d;
                case ElectricConductivityUnit.MillisiemenPerKilofoot: return (baseUnitValue / 3.2808398950131234e3) / 1e-3d;
                case ElectricConductivityUnit.MillisiemenPerKilometer: return (baseUnitValue / 1000) / 1e-3d;
                case ElectricConductivityUnit.MillisiemenPerMile: return (baseUnitValue / 1609) / 1e-3d;
                case ElectricConductivityUnit.MillisiemensPerMeter: return (baseUnitValue) / 1e-3d;
                case ElectricConductivityUnit.NanosiemenPerFoot: return (baseUnitValue / 3.2808398950131234) / 1e-9d;
                case ElectricConductivityUnit.NanosiemenPerInch: return (baseUnitValue / 3.937007874015748e1) / 1e-9d;
                case ElectricConductivityUnit.NanosiemenPerKilofoot: return (baseUnitValue / 3.2808398950131234e3) / 1e-9d;
                case ElectricConductivityUnit.NanosiemenPerKilometer: return (baseUnitValue / 1000) / 1e-9d;
                case ElectricConductivityUnit.NanosiemenPerMile: return (baseUnitValue / 1609) / 1e-9d;
                case ElectricConductivityUnit.NanosiemensPerMeter: return (baseUnitValue) / 1e-9d;
                case ElectricConductivityUnit.PicosiemenPerFoot: return (baseUnitValue / 3.2808398950131234) / 1e-12d;
                case ElectricConductivityUnit.PicosiemenPerInch: return (baseUnitValue / 3.937007874015748e1) / 1e-12d;
                case ElectricConductivityUnit.PicosiemenPerKilofoot: return (baseUnitValue / 3.2808398950131234e3) / 1e-12d;
                case ElectricConductivityUnit.PicosiemenPerKilometer: return (baseUnitValue / 1000) / 1e-12d;
                case ElectricConductivityUnit.PicosiemenPerMile: return (baseUnitValue / 1609) / 1e-12d;
                case ElectricConductivityUnit.PicosiemensPerMeter: return (baseUnitValue) / 1e-12d;
                case ElectricConductivityUnit.SiemenPerFoot: return baseUnitValue / 3.2808398950131234;
                case ElectricConductivityUnit.SiemenPerInch: return baseUnitValue / 3.937007874015748e1;
                case ElectricConductivityUnit.SiemenPerKilofoot: return baseUnitValue / 3.2808398950131234e3;
                case ElectricConductivityUnit.SiemenPerKilometer: return baseUnitValue / 1000;
                case ElectricConductivityUnit.SiemenPerMile: return baseUnitValue / 1609;
                case ElectricConductivityUnit.SiemensPerMeter: return baseUnitValue;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
