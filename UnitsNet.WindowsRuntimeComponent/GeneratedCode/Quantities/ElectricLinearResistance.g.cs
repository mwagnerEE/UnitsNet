//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Electrical linear resistance is a property of one dimensional conductors that represents the resistance per unit length.
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Electrical_resistivity_and_conductivity
    /// </remarks>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class ElectricLinearResistance : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly ElectricLinearResistanceUnit? _unit;

        static ElectricLinearResistance()
        {
            BaseDimensions = new BaseDimensions(1, 1, -3, -2, 0, 0, 0);
            BaseUnit = ElectricLinearResistanceUnit.OhmPerMeter;
            MaxValue = new ElectricLinearResistance(double.MaxValue, BaseUnit);
            MinValue = new ElectricLinearResistance(double.MinValue, BaseUnit);
            QuantityType = QuantityType.ElectricLinearResistance;
            Units = Enum.GetValues(typeof(ElectricLinearResistanceUnit)).Cast<ElectricLinearResistanceUnit>().Except(new ElectricLinearResistanceUnit[]{ ElectricLinearResistanceUnit.Undefined }).ToArray();
            Zero = new ElectricLinearResistance(0, BaseUnit);
            Info = new QuantityInfo(QuantityType.ElectricLinearResistance, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit OhmPerMeter.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public ElectricLinearResistance()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private ElectricLinearResistance(double value, ElectricLinearResistanceUnit unit)
        {
            if (unit == ElectricLinearResistanceUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of ElectricLinearResistance, which is OhmPerMeter. All conversions go via this value.
        /// </summary>
        public static ElectricLinearResistanceUnit BaseUnit { get; }

        /// <summary>
        /// Represents the largest possible value of ElectricLinearResistance
        /// </summary>
        public static ElectricLinearResistance MaxValue { get; }

        /// <summary>
        /// Represents the smallest possible value of ElectricLinearResistance
        /// </summary>
        public static ElectricLinearResistance MinValue { get; }

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public static QuantityType QuantityType { get; }

        /// <summary>
        ///     All units of measurement for the ElectricLinearResistance quantity.
        /// </summary>
        public static ElectricLinearResistanceUnit[] Units { get; }

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit OhmPerMeter.
        /// </summary>
        public static ElectricLinearResistance Zero { get; }

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public ElectricLinearResistanceUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public QuantityType Type => ElectricLinearResistance.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => ElectricLinearResistance.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.KiloohmPerCentimeter"/>
        /// </summary>
        public double KiloohmsPerCentimeter => As(ElectricLinearResistanceUnit.KiloohmPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.KiloohmPerFoot"/>
        /// </summary>
        public double KiloohmsPerFoot => As(ElectricLinearResistanceUnit.KiloohmPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.KiloohmPerKiloimeter"/>
        /// </summary>
        public double KiloohmsPerKilometer => As(ElectricLinearResistanceUnit.KiloohmPerKiloimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.KiloohmPerMeter"/>
        /// </summary>
        public double KiloohmsPerMeter => As(ElectricLinearResistanceUnit.KiloohmPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.KiloohmPerMile"/>
        /// </summary>
        public double KiloohmsPerMile => As(ElectricLinearResistanceUnit.KiloohmPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.MegaohmPerCentimeter"/>
        /// </summary>
        public double MegaohmsPerCentimeter => As(ElectricLinearResistanceUnit.MegaohmPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.MegaohmPerFoot"/>
        /// </summary>
        public double MegaohmsPerFoot => As(ElectricLinearResistanceUnit.MegaohmPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.MegaohmPerKiloimeter"/>
        /// </summary>
        public double MegaohmsPerKilometer => As(ElectricLinearResistanceUnit.MegaohmPerKiloimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.MegaohmPerMeter"/>
        /// </summary>
        public double MegaohmsPerMeter => As(ElectricLinearResistanceUnit.MegaohmPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.MegaohmPerMile"/>
        /// </summary>
        public double MegaohmsPerMile => As(ElectricLinearResistanceUnit.MegaohmPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.MicroohmPerCentimeter"/>
        /// </summary>
        public double MicroohmsPerCentimeter => As(ElectricLinearResistanceUnit.MicroohmPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.MicroohmPerFoot"/>
        /// </summary>
        public double MicroohmsPerFoot => As(ElectricLinearResistanceUnit.MicroohmPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.MicroohmPerKiloimeter"/>
        /// </summary>
        public double MicroohmsPerKilometer => As(ElectricLinearResistanceUnit.MicroohmPerKiloimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.MicroohmPerMeter"/>
        /// </summary>
        public double MicroohmsPerMeter => As(ElectricLinearResistanceUnit.MicroohmPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.MicroohmPerMile"/>
        /// </summary>
        public double MicroohmsPerMile => As(ElectricLinearResistanceUnit.MicroohmPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.MilliohmPerCentimeter"/>
        /// </summary>
        public double MilliohmsPerCentimeter => As(ElectricLinearResistanceUnit.MilliohmPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.MilliohmPerFoot"/>
        /// </summary>
        public double MilliohmsPerFoot => As(ElectricLinearResistanceUnit.MilliohmPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.MilliohmPerKiloimeter"/>
        /// </summary>
        public double MilliohmsPerKilometer => As(ElectricLinearResistanceUnit.MilliohmPerKiloimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.MilliohmPerMeter"/>
        /// </summary>
        public double MilliohmsPerMeter => As(ElectricLinearResistanceUnit.MilliohmPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.MilliohmPerMile"/>
        /// </summary>
        public double MilliohmsPerMile => As(ElectricLinearResistanceUnit.MilliohmPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.NanoohmPerCentimeter"/>
        /// </summary>
        public double NanoohmsPerCentimeter => As(ElectricLinearResistanceUnit.NanoohmPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.NanoohmPerFoot"/>
        /// </summary>
        public double NanoohmsPerFoot => As(ElectricLinearResistanceUnit.NanoohmPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.NanoohmPerKiloimeter"/>
        /// </summary>
        public double NanoohmsPerKilometer => As(ElectricLinearResistanceUnit.NanoohmPerKiloimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.NanoohmPerMeter"/>
        /// </summary>
        public double NanoohmsPerMeter => As(ElectricLinearResistanceUnit.NanoohmPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.NanoohmPerMile"/>
        /// </summary>
        public double NanoohmsPerMile => As(ElectricLinearResistanceUnit.NanoohmPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.OhmPerCentimeter"/>
        /// </summary>
        public double OhmsPerCentimeter => As(ElectricLinearResistanceUnit.OhmPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.OhmPerFoot"/>
        /// </summary>
        public double OhmsPerFoot => As(ElectricLinearResistanceUnit.OhmPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.OhmPerKiloimeter"/>
        /// </summary>
        public double OhmsPerKilometer => As(ElectricLinearResistanceUnit.OhmPerKiloimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.OhmPerMeter"/>
        /// </summary>
        public double OhmsPerMeter => As(ElectricLinearResistanceUnit.OhmPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.OhmPerMile"/>
        /// </summary>
        public double OhmsPerMile => As(ElectricLinearResistanceUnit.OhmPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.PicoohmPerCentimeter"/>
        /// </summary>
        public double PicoohmsPerCentimeter => As(ElectricLinearResistanceUnit.PicoohmPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.PicoohmPerFoot"/>
        /// </summary>
        public double PicoohmsPerFoot => As(ElectricLinearResistanceUnit.PicoohmPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.PicoohmPerKiloimeter"/>
        /// </summary>
        public double PicoohmsPerKilometer => As(ElectricLinearResistanceUnit.PicoohmPerKiloimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.PicoohmPerMeter"/>
        /// </summary>
        public double PicoohmsPerMeter => As(ElectricLinearResistanceUnit.PicoohmPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricLinearResistanceUnit.PicoohmPerMile"/>
        /// </summary>
        public double PicoohmsPerMile => As(ElectricLinearResistanceUnit.PicoohmPerMile);

        #endregion

        #region Static Methods

        internal static void MapGeneratedLocalizations(UnitAbbreviationsCache unitAbbreviationsCache)
        {
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.KiloohmPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"kΩ/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.KiloohmPerFoot, new CultureInfo("en-US"), false, true, new string[]{"kΩ/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.KiloohmPerKiloimeter, new CultureInfo("en-US"), false, true, new string[]{"kΩ/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.KiloohmPerMeter, new CultureInfo("en-US"), false, true, new string[]{"kΩ/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.KiloohmPerMile, new CultureInfo("en-US"), false, true, new string[]{"kΩ/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.MegaohmPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"MΩ/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.MegaohmPerFoot, new CultureInfo("en-US"), false, true, new string[]{"MΩ/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.MegaohmPerKiloimeter, new CultureInfo("en-US"), false, true, new string[]{"MΩ/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.MegaohmPerMeter, new CultureInfo("en-US"), false, true, new string[]{"MΩ/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.MegaohmPerMile, new CultureInfo("en-US"), false, true, new string[]{"MΩ/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.MicroohmPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"µΩ/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.MicroohmPerFoot, new CultureInfo("en-US"), false, true, new string[]{"µΩ/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.MicroohmPerKiloimeter, new CultureInfo("en-US"), false, true, new string[]{"µΩ/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.MicroohmPerMeter, new CultureInfo("en-US"), false, true, new string[]{"µΩ/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.MicroohmPerMile, new CultureInfo("en-US"), false, true, new string[]{"µΩ/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.MilliohmPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"mΩ/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.MilliohmPerFoot, new CultureInfo("en-US"), false, true, new string[]{"mΩ/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.MilliohmPerKiloimeter, new CultureInfo("en-US"), false, true, new string[]{"mΩ/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.MilliohmPerMeter, new CultureInfo("en-US"), false, true, new string[]{"mΩ/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.MilliohmPerMile, new CultureInfo("en-US"), false, true, new string[]{"mΩ/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.NanoohmPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"nΩ/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.NanoohmPerFoot, new CultureInfo("en-US"), false, true, new string[]{"nΩ/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.NanoohmPerKiloimeter, new CultureInfo("en-US"), false, true, new string[]{"nΩ/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.NanoohmPerMeter, new CultureInfo("en-US"), false, true, new string[]{"nΩ/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.NanoohmPerMile, new CultureInfo("en-US"), false, true, new string[]{"nΩ/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.OhmPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"Ω/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.OhmPerFoot, new CultureInfo("en-US"), false, true, new string[]{"Ω/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.OhmPerKiloimeter, new CultureInfo("en-US"), false, true, new string[]{"Ω/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.OhmPerMeter, new CultureInfo("en-US"), false, true, new string[]{"Ω/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.OhmPerMile, new CultureInfo("en-US"), false, true, new string[]{"Ω/mi"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.PicoohmPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"pΩ/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.PicoohmPerFoot, new CultureInfo("en-US"), false, true, new string[]{"pΩ/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.PicoohmPerKiloimeter, new CultureInfo("en-US"), false, true, new string[]{"pΩ/km"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.PicoohmPerMeter, new CultureInfo("en-US"), false, true, new string[]{"pΩ/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(ElectricLinearResistanceUnit.PicoohmPerMile, new CultureInfo("en-US"), false, true, new string[]{"pΩ/mi"});
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(ElectricLinearResistanceUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(ElectricLinearResistanceUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.KiloohmPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromKiloohmsPerCentimeter(double kiloohmspercentimeter)
        {
            double value = (double) kiloohmspercentimeter;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.KiloohmPerCentimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.KiloohmPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromKiloohmsPerFoot(double kiloohmsperfoot)
        {
            double value = (double) kiloohmsperfoot;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.KiloohmPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.KiloohmPerKiloimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromKiloohmsPerKilometer(double kiloohmsperkilometer)
        {
            double value = (double) kiloohmsperkilometer;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.KiloohmPerKiloimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.KiloohmPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromKiloohmsPerMeter(double kiloohmspermeter)
        {
            double value = (double) kiloohmspermeter;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.KiloohmPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.KiloohmPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromKiloohmsPerMile(double kiloohmspermile)
        {
            double value = (double) kiloohmspermile;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.KiloohmPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.MegaohmPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromMegaohmsPerCentimeter(double megaohmspercentimeter)
        {
            double value = (double) megaohmspercentimeter;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.MegaohmPerCentimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.MegaohmPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromMegaohmsPerFoot(double megaohmsperfoot)
        {
            double value = (double) megaohmsperfoot;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.MegaohmPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.MegaohmPerKiloimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromMegaohmsPerKilometer(double megaohmsperkilometer)
        {
            double value = (double) megaohmsperkilometer;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.MegaohmPerKiloimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.MegaohmPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromMegaohmsPerMeter(double megaohmspermeter)
        {
            double value = (double) megaohmspermeter;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.MegaohmPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.MegaohmPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromMegaohmsPerMile(double megaohmspermile)
        {
            double value = (double) megaohmspermile;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.MegaohmPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.MicroohmPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromMicroohmsPerCentimeter(double microohmspercentimeter)
        {
            double value = (double) microohmspercentimeter;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.MicroohmPerCentimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.MicroohmPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromMicroohmsPerFoot(double microohmsperfoot)
        {
            double value = (double) microohmsperfoot;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.MicroohmPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.MicroohmPerKiloimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromMicroohmsPerKilometer(double microohmsperkilometer)
        {
            double value = (double) microohmsperkilometer;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.MicroohmPerKiloimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.MicroohmPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromMicroohmsPerMeter(double microohmspermeter)
        {
            double value = (double) microohmspermeter;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.MicroohmPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.MicroohmPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromMicroohmsPerMile(double microohmspermile)
        {
            double value = (double) microohmspermile;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.MicroohmPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.MilliohmPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromMilliohmsPerCentimeter(double milliohmspercentimeter)
        {
            double value = (double) milliohmspercentimeter;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.MilliohmPerCentimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.MilliohmPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromMilliohmsPerFoot(double milliohmsperfoot)
        {
            double value = (double) milliohmsperfoot;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.MilliohmPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.MilliohmPerKiloimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromMilliohmsPerKilometer(double milliohmsperkilometer)
        {
            double value = (double) milliohmsperkilometer;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.MilliohmPerKiloimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.MilliohmPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromMilliohmsPerMeter(double milliohmspermeter)
        {
            double value = (double) milliohmspermeter;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.MilliohmPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.MilliohmPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromMilliohmsPerMile(double milliohmspermile)
        {
            double value = (double) milliohmspermile;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.MilliohmPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.NanoohmPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromNanoohmsPerCentimeter(double nanoohmspercentimeter)
        {
            double value = (double) nanoohmspercentimeter;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.NanoohmPerCentimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.NanoohmPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromNanoohmsPerFoot(double nanoohmsperfoot)
        {
            double value = (double) nanoohmsperfoot;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.NanoohmPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.NanoohmPerKiloimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromNanoohmsPerKilometer(double nanoohmsperkilometer)
        {
            double value = (double) nanoohmsperkilometer;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.NanoohmPerKiloimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.NanoohmPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromNanoohmsPerMeter(double nanoohmspermeter)
        {
            double value = (double) nanoohmspermeter;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.NanoohmPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.NanoohmPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromNanoohmsPerMile(double nanoohmspermile)
        {
            double value = (double) nanoohmspermile;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.NanoohmPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.OhmPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromOhmsPerCentimeter(double ohmspercentimeter)
        {
            double value = (double) ohmspercentimeter;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.OhmPerCentimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.OhmPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromOhmsPerFoot(double ohmsperfoot)
        {
            double value = (double) ohmsperfoot;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.OhmPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.OhmPerKiloimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromOhmsPerKilometer(double ohmsperkilometer)
        {
            double value = (double) ohmsperkilometer;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.OhmPerKiloimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.OhmPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromOhmsPerMeter(double ohmspermeter)
        {
            double value = (double) ohmspermeter;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.OhmPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.OhmPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromOhmsPerMile(double ohmspermile)
        {
            double value = (double) ohmspermile;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.OhmPerMile);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.PicoohmPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromPicoohmsPerCentimeter(double picoohmspercentimeter)
        {
            double value = (double) picoohmspercentimeter;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.PicoohmPerCentimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.PicoohmPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromPicoohmsPerFoot(double picoohmsperfoot)
        {
            double value = (double) picoohmsperfoot;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.PicoohmPerFoot);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.PicoohmPerKiloimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromPicoohmsPerKilometer(double picoohmsperkilometer)
        {
            double value = (double) picoohmsperkilometer;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.PicoohmPerKiloimeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.PicoohmPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromPicoohmsPerMeter(double picoohmspermeter)
        {
            double value = (double) picoohmspermeter;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.PicoohmPerMeter);
        }
        /// <summary>
        ///     Creates a <see cref="ElectricLinearResistance"/> from <see cref="ElectricLinearResistanceUnit.PicoohmPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricLinearResistance FromPicoohmsPerMile(double picoohmspermile)
        {
            double value = (double) picoohmspermile;
            return new ElectricLinearResistance(value, ElectricLinearResistanceUnit.PicoohmPerMile);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElectricLinearResistanceUnit" /> to <see cref="ElectricLinearResistance" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ElectricLinearResistance unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static ElectricLinearResistance From(double value, ElectricLinearResistanceUnit fromUnit)
        {
            return new ElectricLinearResistance((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static ElectricLinearResistance Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static ElectricLinearResistance Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<ElectricLinearResistance, ElectricLinearResistanceUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out ElectricLinearResistance result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out ElectricLinearResistance result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<ElectricLinearResistance, ElectricLinearResistanceUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ElectricLinearResistanceUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static ElectricLinearResistanceUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<ElectricLinearResistanceUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out ElectricLinearResistanceUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out ElectricLinearResistanceUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<ElectricLinearResistanceUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj is null) throw new ArgumentNullException(nameof(obj));
            if (!(obj is ElectricLinearResistance objElectricLinearResistance)) throw new ArgumentException("Expected type ElectricLinearResistance.", nameof(obj));

            return CompareTo(objElectricLinearResistance);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(ElectricLinearResistance other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if (obj is null || !(obj is ElectricLinearResistance objElectricLinearResistance))
                return false;

            return Equals(objElectricLinearResistance);
        }

        public bool Equals(ElectricLinearResistance other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another ElectricLinearResistance within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(ElectricLinearResistance other, double tolerance, ComparisonType comparisonType)
        {
            if (tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current ElectricLinearResistance.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((ElectricLinearResistanceUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(ElectricLinearResistanceUnit unit)
        {
            if (Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this ElectricLinearResistance to another ElectricLinearResistance with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A ElectricLinearResistance with the specified unit.</returns>
        public ElectricLinearResistance ToUnit(ElectricLinearResistanceUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new ElectricLinearResistance(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case ElectricLinearResistanceUnit.KiloohmPerCentimeter: return (_value / 100) * 1e3d;
                case ElectricLinearResistanceUnit.KiloohmPerFoot: return (_value / 3.281) * 1e3d;
                case ElectricLinearResistanceUnit.KiloohmPerKiloimeter: return (_value * 1000) * 1e3d;
                case ElectricLinearResistanceUnit.KiloohmPerMeter: return (_value) * 1e3d;
                case ElectricLinearResistanceUnit.KiloohmPerMile: return (_value * 1609) * 1e3d;
                case ElectricLinearResistanceUnit.MegaohmPerCentimeter: return (_value / 100) * 1e6d;
                case ElectricLinearResistanceUnit.MegaohmPerFoot: return (_value / 3.281) * 1e6d;
                case ElectricLinearResistanceUnit.MegaohmPerKiloimeter: return (_value * 1000) * 1e6d;
                case ElectricLinearResistanceUnit.MegaohmPerMeter: return (_value) * 1e6d;
                case ElectricLinearResistanceUnit.MegaohmPerMile: return (_value * 1609) * 1e6d;
                case ElectricLinearResistanceUnit.MicroohmPerCentimeter: return (_value / 100) * 1e-6d;
                case ElectricLinearResistanceUnit.MicroohmPerFoot: return (_value / 3.281) * 1e-6d;
                case ElectricLinearResistanceUnit.MicroohmPerKiloimeter: return (_value * 1000) * 1e-6d;
                case ElectricLinearResistanceUnit.MicroohmPerMeter: return (_value) * 1e-6d;
                case ElectricLinearResistanceUnit.MicroohmPerMile: return (_value * 1609) * 1e-6d;
                case ElectricLinearResistanceUnit.MilliohmPerCentimeter: return (_value / 100) * 1e-3d;
                case ElectricLinearResistanceUnit.MilliohmPerFoot: return (_value / 3.281) * 1e-3d;
                case ElectricLinearResistanceUnit.MilliohmPerKiloimeter: return (_value * 1000) * 1e-3d;
                case ElectricLinearResistanceUnit.MilliohmPerMeter: return (_value) * 1e-3d;
                case ElectricLinearResistanceUnit.MilliohmPerMile: return (_value * 1609) * 1e-3d;
                case ElectricLinearResistanceUnit.NanoohmPerCentimeter: return (_value / 100) * 1e-9d;
                case ElectricLinearResistanceUnit.NanoohmPerFoot: return (_value / 3.281) * 1e-9d;
                case ElectricLinearResistanceUnit.NanoohmPerKiloimeter: return (_value * 1000) * 1e-9d;
                case ElectricLinearResistanceUnit.NanoohmPerMeter: return (_value) * 1e-9d;
                case ElectricLinearResistanceUnit.NanoohmPerMile: return (_value * 1609) * 1e-9d;
                case ElectricLinearResistanceUnit.OhmPerCentimeter: return _value / 100;
                case ElectricLinearResistanceUnit.OhmPerFoot: return _value / 3.281;
                case ElectricLinearResistanceUnit.OhmPerKiloimeter: return _value * 1000;
                case ElectricLinearResistanceUnit.OhmPerMeter: return _value;
                case ElectricLinearResistanceUnit.OhmPerMile: return _value * 1609;
                case ElectricLinearResistanceUnit.PicoohmPerCentimeter: return (_value / 100) * 1e-12d;
                case ElectricLinearResistanceUnit.PicoohmPerFoot: return (_value / 3.281) * 1e-12d;
                case ElectricLinearResistanceUnit.PicoohmPerKiloimeter: return (_value * 1000) * 1e-12d;
                case ElectricLinearResistanceUnit.PicoohmPerMeter: return (_value) * 1e-12d;
                case ElectricLinearResistanceUnit.PicoohmPerMile: return (_value * 1609) * 1e-12d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(ElectricLinearResistanceUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case ElectricLinearResistanceUnit.KiloohmPerCentimeter: return (baseUnitValue * 100) / 1e3d;
                case ElectricLinearResistanceUnit.KiloohmPerFoot: return (baseUnitValue * 3.281) / 1e3d;
                case ElectricLinearResistanceUnit.KiloohmPerKiloimeter: return (baseUnitValue / 1000) / 1e3d;
                case ElectricLinearResistanceUnit.KiloohmPerMeter: return (baseUnitValue) / 1e3d;
                case ElectricLinearResistanceUnit.KiloohmPerMile: return (baseUnitValue / 1609) / 1e3d;
                case ElectricLinearResistanceUnit.MegaohmPerCentimeter: return (baseUnitValue * 100) / 1e6d;
                case ElectricLinearResistanceUnit.MegaohmPerFoot: return (baseUnitValue * 3.281) / 1e6d;
                case ElectricLinearResistanceUnit.MegaohmPerKiloimeter: return (baseUnitValue / 1000) / 1e6d;
                case ElectricLinearResistanceUnit.MegaohmPerMeter: return (baseUnitValue) / 1e6d;
                case ElectricLinearResistanceUnit.MegaohmPerMile: return (baseUnitValue / 1609) / 1e6d;
                case ElectricLinearResistanceUnit.MicroohmPerCentimeter: return (baseUnitValue * 100) / 1e-6d;
                case ElectricLinearResistanceUnit.MicroohmPerFoot: return (baseUnitValue * 3.281) / 1e-6d;
                case ElectricLinearResistanceUnit.MicroohmPerKiloimeter: return (baseUnitValue / 1000) / 1e-6d;
                case ElectricLinearResistanceUnit.MicroohmPerMeter: return (baseUnitValue) / 1e-6d;
                case ElectricLinearResistanceUnit.MicroohmPerMile: return (baseUnitValue / 1609) / 1e-6d;
                case ElectricLinearResistanceUnit.MilliohmPerCentimeter: return (baseUnitValue * 100) / 1e-3d;
                case ElectricLinearResistanceUnit.MilliohmPerFoot: return (baseUnitValue * 3.281) / 1e-3d;
                case ElectricLinearResistanceUnit.MilliohmPerKiloimeter: return (baseUnitValue / 1000) / 1e-3d;
                case ElectricLinearResistanceUnit.MilliohmPerMeter: return (baseUnitValue) / 1e-3d;
                case ElectricLinearResistanceUnit.MilliohmPerMile: return (baseUnitValue / 1609) / 1e-3d;
                case ElectricLinearResistanceUnit.NanoohmPerCentimeter: return (baseUnitValue * 100) / 1e-9d;
                case ElectricLinearResistanceUnit.NanoohmPerFoot: return (baseUnitValue * 3.281) / 1e-9d;
                case ElectricLinearResistanceUnit.NanoohmPerKiloimeter: return (baseUnitValue / 1000) / 1e-9d;
                case ElectricLinearResistanceUnit.NanoohmPerMeter: return (baseUnitValue) / 1e-9d;
                case ElectricLinearResistanceUnit.NanoohmPerMile: return (baseUnitValue / 1609) / 1e-9d;
                case ElectricLinearResistanceUnit.OhmPerCentimeter: return baseUnitValue * 100;
                case ElectricLinearResistanceUnit.OhmPerFoot: return baseUnitValue * 3.281;
                case ElectricLinearResistanceUnit.OhmPerKiloimeter: return baseUnitValue / 1000;
                case ElectricLinearResistanceUnit.OhmPerMeter: return baseUnitValue;
                case ElectricLinearResistanceUnit.OhmPerMile: return baseUnitValue / 1609;
                case ElectricLinearResistanceUnit.PicoohmPerCentimeter: return (baseUnitValue * 100) / 1e-12d;
                case ElectricLinearResistanceUnit.PicoohmPerFoot: return (baseUnitValue * 3.281) / 1e-12d;
                case ElectricLinearResistanceUnit.PicoohmPerKiloimeter: return (baseUnitValue / 1000) / 1e-12d;
                case ElectricLinearResistanceUnit.PicoohmPerMeter: return (baseUnitValue) / 1e-12d;
                case ElectricLinearResistanceUnit.PicoohmPerMile: return (baseUnitValue / 1609) / 1e-12d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
