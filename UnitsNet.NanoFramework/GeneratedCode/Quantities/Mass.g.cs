//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In physics, mass (from Greek μᾶζα "barley cake, lump [of dough]") is a property of a physical system or body, giving rise to the phenomena of the body's resistance to being accelerated by a force and the strength of its mutual gravitational attraction with other bodies. Instruments such as mass balances or scales use those phenomena to measure mass. The SI unit of mass is the kilogram (kg).
    /// </summary>
    public struct  Mass
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly QuantityValue _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly MassUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public QuantityValue Value => _value;

        /// <inheritdoc />
        public MassUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Mass(QuantityValue value, MassUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static MassUnit BaseUnit { get; } = MassUnit.Kilogram;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static Mass MaxValue { get; } = new Mass(QuantityValue.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static Mass MinValue { get; } = new Mass(QuantityValue.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Mass Zero { get; } = new Mass(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Centigram"/>
        /// </summary>
        public QuantityValue Centigrams => As(MassUnit.Centigram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Decagram"/>
        /// </summary>
        public QuantityValue Decagrams => As(MassUnit.Decagram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Decigram"/>
        /// </summary>
        public QuantityValue Decigrams => As(MassUnit.Decigram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.EarthMass"/>
        /// </summary>
        public QuantityValue EarthMasses => As(MassUnit.EarthMass);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Grain"/>
        /// </summary>
        public QuantityValue Grains => As(MassUnit.Grain);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Gram"/>
        /// </summary>
        public QuantityValue Grams => As(MassUnit.Gram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Hectogram"/>
        /// </summary>
        public QuantityValue Hectograms => As(MassUnit.Hectogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Kilogram"/>
        /// </summary>
        public QuantityValue Kilograms => As(MassUnit.Kilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Kilopound"/>
        /// </summary>
        public QuantityValue Kilopounds => As(MassUnit.Kilopound);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Kilotonne"/>
        /// </summary>
        public QuantityValue Kilotonnes => As(MassUnit.Kilotonne);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.LongHundredweight"/>
        /// </summary>
        public QuantityValue LongHundredweight => As(MassUnit.LongHundredweight);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.LongTon"/>
        /// </summary>
        public QuantityValue LongTons => As(MassUnit.LongTon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Megapound"/>
        /// </summary>
        public QuantityValue Megapounds => As(MassUnit.Megapound);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Megatonne"/>
        /// </summary>
        public QuantityValue Megatonnes => As(MassUnit.Megatonne);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Microgram"/>
        /// </summary>
        public QuantityValue Micrograms => As(MassUnit.Microgram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Milligram"/>
        /// </summary>
        public QuantityValue Milligrams => As(MassUnit.Milligram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Nanogram"/>
        /// </summary>
        public QuantityValue Nanograms => As(MassUnit.Nanogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Ounce"/>
        /// </summary>
        public QuantityValue Ounces => As(MassUnit.Ounce);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Pound"/>
        /// </summary>
        public QuantityValue Pounds => As(MassUnit.Pound);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.ShortHundredweight"/>
        /// </summary>
        public QuantityValue ShortHundredweight => As(MassUnit.ShortHundredweight);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.ShortTon"/>
        /// </summary>
        public QuantityValue ShortTons => As(MassUnit.ShortTon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Slug"/>
        /// </summary>
        public QuantityValue Slugs => As(MassUnit.Slug);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.SolarMass"/>
        /// </summary>
        public QuantityValue SolarMasses => As(MassUnit.SolarMass);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Stone"/>
        /// </summary>
        public QuantityValue Stone => As(MassUnit.Stone);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassUnit.Tonne"/>
        /// </summary>
        public QuantityValue Tonnes => As(MassUnit.Tonne);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Centigram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromCentigrams(QuantityValue centigrams) => new Mass(centigrams, MassUnit.Centigram);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Decagram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromDecagrams(QuantityValue decagrams) => new Mass(decagrams, MassUnit.Decagram);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Decigram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromDecigrams(QuantityValue decigrams) => new Mass(decigrams, MassUnit.Decigram);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.EarthMass"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromEarthMasses(QuantityValue earthmasses) => new Mass(earthmasses, MassUnit.EarthMass);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Grain"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromGrains(QuantityValue grains) => new Mass(grains, MassUnit.Grain);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Gram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromGrams(QuantityValue grams) => new Mass(grams, MassUnit.Gram);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Hectogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromHectograms(QuantityValue hectograms) => new Mass(hectograms, MassUnit.Hectogram);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Kilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromKilograms(QuantityValue kilograms) => new Mass(kilograms, MassUnit.Kilogram);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Kilopound"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromKilopounds(QuantityValue kilopounds) => new Mass(kilopounds, MassUnit.Kilopound);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Kilotonne"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromKilotonnes(QuantityValue kilotonnes) => new Mass(kilotonnes, MassUnit.Kilotonne);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.LongHundredweight"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromLongHundredweight(QuantityValue longhundredweight) => new Mass(longhundredweight, MassUnit.LongHundredweight);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.LongTon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromLongTons(QuantityValue longtons) => new Mass(longtons, MassUnit.LongTon);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Megapound"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromMegapounds(QuantityValue megapounds) => new Mass(megapounds, MassUnit.Megapound);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Megatonne"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromMegatonnes(QuantityValue megatonnes) => new Mass(megatonnes, MassUnit.Megatonne);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Microgram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromMicrograms(QuantityValue micrograms) => new Mass(micrograms, MassUnit.Microgram);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Milligram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromMilligrams(QuantityValue milligrams) => new Mass(milligrams, MassUnit.Milligram);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Nanogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromNanograms(QuantityValue nanograms) => new Mass(nanograms, MassUnit.Nanogram);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Ounce"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromOunces(QuantityValue ounces) => new Mass(ounces, MassUnit.Ounce);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Pound"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromPounds(QuantityValue pounds) => new Mass(pounds, MassUnit.Pound);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.ShortHundredweight"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromShortHundredweight(QuantityValue shorthundredweight) => new Mass(shorthundredweight, MassUnit.ShortHundredweight);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.ShortTon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromShortTons(QuantityValue shorttons) => new Mass(shorttons, MassUnit.ShortTon);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Slug"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromSlugs(QuantityValue slugs) => new Mass(slugs, MassUnit.Slug);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.SolarMass"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromSolarMasses(QuantityValue solarmasses) => new Mass(solarmasses, MassUnit.SolarMass);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Stone"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromStone(QuantityValue stone) => new Mass(stone, MassUnit.Stone);

        /// <summary>
        ///     Creates a <see cref="Mass"/> from <see cref="MassUnit.Tonne"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromTonnes(QuantityValue tonnes) => new Mass(tonnes, MassUnit.Tonne);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MassUnit" /> to <see cref="Mass" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Mass unit value.</returns>
        public static Mass From(QuantityValue value, MassUnit fromUnit)
        {
            return new Mass(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public QuantityValue As(MassUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public Mass ToUnit(MassUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Mass(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private QuantityValue GetValueInBaseUnit()
        {
            return Unit switch
            {
                MassUnit.Centigram => (_value / 1e3) * 1e-2d,
                MassUnit.Decagram => (_value / 1e3) * 1e1d,
                MassUnit.Decigram => (_value / 1e3) * 1e-1d,
                MassUnit.EarthMass => _value * 5.9722E+24,
                MassUnit.Grain => _value / 15432.358352941431,
                MassUnit.Gram => _value / 1e3,
                MassUnit.Hectogram => (_value / 1e3) * 1e2d,
                MassUnit.Kilogram => (_value / 1e3) * 1e3d,
                MassUnit.Kilopound => (_value * 0.45359237) * 1e3d,
                MassUnit.Kilotonne => (_value * 1e3) * 1e3d,
                MassUnit.LongHundredweight => _value / 0.01968413055222121,
                MassUnit.LongTon => _value * 1.0160469088e3,
                MassUnit.Megapound => (_value * 0.45359237) * 1e6d,
                MassUnit.Megatonne => (_value * 1e3) * 1e6d,
                MassUnit.Microgram => (_value / 1e3) * 1e-6d,
                MassUnit.Milligram => (_value / 1e3) * 1e-3d,
                MassUnit.Nanogram => (_value / 1e3) * 1e-9d,
                MassUnit.Ounce => _value / 35.2739619,
                MassUnit.Pound => _value * 0.45359237,
                MassUnit.ShortHundredweight => _value / 0.022046226218487758,
                MassUnit.ShortTon => _value * 9.0718474e2,
                MassUnit.Slug => _value / 6.852176556196105e-2,
                MassUnit.SolarMass => _value * 1.98947e30,
                MassUnit.Stone => _value / 0.1574731728702698,
                MassUnit.Tonne => _value * 1e3,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private QuantityValue GetValueAs(MassUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                MassUnit.Centigram => (baseUnitValue * 1e3) / 1e-2d,
                MassUnit.Decagram => (baseUnitValue * 1e3) / 1e1d,
                MassUnit.Decigram => (baseUnitValue * 1e3) / 1e-1d,
                MassUnit.EarthMass => baseUnitValue / 5.9722E+24,
                MassUnit.Grain => baseUnitValue * 15432.358352941431,
                MassUnit.Gram => baseUnitValue * 1e3,
                MassUnit.Hectogram => (baseUnitValue * 1e3) / 1e2d,
                MassUnit.Kilogram => (baseUnitValue * 1e3) / 1e3d,
                MassUnit.Kilopound => (baseUnitValue / 0.45359237) / 1e3d,
                MassUnit.Kilotonne => (baseUnitValue / 1e3) / 1e3d,
                MassUnit.LongHundredweight => baseUnitValue * 0.01968413055222121,
                MassUnit.LongTon => baseUnitValue / 1.0160469088e3,
                MassUnit.Megapound => (baseUnitValue / 0.45359237) / 1e6d,
                MassUnit.Megatonne => (baseUnitValue / 1e3) / 1e6d,
                MassUnit.Microgram => (baseUnitValue * 1e3) / 1e-6d,
                MassUnit.Milligram => (baseUnitValue * 1e3) / 1e-3d,
                MassUnit.Nanogram => (baseUnitValue * 1e3) / 1e-9d,
                MassUnit.Ounce => baseUnitValue * 35.2739619,
                MassUnit.Pound => baseUnitValue / 0.45359237,
                MassUnit.ShortHundredweight => baseUnitValue * 0.022046226218487758,
                MassUnit.ShortTon => baseUnitValue / 9.0718474e2,
                MassUnit.Slug => baseUnitValue * 6.852176556196105e-2,
                MassUnit.SolarMass => baseUnitValue / 1.98947e30,
                MassUnit.Stone => baseUnitValue * 0.1574731728702698,
                MassUnit.Tonne => baseUnitValue / 1e3,
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion

    }
}

