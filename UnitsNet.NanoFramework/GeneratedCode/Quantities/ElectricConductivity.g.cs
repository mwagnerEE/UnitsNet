//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Electrical conductivity or specific conductance is the reciprocal of electrical resistivity, and measures a material's ability to conduct an electric current.
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Electrical_resistivity_and_conductivity
    /// </remarks>
    public struct  ElectricConductivity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly QuantityValue _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly ElectricConductivityUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public QuantityValue Value => _value;

        /// <inheritdoc />
        public ElectricConductivityUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public ElectricConductivity(QuantityValue value, ElectricConductivityUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static ElectricConductivityUnit BaseUnit { get; } = ElectricConductivityUnit.SiemensPerMeter;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static ElectricConductivity MaxValue { get; } = new ElectricConductivity(QuantityValue.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static ElectricConductivity MinValue { get; } = new ElectricConductivity(QuantityValue.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static ElectricConductivity Zero { get; } = new ElectricConductivity(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.KilosiemenPerFoot"/>
        /// </summary>
        public QuantityValue KilosiemensPerFoot => As(ElectricConductivityUnit.KilosiemenPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.KilosiemenPerInch"/>
        /// </summary>
        public QuantityValue KilosiemensPerInch => As(ElectricConductivityUnit.KilosiemenPerInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.KilosiemenPerKilofoot"/>
        /// </summary>
        public QuantityValue KilosiemensPerKilofoot => As(ElectricConductivityUnit.KilosiemenPerKilofoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.KilosiemenPerKilometer"/>
        /// </summary>
        public QuantityValue KilosiemensPerKilometer => As(ElectricConductivityUnit.KilosiemenPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.KilosiemenPerMile"/>
        /// </summary>
        public QuantityValue KilosiemensPerMile => As(ElectricConductivityUnit.KilosiemenPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.KilosiemensPerMeter"/>
        /// </summary>
        public QuantityValue KilosiemensPerMeter => As(ElectricConductivityUnit.KilosiemensPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MegasiemenPerFoot"/>
        /// </summary>
        public QuantityValue MegasiemensPerFoot => As(ElectricConductivityUnit.MegasiemenPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MegasiemenPerInch"/>
        /// </summary>
        public QuantityValue MegasiemensPerInch => As(ElectricConductivityUnit.MegasiemenPerInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MegasiemenPerKilofoot"/>
        /// </summary>
        public QuantityValue MegasiemensPerKilofoot => As(ElectricConductivityUnit.MegasiemenPerKilofoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MegasiemenPerKilometer"/>
        /// </summary>
        public QuantityValue MegasiemensPerKilometer => As(ElectricConductivityUnit.MegasiemenPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MegasiemenPerMile"/>
        /// </summary>
        public QuantityValue MegasiemensPerMile => As(ElectricConductivityUnit.MegasiemenPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MegasiemensPerMeter"/>
        /// </summary>
        public QuantityValue MegasiemensPerMeter => As(ElectricConductivityUnit.MegasiemensPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MicrosiemenPerFoot"/>
        /// </summary>
        public QuantityValue MicrosiemensPerFoot => As(ElectricConductivityUnit.MicrosiemenPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MicrosiemenPerInch"/>
        /// </summary>
        public QuantityValue MicrosiemensPerInch => As(ElectricConductivityUnit.MicrosiemenPerInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MicrosiemenPerKilofoot"/>
        /// </summary>
        public QuantityValue MicrosiemensPerKilofoot => As(ElectricConductivityUnit.MicrosiemenPerKilofoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MicrosiemenPerKilometer"/>
        /// </summary>
        public QuantityValue MicrosiemensPerKilometer => As(ElectricConductivityUnit.MicrosiemenPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MicrosiemenPerMile"/>
        /// </summary>
        public QuantityValue MicrosiemensPerMile => As(ElectricConductivityUnit.MicrosiemenPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MicrosiemensPerMeter"/>
        /// </summary>
        public QuantityValue MicrosiemensPerMeter => As(ElectricConductivityUnit.MicrosiemensPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MillisiemenPerFoot"/>
        /// </summary>
        public QuantityValue MillisiemensPerFoot => As(ElectricConductivityUnit.MillisiemenPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MillisiemenPerInch"/>
        /// </summary>
        public QuantityValue MillisiemensPerInch => As(ElectricConductivityUnit.MillisiemenPerInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MillisiemenPerKilofoot"/>
        /// </summary>
        public QuantityValue MillisiemensPerKilofoot => As(ElectricConductivityUnit.MillisiemenPerKilofoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MillisiemenPerKilometer"/>
        /// </summary>
        public QuantityValue MillisiemensPerKilometer => As(ElectricConductivityUnit.MillisiemenPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MillisiemenPerMile"/>
        /// </summary>
        public QuantityValue MillisiemensPerMile => As(ElectricConductivityUnit.MillisiemenPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.MillisiemensPerMeter"/>
        /// </summary>
        public QuantityValue MillisiemensPerMeter => As(ElectricConductivityUnit.MillisiemensPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.NanosiemenPerFoot"/>
        /// </summary>
        public QuantityValue NanosiemensPerFoot => As(ElectricConductivityUnit.NanosiemenPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.NanosiemenPerInch"/>
        /// </summary>
        public QuantityValue NanosiemensPerInch => As(ElectricConductivityUnit.NanosiemenPerInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.NanosiemenPerKilofoot"/>
        /// </summary>
        public QuantityValue NanosiemensPerKilofoot => As(ElectricConductivityUnit.NanosiemenPerKilofoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.NanosiemenPerKilometer"/>
        /// </summary>
        public QuantityValue NanosiemensPerKilometer => As(ElectricConductivityUnit.NanosiemenPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.NanosiemenPerMile"/>
        /// </summary>
        public QuantityValue NanosiemensPerMile => As(ElectricConductivityUnit.NanosiemenPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.NanosiemensPerMeter"/>
        /// </summary>
        public QuantityValue NanosiemensPerMeter => As(ElectricConductivityUnit.NanosiemensPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.PicosiemenPerFoot"/>
        /// </summary>
        public QuantityValue PicosiemensPerFoot => As(ElectricConductivityUnit.PicosiemenPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.PicosiemenPerInch"/>
        /// </summary>
        public QuantityValue PicosiemensPerInch => As(ElectricConductivityUnit.PicosiemenPerInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.PicosiemenPerKilofoot"/>
        /// </summary>
        public QuantityValue PicosiemensPerKilofoot => As(ElectricConductivityUnit.PicosiemenPerKilofoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.PicosiemenPerKilometer"/>
        /// </summary>
        public QuantityValue PicosiemensPerKilometer => As(ElectricConductivityUnit.PicosiemenPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.PicosiemenPerMile"/>
        /// </summary>
        public QuantityValue PicosiemensPerMile => As(ElectricConductivityUnit.PicosiemenPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.PicosiemensPerMeter"/>
        /// </summary>
        public QuantityValue PicosiemensPerMeter => As(ElectricConductivityUnit.PicosiemensPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.SiemenPerFoot"/>
        /// </summary>
        public QuantityValue SiemensPerFoot => As(ElectricConductivityUnit.SiemenPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.SiemenPerInch"/>
        /// </summary>
        public QuantityValue SiemensPerInch => As(ElectricConductivityUnit.SiemenPerInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.SiemenPerKilofoot"/>
        /// </summary>
        public QuantityValue SiemensPerKilofoot => As(ElectricConductivityUnit.SiemenPerKilofoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.SiemenPerKilometer"/>
        /// </summary>
        public QuantityValue SiemensPerKilometer => As(ElectricConductivityUnit.SiemenPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.SiemenPerMile"/>
        /// </summary>
        public QuantityValue SiemensPerMile => As(ElectricConductivityUnit.SiemenPerMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductivityUnit.SiemensPerMeter"/>
        /// </summary>
        public QuantityValue SiemensPerMeter => As(ElectricConductivityUnit.SiemensPerMeter);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.KilosiemenPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromKilosiemensPerFoot(QuantityValue kilosiemensperfoot) => new ElectricConductivity(kilosiemensperfoot, ElectricConductivityUnit.KilosiemenPerFoot);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.KilosiemenPerInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromKilosiemensPerInch(QuantityValue kilosiemensperinch) => new ElectricConductivity(kilosiemensperinch, ElectricConductivityUnit.KilosiemenPerInch);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.KilosiemenPerKilofoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromKilosiemensPerKilofoot(QuantityValue kilosiemensperkilofoot) => new ElectricConductivity(kilosiemensperkilofoot, ElectricConductivityUnit.KilosiemenPerKilofoot);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.KilosiemenPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromKilosiemensPerKilometer(QuantityValue kilosiemensperkilometer) => new ElectricConductivity(kilosiemensperkilometer, ElectricConductivityUnit.KilosiemenPerKilometer);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.KilosiemenPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromKilosiemensPerMile(QuantityValue kilosiemenspermile) => new ElectricConductivity(kilosiemenspermile, ElectricConductivityUnit.KilosiemenPerMile);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.KilosiemensPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromKilosiemensPerMeter(QuantityValue kilosiemenspermeter) => new ElectricConductivity(kilosiemenspermeter, ElectricConductivityUnit.KilosiemensPerMeter);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MegasiemenPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromMegasiemensPerFoot(QuantityValue megasiemensperfoot) => new ElectricConductivity(megasiemensperfoot, ElectricConductivityUnit.MegasiemenPerFoot);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MegasiemenPerInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromMegasiemensPerInch(QuantityValue megasiemensperinch) => new ElectricConductivity(megasiemensperinch, ElectricConductivityUnit.MegasiemenPerInch);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MegasiemenPerKilofoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromMegasiemensPerKilofoot(QuantityValue megasiemensperkilofoot) => new ElectricConductivity(megasiemensperkilofoot, ElectricConductivityUnit.MegasiemenPerKilofoot);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MegasiemenPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromMegasiemensPerKilometer(QuantityValue megasiemensperkilometer) => new ElectricConductivity(megasiemensperkilometer, ElectricConductivityUnit.MegasiemenPerKilometer);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MegasiemenPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromMegasiemensPerMile(QuantityValue megasiemenspermile) => new ElectricConductivity(megasiemenspermile, ElectricConductivityUnit.MegasiemenPerMile);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MegasiemensPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromMegasiemensPerMeter(QuantityValue megasiemenspermeter) => new ElectricConductivity(megasiemenspermeter, ElectricConductivityUnit.MegasiemensPerMeter);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MicrosiemenPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromMicrosiemensPerFoot(QuantityValue microsiemensperfoot) => new ElectricConductivity(microsiemensperfoot, ElectricConductivityUnit.MicrosiemenPerFoot);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MicrosiemenPerInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromMicrosiemensPerInch(QuantityValue microsiemensperinch) => new ElectricConductivity(microsiemensperinch, ElectricConductivityUnit.MicrosiemenPerInch);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MicrosiemenPerKilofoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromMicrosiemensPerKilofoot(QuantityValue microsiemensperkilofoot) => new ElectricConductivity(microsiemensperkilofoot, ElectricConductivityUnit.MicrosiemenPerKilofoot);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MicrosiemenPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromMicrosiemensPerKilometer(QuantityValue microsiemensperkilometer) => new ElectricConductivity(microsiemensperkilometer, ElectricConductivityUnit.MicrosiemenPerKilometer);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MicrosiemenPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromMicrosiemensPerMile(QuantityValue microsiemenspermile) => new ElectricConductivity(microsiemenspermile, ElectricConductivityUnit.MicrosiemenPerMile);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MicrosiemensPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromMicrosiemensPerMeter(QuantityValue microsiemenspermeter) => new ElectricConductivity(microsiemenspermeter, ElectricConductivityUnit.MicrosiemensPerMeter);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MillisiemenPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromMillisiemensPerFoot(QuantityValue millisiemensperfoot) => new ElectricConductivity(millisiemensperfoot, ElectricConductivityUnit.MillisiemenPerFoot);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MillisiemenPerInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromMillisiemensPerInch(QuantityValue millisiemensperinch) => new ElectricConductivity(millisiemensperinch, ElectricConductivityUnit.MillisiemenPerInch);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MillisiemenPerKilofoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromMillisiemensPerKilofoot(QuantityValue millisiemensperkilofoot) => new ElectricConductivity(millisiemensperkilofoot, ElectricConductivityUnit.MillisiemenPerKilofoot);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MillisiemenPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromMillisiemensPerKilometer(QuantityValue millisiemensperkilometer) => new ElectricConductivity(millisiemensperkilometer, ElectricConductivityUnit.MillisiemenPerKilometer);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MillisiemenPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromMillisiemensPerMile(QuantityValue millisiemenspermile) => new ElectricConductivity(millisiemenspermile, ElectricConductivityUnit.MillisiemenPerMile);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.MillisiemensPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromMillisiemensPerMeter(QuantityValue millisiemenspermeter) => new ElectricConductivity(millisiemenspermeter, ElectricConductivityUnit.MillisiemensPerMeter);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.NanosiemenPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromNanosiemensPerFoot(QuantityValue nanosiemensperfoot) => new ElectricConductivity(nanosiemensperfoot, ElectricConductivityUnit.NanosiemenPerFoot);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.NanosiemenPerInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromNanosiemensPerInch(QuantityValue nanosiemensperinch) => new ElectricConductivity(nanosiemensperinch, ElectricConductivityUnit.NanosiemenPerInch);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.NanosiemenPerKilofoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromNanosiemensPerKilofoot(QuantityValue nanosiemensperkilofoot) => new ElectricConductivity(nanosiemensperkilofoot, ElectricConductivityUnit.NanosiemenPerKilofoot);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.NanosiemenPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromNanosiemensPerKilometer(QuantityValue nanosiemensperkilometer) => new ElectricConductivity(nanosiemensperkilometer, ElectricConductivityUnit.NanosiemenPerKilometer);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.NanosiemenPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromNanosiemensPerMile(QuantityValue nanosiemenspermile) => new ElectricConductivity(nanosiemenspermile, ElectricConductivityUnit.NanosiemenPerMile);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.NanosiemensPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromNanosiemensPerMeter(QuantityValue nanosiemenspermeter) => new ElectricConductivity(nanosiemenspermeter, ElectricConductivityUnit.NanosiemensPerMeter);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.PicosiemenPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromPicosiemensPerFoot(QuantityValue picosiemensperfoot) => new ElectricConductivity(picosiemensperfoot, ElectricConductivityUnit.PicosiemenPerFoot);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.PicosiemenPerInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromPicosiemensPerInch(QuantityValue picosiemensperinch) => new ElectricConductivity(picosiemensperinch, ElectricConductivityUnit.PicosiemenPerInch);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.PicosiemenPerKilofoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromPicosiemensPerKilofoot(QuantityValue picosiemensperkilofoot) => new ElectricConductivity(picosiemensperkilofoot, ElectricConductivityUnit.PicosiemenPerKilofoot);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.PicosiemenPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromPicosiemensPerKilometer(QuantityValue picosiemensperkilometer) => new ElectricConductivity(picosiemensperkilometer, ElectricConductivityUnit.PicosiemenPerKilometer);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.PicosiemenPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromPicosiemensPerMile(QuantityValue picosiemenspermile) => new ElectricConductivity(picosiemenspermile, ElectricConductivityUnit.PicosiemenPerMile);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.PicosiemensPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromPicosiemensPerMeter(QuantityValue picosiemenspermeter) => new ElectricConductivity(picosiemenspermeter, ElectricConductivityUnit.PicosiemensPerMeter);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.SiemenPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromSiemensPerFoot(QuantityValue siemensperfoot) => new ElectricConductivity(siemensperfoot, ElectricConductivityUnit.SiemenPerFoot);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.SiemenPerInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromSiemensPerInch(QuantityValue siemensperinch) => new ElectricConductivity(siemensperinch, ElectricConductivityUnit.SiemenPerInch);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.SiemenPerKilofoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromSiemensPerKilofoot(QuantityValue siemensperkilofoot) => new ElectricConductivity(siemensperkilofoot, ElectricConductivityUnit.SiemenPerKilofoot);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.SiemenPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromSiemensPerKilometer(QuantityValue siemensperkilometer) => new ElectricConductivity(siemensperkilometer, ElectricConductivityUnit.SiemenPerKilometer);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.SiemenPerMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromSiemensPerMile(QuantityValue siemenspermile) => new ElectricConductivity(siemenspermile, ElectricConductivityUnit.SiemenPerMile);

        /// <summary>
        ///     Creates a <see cref="ElectricConductivity"/> from <see cref="ElectricConductivityUnit.SiemensPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static ElectricConductivity FromSiemensPerMeter(QuantityValue siemenspermeter) => new ElectricConductivity(siemenspermeter, ElectricConductivityUnit.SiemensPerMeter);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElectricConductivityUnit" /> to <see cref="ElectricConductivity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ElectricConductivity unit value.</returns>
        public static ElectricConductivity From(QuantityValue value, ElectricConductivityUnit fromUnit)
        {
            return new ElectricConductivity(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public QuantityValue As(ElectricConductivityUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public ElectricConductivity ToUnit(ElectricConductivityUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new ElectricConductivity(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private QuantityValue GetValueInBaseUnit()
        {
            return Unit switch
            {
                ElectricConductivityUnit.KilosiemenPerFoot => (_value * 3.2808398950131234) * 1e3d,
                ElectricConductivityUnit.KilosiemenPerInch => (_value * 3.937007874015748e1) * 1e3d,
                ElectricConductivityUnit.KilosiemenPerKilofoot => (_value * 3.2808398950131234e3) * 1e3d,
                ElectricConductivityUnit.KilosiemenPerKilometer => (_value * 1000) * 1e3d,
                ElectricConductivityUnit.KilosiemenPerMile => (_value * 1609) * 1e3d,
                ElectricConductivityUnit.KilosiemensPerMeter => (_value) * 1e3d,
                ElectricConductivityUnit.MegasiemenPerFoot => (_value * 3.2808398950131234) * 1e6d,
                ElectricConductivityUnit.MegasiemenPerInch => (_value * 3.937007874015748e1) * 1e6d,
                ElectricConductivityUnit.MegasiemenPerKilofoot => (_value * 3.2808398950131234e3) * 1e6d,
                ElectricConductivityUnit.MegasiemenPerKilometer => (_value * 1000) * 1e6d,
                ElectricConductivityUnit.MegasiemenPerMile => (_value * 1609) * 1e6d,
                ElectricConductivityUnit.MegasiemensPerMeter => (_value) * 1e6d,
                ElectricConductivityUnit.MicrosiemenPerFoot => (_value * 3.2808398950131234) * 1e-6d,
                ElectricConductivityUnit.MicrosiemenPerInch => (_value * 3.937007874015748e1) * 1e-6d,
                ElectricConductivityUnit.MicrosiemenPerKilofoot => (_value * 3.2808398950131234e3) * 1e-6d,
                ElectricConductivityUnit.MicrosiemenPerKilometer => (_value * 1000) * 1e-6d,
                ElectricConductivityUnit.MicrosiemenPerMile => (_value * 1609) * 1e-6d,
                ElectricConductivityUnit.MicrosiemensPerMeter => (_value) * 1e-6d,
                ElectricConductivityUnit.MillisiemenPerFoot => (_value * 3.2808398950131234) * 1e-3d,
                ElectricConductivityUnit.MillisiemenPerInch => (_value * 3.937007874015748e1) * 1e-3d,
                ElectricConductivityUnit.MillisiemenPerKilofoot => (_value * 3.2808398950131234e3) * 1e-3d,
                ElectricConductivityUnit.MillisiemenPerKilometer => (_value * 1000) * 1e-3d,
                ElectricConductivityUnit.MillisiemenPerMile => (_value * 1609) * 1e-3d,
                ElectricConductivityUnit.MillisiemensPerMeter => (_value) * 1e-3d,
                ElectricConductivityUnit.NanosiemenPerFoot => (_value * 3.2808398950131234) * 1e-9d,
                ElectricConductivityUnit.NanosiemenPerInch => (_value * 3.937007874015748e1) * 1e-9d,
                ElectricConductivityUnit.NanosiemenPerKilofoot => (_value * 3.2808398950131234e3) * 1e-9d,
                ElectricConductivityUnit.NanosiemenPerKilometer => (_value * 1000) * 1e-9d,
                ElectricConductivityUnit.NanosiemenPerMile => (_value * 1609) * 1e-9d,
                ElectricConductivityUnit.NanosiemensPerMeter => (_value) * 1e-9d,
                ElectricConductivityUnit.PicosiemenPerFoot => (_value * 3.2808398950131234) * 1e-12d,
                ElectricConductivityUnit.PicosiemenPerInch => (_value * 3.937007874015748e1) * 1e-12d,
                ElectricConductivityUnit.PicosiemenPerKilofoot => (_value * 3.2808398950131234e3) * 1e-12d,
                ElectricConductivityUnit.PicosiemenPerKilometer => (_value * 1000) * 1e-12d,
                ElectricConductivityUnit.PicosiemenPerMile => (_value * 1609) * 1e-12d,
                ElectricConductivityUnit.PicosiemensPerMeter => (_value) * 1e-12d,
                ElectricConductivityUnit.SiemenPerFoot => _value * 3.2808398950131234,
                ElectricConductivityUnit.SiemenPerInch => _value * 3.937007874015748e1,
                ElectricConductivityUnit.SiemenPerKilofoot => _value * 3.2808398950131234e3,
                ElectricConductivityUnit.SiemenPerKilometer => _value * 1000,
                ElectricConductivityUnit.SiemenPerMile => _value * 1609,
                ElectricConductivityUnit.SiemensPerMeter => _value,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private QuantityValue GetValueAs(ElectricConductivityUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                ElectricConductivityUnit.KilosiemenPerFoot => (baseUnitValue / 3.2808398950131234) / 1e3d,
                ElectricConductivityUnit.KilosiemenPerInch => (baseUnitValue / 3.937007874015748e1) / 1e3d,
                ElectricConductivityUnit.KilosiemenPerKilofoot => (baseUnitValue / 3.2808398950131234e3) / 1e3d,
                ElectricConductivityUnit.KilosiemenPerKilometer => (baseUnitValue / 1000) / 1e3d,
                ElectricConductivityUnit.KilosiemenPerMile => (baseUnitValue / 1609) / 1e3d,
                ElectricConductivityUnit.KilosiemensPerMeter => (baseUnitValue) / 1e3d,
                ElectricConductivityUnit.MegasiemenPerFoot => (baseUnitValue / 3.2808398950131234) / 1e6d,
                ElectricConductivityUnit.MegasiemenPerInch => (baseUnitValue / 3.937007874015748e1) / 1e6d,
                ElectricConductivityUnit.MegasiemenPerKilofoot => (baseUnitValue / 3.2808398950131234e3) / 1e6d,
                ElectricConductivityUnit.MegasiemenPerKilometer => (baseUnitValue / 1000) / 1e6d,
                ElectricConductivityUnit.MegasiemenPerMile => (baseUnitValue / 1609) / 1e6d,
                ElectricConductivityUnit.MegasiemensPerMeter => (baseUnitValue) / 1e6d,
                ElectricConductivityUnit.MicrosiemenPerFoot => (baseUnitValue / 3.2808398950131234) / 1e-6d,
                ElectricConductivityUnit.MicrosiemenPerInch => (baseUnitValue / 3.937007874015748e1) / 1e-6d,
                ElectricConductivityUnit.MicrosiemenPerKilofoot => (baseUnitValue / 3.2808398950131234e3) / 1e-6d,
                ElectricConductivityUnit.MicrosiemenPerKilometer => (baseUnitValue / 1000) / 1e-6d,
                ElectricConductivityUnit.MicrosiemenPerMile => (baseUnitValue / 1609) / 1e-6d,
                ElectricConductivityUnit.MicrosiemensPerMeter => (baseUnitValue) / 1e-6d,
                ElectricConductivityUnit.MillisiemenPerFoot => (baseUnitValue / 3.2808398950131234) / 1e-3d,
                ElectricConductivityUnit.MillisiemenPerInch => (baseUnitValue / 3.937007874015748e1) / 1e-3d,
                ElectricConductivityUnit.MillisiemenPerKilofoot => (baseUnitValue / 3.2808398950131234e3) / 1e-3d,
                ElectricConductivityUnit.MillisiemenPerKilometer => (baseUnitValue / 1000) / 1e-3d,
                ElectricConductivityUnit.MillisiemenPerMile => (baseUnitValue / 1609) / 1e-3d,
                ElectricConductivityUnit.MillisiemensPerMeter => (baseUnitValue) / 1e-3d,
                ElectricConductivityUnit.NanosiemenPerFoot => (baseUnitValue / 3.2808398950131234) / 1e-9d,
                ElectricConductivityUnit.NanosiemenPerInch => (baseUnitValue / 3.937007874015748e1) / 1e-9d,
                ElectricConductivityUnit.NanosiemenPerKilofoot => (baseUnitValue / 3.2808398950131234e3) / 1e-9d,
                ElectricConductivityUnit.NanosiemenPerKilometer => (baseUnitValue / 1000) / 1e-9d,
                ElectricConductivityUnit.NanosiemenPerMile => (baseUnitValue / 1609) / 1e-9d,
                ElectricConductivityUnit.NanosiemensPerMeter => (baseUnitValue) / 1e-9d,
                ElectricConductivityUnit.PicosiemenPerFoot => (baseUnitValue / 3.2808398950131234) / 1e-12d,
                ElectricConductivityUnit.PicosiemenPerInch => (baseUnitValue / 3.937007874015748e1) / 1e-12d,
                ElectricConductivityUnit.PicosiemenPerKilofoot => (baseUnitValue / 3.2808398950131234e3) / 1e-12d,
                ElectricConductivityUnit.PicosiemenPerKilometer => (baseUnitValue / 1000) / 1e-12d,
                ElectricConductivityUnit.PicosiemenPerMile => (baseUnitValue / 1609) / 1e-12d,
                ElectricConductivityUnit.PicosiemensPerMeter => (baseUnitValue) / 1e-12d,
                ElectricConductivityUnit.SiemenPerFoot => baseUnitValue / 3.2808398950131234,
                ElectricConductivityUnit.SiemenPerInch => baseUnitValue / 3.937007874015748e1,
                ElectricConductivityUnit.SiemenPerKilofoot => baseUnitValue / 3.2808398950131234e3,
                ElectricConductivityUnit.SiemenPerKilometer => baseUnitValue / 1000,
                ElectricConductivityUnit.SiemenPerMile => baseUnitValue / 1609,
                ElectricConductivityUnit.SiemensPerMeter => baseUnitValue,
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion

    }
}

