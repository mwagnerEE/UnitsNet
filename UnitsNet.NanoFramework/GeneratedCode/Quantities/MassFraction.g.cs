//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The mass fraction is defined as the mass of a constituent divided by the total mass of the mixture.
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Mass_fraction_(chemistry)
    /// </remarks>
    public struct  MassFraction
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly QuantityValue _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly MassFractionUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public QuantityValue Value => _value;

        /// <inheritdoc />
        public MassFractionUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public MassFraction(QuantityValue value, MassFractionUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static MassFractionUnit BaseUnit { get; } = MassFractionUnit.DecimalFraction;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static MassFraction MaxValue { get; } = new MassFraction(QuantityValue.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static MassFraction MinValue { get; } = new MassFraction(QuantityValue.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static MassFraction Zero { get; } = new MassFraction(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.CentigramPerGram"/>
        /// </summary>
        public QuantityValue CentigramsPerGram => As(MassFractionUnit.CentigramPerGram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.CentigramPerKilogram"/>
        /// </summary>
        public QuantityValue CentigramsPerKilogram => As(MassFractionUnit.CentigramPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.DecagramPerGram"/>
        /// </summary>
        public QuantityValue DecagramsPerGram => As(MassFractionUnit.DecagramPerGram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.DecagramPerKilogram"/>
        /// </summary>
        public QuantityValue DecagramsPerKilogram => As(MassFractionUnit.DecagramPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.DecigramPerGram"/>
        /// </summary>
        public QuantityValue DecigramsPerGram => As(MassFractionUnit.DecigramPerGram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.DecigramPerKilogram"/>
        /// </summary>
        public QuantityValue DecigramsPerKilogram => As(MassFractionUnit.DecigramPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.DecimalFraction"/>
        /// </summary>
        public QuantityValue DecimalFractions => As(MassFractionUnit.DecimalFraction);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.GramPerGram"/>
        /// </summary>
        public QuantityValue GramsPerGram => As(MassFractionUnit.GramPerGram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.GramPerKilogram"/>
        /// </summary>
        public QuantityValue GramsPerKilogram => As(MassFractionUnit.GramPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.HectogramPerGram"/>
        /// </summary>
        public QuantityValue HectogramsPerGram => As(MassFractionUnit.HectogramPerGram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.HectogramPerKilogram"/>
        /// </summary>
        public QuantityValue HectogramsPerKilogram => As(MassFractionUnit.HectogramPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.KilogramPerGram"/>
        /// </summary>
        public QuantityValue KilogramsPerGram => As(MassFractionUnit.KilogramPerGram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.KilogramPerKilogram"/>
        /// </summary>
        public QuantityValue KilogramsPerKilogram => As(MassFractionUnit.KilogramPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.MicrogramPerGram"/>
        /// </summary>
        public QuantityValue MicrogramsPerGram => As(MassFractionUnit.MicrogramPerGram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.MicrogramPerKilogram"/>
        /// </summary>
        public QuantityValue MicrogramsPerKilogram => As(MassFractionUnit.MicrogramPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.MilligramPerGram"/>
        /// </summary>
        public QuantityValue MilligramsPerGram => As(MassFractionUnit.MilligramPerGram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.MilligramPerKilogram"/>
        /// </summary>
        public QuantityValue MilligramsPerKilogram => As(MassFractionUnit.MilligramPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.NanogramPerGram"/>
        /// </summary>
        public QuantityValue NanogramsPerGram => As(MassFractionUnit.NanogramPerGram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.NanogramPerKilogram"/>
        /// </summary>
        public QuantityValue NanogramsPerKilogram => As(MassFractionUnit.NanogramPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.PartPerBillion"/>
        /// </summary>
        public QuantityValue PartsPerBillion => As(MassFractionUnit.PartPerBillion);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.PartPerMillion"/>
        /// </summary>
        public QuantityValue PartsPerMillion => As(MassFractionUnit.PartPerMillion);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.PartPerThousand"/>
        /// </summary>
        public QuantityValue PartsPerThousand => As(MassFractionUnit.PartPerThousand);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.PartPerTrillion"/>
        /// </summary>
        public QuantityValue PartsPerTrillion => As(MassFractionUnit.PartPerTrillion);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFractionUnit.Percent"/>
        /// </summary>
        public QuantityValue Percent => As(MassFractionUnit.Percent);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.CentigramPerGram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromCentigramsPerGram(QuantityValue centigramspergram) => new MassFraction(centigramspergram, MassFractionUnit.CentigramPerGram);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.CentigramPerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromCentigramsPerKilogram(QuantityValue centigramsperkilogram) => new MassFraction(centigramsperkilogram, MassFractionUnit.CentigramPerKilogram);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.DecagramPerGram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromDecagramsPerGram(QuantityValue decagramspergram) => new MassFraction(decagramspergram, MassFractionUnit.DecagramPerGram);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.DecagramPerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromDecagramsPerKilogram(QuantityValue decagramsperkilogram) => new MassFraction(decagramsperkilogram, MassFractionUnit.DecagramPerKilogram);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.DecigramPerGram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromDecigramsPerGram(QuantityValue decigramspergram) => new MassFraction(decigramspergram, MassFractionUnit.DecigramPerGram);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.DecigramPerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromDecigramsPerKilogram(QuantityValue decigramsperkilogram) => new MassFraction(decigramsperkilogram, MassFractionUnit.DecigramPerKilogram);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.DecimalFraction"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromDecimalFractions(QuantityValue decimalfractions) => new MassFraction(decimalfractions, MassFractionUnit.DecimalFraction);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.GramPerGram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromGramsPerGram(QuantityValue gramspergram) => new MassFraction(gramspergram, MassFractionUnit.GramPerGram);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.GramPerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromGramsPerKilogram(QuantityValue gramsperkilogram) => new MassFraction(gramsperkilogram, MassFractionUnit.GramPerKilogram);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.HectogramPerGram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromHectogramsPerGram(QuantityValue hectogramspergram) => new MassFraction(hectogramspergram, MassFractionUnit.HectogramPerGram);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.HectogramPerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromHectogramsPerKilogram(QuantityValue hectogramsperkilogram) => new MassFraction(hectogramsperkilogram, MassFractionUnit.HectogramPerKilogram);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.KilogramPerGram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromKilogramsPerGram(QuantityValue kilogramspergram) => new MassFraction(kilogramspergram, MassFractionUnit.KilogramPerGram);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.KilogramPerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromKilogramsPerKilogram(QuantityValue kilogramsperkilogram) => new MassFraction(kilogramsperkilogram, MassFractionUnit.KilogramPerKilogram);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.MicrogramPerGram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromMicrogramsPerGram(QuantityValue microgramspergram) => new MassFraction(microgramspergram, MassFractionUnit.MicrogramPerGram);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.MicrogramPerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromMicrogramsPerKilogram(QuantityValue microgramsperkilogram) => new MassFraction(microgramsperkilogram, MassFractionUnit.MicrogramPerKilogram);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.MilligramPerGram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromMilligramsPerGram(QuantityValue milligramspergram) => new MassFraction(milligramspergram, MassFractionUnit.MilligramPerGram);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.MilligramPerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromMilligramsPerKilogram(QuantityValue milligramsperkilogram) => new MassFraction(milligramsperkilogram, MassFractionUnit.MilligramPerKilogram);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.NanogramPerGram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromNanogramsPerGram(QuantityValue nanogramspergram) => new MassFraction(nanogramspergram, MassFractionUnit.NanogramPerGram);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.NanogramPerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromNanogramsPerKilogram(QuantityValue nanogramsperkilogram) => new MassFraction(nanogramsperkilogram, MassFractionUnit.NanogramPerKilogram);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.PartPerBillion"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromPartsPerBillion(QuantityValue partsperbillion) => new MassFraction(partsperbillion, MassFractionUnit.PartPerBillion);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.PartPerMillion"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromPartsPerMillion(QuantityValue partspermillion) => new MassFraction(partspermillion, MassFractionUnit.PartPerMillion);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.PartPerThousand"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromPartsPerThousand(QuantityValue partsperthousand) => new MassFraction(partsperthousand, MassFractionUnit.PartPerThousand);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.PartPerTrillion"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromPartsPerTrillion(QuantityValue partspertrillion) => new MassFraction(partspertrillion, MassFractionUnit.PartPerTrillion);

        /// <summary>
        ///     Creates a <see cref="MassFraction"/> from <see cref="MassFractionUnit.Percent"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFraction FromPercent(QuantityValue percent) => new MassFraction(percent, MassFractionUnit.Percent);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MassFractionUnit" /> to <see cref="MassFraction" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MassFraction unit value.</returns>
        public static MassFraction From(QuantityValue value, MassFractionUnit fromUnit)
        {
            return new MassFraction(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public QuantityValue As(MassFractionUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public MassFraction ToUnit(MassFractionUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new MassFraction(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private QuantityValue GetValueInBaseUnit()
        {
            return Unit switch
            {
                MassFractionUnit.CentigramPerGram => (_value) * 1e-2d,
                MassFractionUnit.CentigramPerKilogram => (_value / 1e3) * 1e-2d,
                MassFractionUnit.DecagramPerGram => (_value) * 1e1d,
                MassFractionUnit.DecagramPerKilogram => (_value / 1e3) * 1e1d,
                MassFractionUnit.DecigramPerGram => (_value) * 1e-1d,
                MassFractionUnit.DecigramPerKilogram => (_value / 1e3) * 1e-1d,
                MassFractionUnit.DecimalFraction => _value,
                MassFractionUnit.GramPerGram => _value,
                MassFractionUnit.GramPerKilogram => _value / 1e3,
                MassFractionUnit.HectogramPerGram => (_value) * 1e2d,
                MassFractionUnit.HectogramPerKilogram => (_value / 1e3) * 1e2d,
                MassFractionUnit.KilogramPerGram => (_value) * 1e3d,
                MassFractionUnit.KilogramPerKilogram => (_value / 1e3) * 1e3d,
                MassFractionUnit.MicrogramPerGram => (_value) * 1e-6d,
                MassFractionUnit.MicrogramPerKilogram => (_value / 1e3) * 1e-6d,
                MassFractionUnit.MilligramPerGram => (_value) * 1e-3d,
                MassFractionUnit.MilligramPerKilogram => (_value / 1e3) * 1e-3d,
                MassFractionUnit.NanogramPerGram => (_value) * 1e-9d,
                MassFractionUnit.NanogramPerKilogram => (_value / 1e3) * 1e-9d,
                MassFractionUnit.PartPerBillion => _value / 1e9,
                MassFractionUnit.PartPerMillion => _value / 1e6,
                MassFractionUnit.PartPerThousand => _value / 1e3,
                MassFractionUnit.PartPerTrillion => _value / 1e12,
                MassFractionUnit.Percent => _value / 1e2,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private QuantityValue GetValueAs(MassFractionUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                MassFractionUnit.CentigramPerGram => (baseUnitValue) / 1e-2d,
                MassFractionUnit.CentigramPerKilogram => (baseUnitValue * 1e3) / 1e-2d,
                MassFractionUnit.DecagramPerGram => (baseUnitValue) / 1e1d,
                MassFractionUnit.DecagramPerKilogram => (baseUnitValue * 1e3) / 1e1d,
                MassFractionUnit.DecigramPerGram => (baseUnitValue) / 1e-1d,
                MassFractionUnit.DecigramPerKilogram => (baseUnitValue * 1e3) / 1e-1d,
                MassFractionUnit.DecimalFraction => baseUnitValue,
                MassFractionUnit.GramPerGram => baseUnitValue,
                MassFractionUnit.GramPerKilogram => baseUnitValue * 1e3,
                MassFractionUnit.HectogramPerGram => (baseUnitValue) / 1e2d,
                MassFractionUnit.HectogramPerKilogram => (baseUnitValue * 1e3) / 1e2d,
                MassFractionUnit.KilogramPerGram => (baseUnitValue) / 1e3d,
                MassFractionUnit.KilogramPerKilogram => (baseUnitValue * 1e3) / 1e3d,
                MassFractionUnit.MicrogramPerGram => (baseUnitValue) / 1e-6d,
                MassFractionUnit.MicrogramPerKilogram => (baseUnitValue * 1e3) / 1e-6d,
                MassFractionUnit.MilligramPerGram => (baseUnitValue) / 1e-3d,
                MassFractionUnit.MilligramPerKilogram => (baseUnitValue * 1e3) / 1e-3d,
                MassFractionUnit.NanogramPerGram => (baseUnitValue) / 1e-9d,
                MassFractionUnit.NanogramPerKilogram => (baseUnitValue * 1e3) / 1e-9d,
                MassFractionUnit.PartPerBillion => baseUnitValue * 1e9,
                MassFractionUnit.PartPerMillion => baseUnitValue * 1e6,
                MassFractionUnit.PartPerThousand => baseUnitValue * 1e3,
                MassFractionUnit.PartPerTrillion => baseUnitValue * 1e12,
                MassFractionUnit.Percent => baseUnitValue * 1e2,
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion

    }
}

