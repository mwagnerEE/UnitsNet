//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The density, or more precisely, the volumetric mass density, of a substance is its mass per unit volume.
    /// </summary>
    /// <remarks>
    ///     http://en.wikipedia.org/wiki/Density
    /// </remarks>
    public struct  Density
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly QuantityValue _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly DensityUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public QuantityValue Value => _value;

        /// <inheritdoc />
        public DensityUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Density(QuantityValue value, DensityUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static DensityUnit BaseUnit { get; } = DensityUnit.KilogramPerCubicMeter;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static Density MaxValue { get; } = new Density(QuantityValue.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static Density MinValue { get; } = new Density(QuantityValue.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Density Zero { get; } = new Density(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.CentigramPerDeciliter"/>
        /// </summary>
        public QuantityValue CentigramsPerDeciLiter => As(DensityUnit.CentigramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.CentigramPerLiter"/>
        /// </summary>
        public QuantityValue CentigramsPerLiter => As(DensityUnit.CentigramPerLiter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.CentigramPerMilliliter"/>
        /// </summary>
        public QuantityValue CentigramsPerMilliliter => As(DensityUnit.CentigramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.DecigramPerDeciliter"/>
        /// </summary>
        public QuantityValue DecigramsPerDeciLiter => As(DensityUnit.DecigramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.DecigramPerLiter"/>
        /// </summary>
        public QuantityValue DecigramsPerLiter => As(DensityUnit.DecigramPerLiter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.DecigramPerMilliliter"/>
        /// </summary>
        public QuantityValue DecigramsPerMilliliter => As(DensityUnit.DecigramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.GramPerCubicCentimeter"/>
        /// </summary>
        public QuantityValue GramsPerCubicCentimeter => As(DensityUnit.GramPerCubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.GramPerCubicFoot"/>
        /// </summary>
        public QuantityValue GramsPerCubicFoot => As(DensityUnit.GramPerCubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.GramPerCubicInch"/>
        /// </summary>
        public QuantityValue GramsPerCubicInch => As(DensityUnit.GramPerCubicInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.GramPerCubicMeter"/>
        /// </summary>
        public QuantityValue GramsPerCubicMeter => As(DensityUnit.GramPerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.GramPerCubicMillimeter"/>
        /// </summary>
        public QuantityValue GramsPerCubicMillimeter => As(DensityUnit.GramPerCubicMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.GramPerDeciliter"/>
        /// </summary>
        public QuantityValue GramsPerDeciLiter => As(DensityUnit.GramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.GramPerLiter"/>
        /// </summary>
        public QuantityValue GramsPerLiter => As(DensityUnit.GramPerLiter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.GramPerMilliliter"/>
        /// </summary>
        public QuantityValue GramsPerMilliliter => As(DensityUnit.GramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.KilogramPerCubicCentimeter"/>
        /// </summary>
        public QuantityValue KilogramsPerCubicCentimeter => As(DensityUnit.KilogramPerCubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.KilogramPerCubicMeter"/>
        /// </summary>
        public QuantityValue KilogramsPerCubicMeter => As(DensityUnit.KilogramPerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.KilogramPerCubicMillimeter"/>
        /// </summary>
        public QuantityValue KilogramsPerCubicMillimeter => As(DensityUnit.KilogramPerCubicMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.KilogramPerLiter"/>
        /// </summary>
        public QuantityValue KilogramsPerLiter => As(DensityUnit.KilogramPerLiter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.KilopoundPerCubicFoot"/>
        /// </summary>
        public QuantityValue KilopoundsPerCubicFoot => As(DensityUnit.KilopoundPerCubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.KilopoundPerCubicInch"/>
        /// </summary>
        public QuantityValue KilopoundsPerCubicInch => As(DensityUnit.KilopoundPerCubicInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.MicrogramPerCubicMeter"/>
        /// </summary>
        public QuantityValue MicrogramsPerCubicMeter => As(DensityUnit.MicrogramPerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.MicrogramPerDeciliter"/>
        /// </summary>
        public QuantityValue MicrogramsPerDeciLiter => As(DensityUnit.MicrogramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.MicrogramPerLiter"/>
        /// </summary>
        public QuantityValue MicrogramsPerLiter => As(DensityUnit.MicrogramPerLiter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.MicrogramPerMilliliter"/>
        /// </summary>
        public QuantityValue MicrogramsPerMilliliter => As(DensityUnit.MicrogramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.MilligramPerCubicMeter"/>
        /// </summary>
        public QuantityValue MilligramsPerCubicMeter => As(DensityUnit.MilligramPerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.MilligramPerDeciliter"/>
        /// </summary>
        public QuantityValue MilligramsPerDeciLiter => As(DensityUnit.MilligramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.MilligramPerLiter"/>
        /// </summary>
        public QuantityValue MilligramsPerLiter => As(DensityUnit.MilligramPerLiter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.MilligramPerMilliliter"/>
        /// </summary>
        public QuantityValue MilligramsPerMilliliter => As(DensityUnit.MilligramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.NanogramPerDeciliter"/>
        /// </summary>
        public QuantityValue NanogramsPerDeciLiter => As(DensityUnit.NanogramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.NanogramPerLiter"/>
        /// </summary>
        public QuantityValue NanogramsPerLiter => As(DensityUnit.NanogramPerLiter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.NanogramPerMilliliter"/>
        /// </summary>
        public QuantityValue NanogramsPerMilliliter => As(DensityUnit.NanogramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PicogramPerDeciliter"/>
        /// </summary>
        public QuantityValue PicogramsPerDeciLiter => As(DensityUnit.PicogramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PicogramPerLiter"/>
        /// </summary>
        public QuantityValue PicogramsPerLiter => As(DensityUnit.PicogramPerLiter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PicogramPerMilliliter"/>
        /// </summary>
        public QuantityValue PicogramsPerMilliliter => As(DensityUnit.PicogramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PoundPerCubicCentimeter"/>
        /// </summary>
        public QuantityValue PoundsPerCubicCentimeter => As(DensityUnit.PoundPerCubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PoundPerCubicFoot"/>
        /// </summary>
        public QuantityValue PoundsPerCubicFoot => As(DensityUnit.PoundPerCubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PoundPerCubicInch"/>
        /// </summary>
        public QuantityValue PoundsPerCubicInch => As(DensityUnit.PoundPerCubicInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PoundPerCubicMeter"/>
        /// </summary>
        public QuantityValue PoundsPerCubicMeter => As(DensityUnit.PoundPerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PoundPerCubicMillimeter"/>
        /// </summary>
        public QuantityValue PoundsPerCubicMillimeter => As(DensityUnit.PoundPerCubicMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PoundPerImperialGallon"/>
        /// </summary>
        public QuantityValue PoundsPerImperialGallon => As(DensityUnit.PoundPerImperialGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PoundPerUSGallon"/>
        /// </summary>
        public QuantityValue PoundsPerUSGallon => As(DensityUnit.PoundPerUSGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.SlugPerCubicCentimeter"/>
        /// </summary>
        public QuantityValue SlugsPerCubicCentimeter => As(DensityUnit.SlugPerCubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.SlugPerCubicFoot"/>
        /// </summary>
        public QuantityValue SlugsPerCubicFoot => As(DensityUnit.SlugPerCubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.SlugPerCubicInch"/>
        /// </summary>
        public QuantityValue SlugsPerCubicInch => As(DensityUnit.SlugPerCubicInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.SlugPerCubicMeter"/>
        /// </summary>
        public QuantityValue SlugsPerCubicMeter => As(DensityUnit.SlugPerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.SlugPerCubicMillimeter"/>
        /// </summary>
        public QuantityValue SlugsPerCubicMillimeter => As(DensityUnit.SlugPerCubicMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.TonnePerCubicCentimeter"/>
        /// </summary>
        public QuantityValue TonnesPerCubicCentimeter => As(DensityUnit.TonnePerCubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.TonnePerCubicFoot"/>
        /// </summary>
        public QuantityValue TonnesPerCubicFoot => As(DensityUnit.TonnePerCubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.TonnePerCubicInch"/>
        /// </summary>
        public QuantityValue TonnesPerCubicInch => As(DensityUnit.TonnePerCubicInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.TonnePerCubicMeter"/>
        /// </summary>
        public QuantityValue TonnesPerCubicMeter => As(DensityUnit.TonnePerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.TonnePerCubicMillimeter"/>
        /// </summary>
        public QuantityValue TonnesPerCubicMillimeter => As(DensityUnit.TonnePerCubicMillimeter);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.CentigramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromCentigramsPerDeciLiter(QuantityValue centigramsperdeciliter) => new Density(centigramsperdeciliter, DensityUnit.CentigramPerDeciliter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.CentigramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromCentigramsPerLiter(QuantityValue centigramsperliter) => new Density(centigramsperliter, DensityUnit.CentigramPerLiter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.CentigramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromCentigramsPerMilliliter(QuantityValue centigramspermilliliter) => new Density(centigramspermilliliter, DensityUnit.CentigramPerMilliliter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.DecigramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromDecigramsPerDeciLiter(QuantityValue decigramsperdeciliter) => new Density(decigramsperdeciliter, DensityUnit.DecigramPerDeciliter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.DecigramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromDecigramsPerLiter(QuantityValue decigramsperliter) => new Density(decigramsperliter, DensityUnit.DecigramPerLiter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.DecigramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromDecigramsPerMilliliter(QuantityValue decigramspermilliliter) => new Density(decigramspermilliliter, DensityUnit.DecigramPerMilliliter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerCubicCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromGramsPerCubicCentimeter(QuantityValue gramspercubiccentimeter) => new Density(gramspercubiccentimeter, DensityUnit.GramPerCubicCentimeter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromGramsPerCubicFoot(QuantityValue gramspercubicfoot) => new Density(gramspercubicfoot, DensityUnit.GramPerCubicFoot);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromGramsPerCubicInch(QuantityValue gramspercubicinch) => new Density(gramspercubicinch, DensityUnit.GramPerCubicInch);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromGramsPerCubicMeter(QuantityValue gramspercubicmeter) => new Density(gramspercubicmeter, DensityUnit.GramPerCubicMeter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerCubicMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromGramsPerCubicMillimeter(QuantityValue gramspercubicmillimeter) => new Density(gramspercubicmillimeter, DensityUnit.GramPerCubicMillimeter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromGramsPerDeciLiter(QuantityValue gramsperdeciliter) => new Density(gramsperdeciliter, DensityUnit.GramPerDeciliter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromGramsPerLiter(QuantityValue gramsperliter) => new Density(gramsperliter, DensityUnit.GramPerLiter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromGramsPerMilliliter(QuantityValue gramspermilliliter) => new Density(gramspermilliliter, DensityUnit.GramPerMilliliter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilogramPerCubicCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromKilogramsPerCubicCentimeter(QuantityValue kilogramspercubiccentimeter) => new Density(kilogramspercubiccentimeter, DensityUnit.KilogramPerCubicCentimeter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilogramPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromKilogramsPerCubicMeter(QuantityValue kilogramspercubicmeter) => new Density(kilogramspercubicmeter, DensityUnit.KilogramPerCubicMeter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilogramPerCubicMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromKilogramsPerCubicMillimeter(QuantityValue kilogramspercubicmillimeter) => new Density(kilogramspercubicmillimeter, DensityUnit.KilogramPerCubicMillimeter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilogramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromKilogramsPerLiter(QuantityValue kilogramsperliter) => new Density(kilogramsperliter, DensityUnit.KilogramPerLiter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilopoundPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromKilopoundsPerCubicFoot(QuantityValue kilopoundspercubicfoot) => new Density(kilopoundspercubicfoot, DensityUnit.KilopoundPerCubicFoot);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilopoundPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromKilopoundsPerCubicInch(QuantityValue kilopoundspercubicinch) => new Density(kilopoundspercubicinch, DensityUnit.KilopoundPerCubicInch);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MicrogramPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromMicrogramsPerCubicMeter(QuantityValue microgramspercubicmeter) => new Density(microgramspercubicmeter, DensityUnit.MicrogramPerCubicMeter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MicrogramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromMicrogramsPerDeciLiter(QuantityValue microgramsperdeciliter) => new Density(microgramsperdeciliter, DensityUnit.MicrogramPerDeciliter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MicrogramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromMicrogramsPerLiter(QuantityValue microgramsperliter) => new Density(microgramsperliter, DensityUnit.MicrogramPerLiter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MicrogramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromMicrogramsPerMilliliter(QuantityValue microgramspermilliliter) => new Density(microgramspermilliliter, DensityUnit.MicrogramPerMilliliter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MilligramPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromMilligramsPerCubicMeter(QuantityValue milligramspercubicmeter) => new Density(milligramspercubicmeter, DensityUnit.MilligramPerCubicMeter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MilligramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromMilligramsPerDeciLiter(QuantityValue milligramsperdeciliter) => new Density(milligramsperdeciliter, DensityUnit.MilligramPerDeciliter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MilligramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromMilligramsPerLiter(QuantityValue milligramsperliter) => new Density(milligramsperliter, DensityUnit.MilligramPerLiter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MilligramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromMilligramsPerMilliliter(QuantityValue milligramspermilliliter) => new Density(milligramspermilliliter, DensityUnit.MilligramPerMilliliter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.NanogramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromNanogramsPerDeciLiter(QuantityValue nanogramsperdeciliter) => new Density(nanogramsperdeciliter, DensityUnit.NanogramPerDeciliter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.NanogramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromNanogramsPerLiter(QuantityValue nanogramsperliter) => new Density(nanogramsperliter, DensityUnit.NanogramPerLiter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.NanogramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromNanogramsPerMilliliter(QuantityValue nanogramspermilliliter) => new Density(nanogramspermilliliter, DensityUnit.NanogramPerMilliliter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PicogramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPicogramsPerDeciLiter(QuantityValue picogramsperdeciliter) => new Density(picogramsperdeciliter, DensityUnit.PicogramPerDeciliter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PicogramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPicogramsPerLiter(QuantityValue picogramsperliter) => new Density(picogramsperliter, DensityUnit.PicogramPerLiter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PicogramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPicogramsPerMilliliter(QuantityValue picogramspermilliliter) => new Density(picogramspermilliliter, DensityUnit.PicogramPerMilliliter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerCubicCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPoundsPerCubicCentimeter(QuantityValue poundspercubiccentimeter) => new Density(poundspercubiccentimeter, DensityUnit.PoundPerCubicCentimeter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPoundsPerCubicFoot(QuantityValue poundspercubicfoot) => new Density(poundspercubicfoot, DensityUnit.PoundPerCubicFoot);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPoundsPerCubicInch(QuantityValue poundspercubicinch) => new Density(poundspercubicinch, DensityUnit.PoundPerCubicInch);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPoundsPerCubicMeter(QuantityValue poundspercubicmeter) => new Density(poundspercubicmeter, DensityUnit.PoundPerCubicMeter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerCubicMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPoundsPerCubicMillimeter(QuantityValue poundspercubicmillimeter) => new Density(poundspercubicmillimeter, DensityUnit.PoundPerCubicMillimeter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerImperialGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPoundsPerImperialGallon(QuantityValue poundsperimperialgallon) => new Density(poundsperimperialgallon, DensityUnit.PoundPerImperialGallon);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerUSGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPoundsPerUSGallon(QuantityValue poundsperusgallon) => new Density(poundsperusgallon, DensityUnit.PoundPerUSGallon);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.SlugPerCubicCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromSlugsPerCubicCentimeter(QuantityValue slugspercubiccentimeter) => new Density(slugspercubiccentimeter, DensityUnit.SlugPerCubicCentimeter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.SlugPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromSlugsPerCubicFoot(QuantityValue slugspercubicfoot) => new Density(slugspercubicfoot, DensityUnit.SlugPerCubicFoot);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.SlugPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromSlugsPerCubicInch(QuantityValue slugspercubicinch) => new Density(slugspercubicinch, DensityUnit.SlugPerCubicInch);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.SlugPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromSlugsPerCubicMeter(QuantityValue slugspercubicmeter) => new Density(slugspercubicmeter, DensityUnit.SlugPerCubicMeter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.SlugPerCubicMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromSlugsPerCubicMillimeter(QuantityValue slugspercubicmillimeter) => new Density(slugspercubicmillimeter, DensityUnit.SlugPerCubicMillimeter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.TonnePerCubicCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromTonnesPerCubicCentimeter(QuantityValue tonnespercubiccentimeter) => new Density(tonnespercubiccentimeter, DensityUnit.TonnePerCubicCentimeter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.TonnePerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromTonnesPerCubicFoot(QuantityValue tonnespercubicfoot) => new Density(tonnespercubicfoot, DensityUnit.TonnePerCubicFoot);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.TonnePerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromTonnesPerCubicInch(QuantityValue tonnespercubicinch) => new Density(tonnespercubicinch, DensityUnit.TonnePerCubicInch);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.TonnePerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromTonnesPerCubicMeter(QuantityValue tonnespercubicmeter) => new Density(tonnespercubicmeter, DensityUnit.TonnePerCubicMeter);

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.TonnePerCubicMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromTonnesPerCubicMillimeter(QuantityValue tonnespercubicmillimeter) => new Density(tonnespercubicmillimeter, DensityUnit.TonnePerCubicMillimeter);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="DensityUnit" /> to <see cref="Density" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Density unit value.</returns>
        public static Density From(QuantityValue value, DensityUnit fromUnit)
        {
            return new Density(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public QuantityValue As(DensityUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public Density ToUnit(DensityUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Density(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private QuantityValue GetValueInBaseUnit()
        {
            return Unit switch
            {
                DensityUnit.CentigramPerDeciliter => (_value / 1e-1) * 1e-2d,
                DensityUnit.CentigramPerLiter => (_value / 1) * 1e-2d,
                DensityUnit.CentigramPerMilliliter => (_value / 1e-3) * 1e-2d,
                DensityUnit.DecigramPerDeciliter => (_value / 1e-1) * 1e-1d,
                DensityUnit.DecigramPerLiter => (_value / 1) * 1e-1d,
                DensityUnit.DecigramPerMilliliter => (_value / 1e-3) * 1e-1d,
                DensityUnit.GramPerCubicCentimeter => _value / 1e-3,
                DensityUnit.GramPerCubicFoot => _value * 0.0353146667214886,
                DensityUnit.GramPerCubicInch => _value * 61.0237440947323,
                DensityUnit.GramPerCubicMeter => _value / 1e3,
                DensityUnit.GramPerCubicMillimeter => _value / 1e-6,
                DensityUnit.GramPerDeciliter => _value / 1e-1,
                DensityUnit.GramPerLiter => _value / 1,
                DensityUnit.GramPerMilliliter => _value / 1e-3,
                DensityUnit.KilogramPerCubicCentimeter => (_value / 1e-3) * 1e3d,
                DensityUnit.KilogramPerCubicMeter => (_value / 1e3) * 1e3d,
                DensityUnit.KilogramPerCubicMillimeter => (_value / 1e-6) * 1e3d,
                DensityUnit.KilogramPerLiter => _value * 1e3,
                DensityUnit.KilopoundPerCubicFoot => (_value / 0.062427961) * 1e3d,
                DensityUnit.KilopoundPerCubicInch => (_value / 3.6127298147753e-5) * 1e3d,
                DensityUnit.MicrogramPerCubicMeter => (_value / 1e3) * 1e-6d,
                DensityUnit.MicrogramPerDeciliter => (_value / 1e-1) * 1e-6d,
                DensityUnit.MicrogramPerLiter => (_value / 1) * 1e-6d,
                DensityUnit.MicrogramPerMilliliter => (_value / 1e-3) * 1e-6d,
                DensityUnit.MilligramPerCubicMeter => (_value / 1e3) * 1e-3d,
                DensityUnit.MilligramPerDeciliter => (_value / 1e-1) * 1e-3d,
                DensityUnit.MilligramPerLiter => (_value / 1) * 1e-3d,
                DensityUnit.MilligramPerMilliliter => (_value / 1e-3) * 1e-3d,
                DensityUnit.NanogramPerDeciliter => (_value / 1e-1) * 1e-9d,
                DensityUnit.NanogramPerLiter => (_value / 1) * 1e-9d,
                DensityUnit.NanogramPerMilliliter => (_value / 1e-3) * 1e-9d,
                DensityUnit.PicogramPerDeciliter => (_value / 1e-1) * 1e-12d,
                DensityUnit.PicogramPerLiter => (_value / 1) * 1e-12d,
                DensityUnit.PicogramPerMilliliter => (_value / 1e-3) * 1e-12d,
                DensityUnit.PoundPerCubicCentimeter => _value / 2.204622621848775e-6,
                DensityUnit.PoundPerCubicFoot => _value / 0.062427961,
                DensityUnit.PoundPerCubicInch => _value / 3.6127298147753e-5,
                DensityUnit.PoundPerCubicMeter => _value / 2.204622621848775,
                DensityUnit.PoundPerCubicMillimeter => _value / 2.204622621848775e-9,
                DensityUnit.PoundPerImperialGallon => _value * 9.9776398e1,
                DensityUnit.PoundPerUSGallon => _value * 1.19826427e2,
                DensityUnit.SlugPerCubicCentimeter => _value * 14593903,
                DensityUnit.SlugPerCubicFoot => _value * 515.378818,
                DensityUnit.SlugPerCubicInch => _value * 890574.60201535,
                DensityUnit.SlugPerCubicMeter => _value * 14.5939,
                DensityUnit.SlugPerCubicMillimeter => _value * 14593903000,
                DensityUnit.TonnePerCubicCentimeter => _value / 1e-9,
                DensityUnit.TonnePerCubicFoot => _value * 3.53146667214886e4,
                DensityUnit.TonnePerCubicInch => _value * 6.10237440947323e7,
                DensityUnit.TonnePerCubicMeter => _value / 0.001,
                DensityUnit.TonnePerCubicMillimeter => _value / 1e-12,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private QuantityValue GetValueAs(DensityUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                DensityUnit.CentigramPerDeciliter => (baseUnitValue * 1e-1) / 1e-2d,
                DensityUnit.CentigramPerLiter => (baseUnitValue * 1) / 1e-2d,
                DensityUnit.CentigramPerMilliliter => (baseUnitValue * 1e-3) / 1e-2d,
                DensityUnit.DecigramPerDeciliter => (baseUnitValue * 1e-1) / 1e-1d,
                DensityUnit.DecigramPerLiter => (baseUnitValue * 1) / 1e-1d,
                DensityUnit.DecigramPerMilliliter => (baseUnitValue * 1e-3) / 1e-1d,
                DensityUnit.GramPerCubicCentimeter => baseUnitValue * 1e-3,
                DensityUnit.GramPerCubicFoot => baseUnitValue / 0.0353146667214886,
                DensityUnit.GramPerCubicInch => baseUnitValue / 61.0237440947323,
                DensityUnit.GramPerCubicMeter => baseUnitValue * 1e3,
                DensityUnit.GramPerCubicMillimeter => baseUnitValue * 1e-6,
                DensityUnit.GramPerDeciliter => baseUnitValue * 1e-1,
                DensityUnit.GramPerLiter => baseUnitValue * 1,
                DensityUnit.GramPerMilliliter => baseUnitValue * 1e-3,
                DensityUnit.KilogramPerCubicCentimeter => (baseUnitValue * 1e-3) / 1e3d,
                DensityUnit.KilogramPerCubicMeter => (baseUnitValue * 1e3) / 1e3d,
                DensityUnit.KilogramPerCubicMillimeter => (baseUnitValue * 1e-6) / 1e3d,
                DensityUnit.KilogramPerLiter => baseUnitValue / 1e3,
                DensityUnit.KilopoundPerCubicFoot => (baseUnitValue * 0.062427961) / 1e3d,
                DensityUnit.KilopoundPerCubicInch => (baseUnitValue * 3.6127298147753e-5) / 1e3d,
                DensityUnit.MicrogramPerCubicMeter => (baseUnitValue * 1e3) / 1e-6d,
                DensityUnit.MicrogramPerDeciliter => (baseUnitValue * 1e-1) / 1e-6d,
                DensityUnit.MicrogramPerLiter => (baseUnitValue * 1) / 1e-6d,
                DensityUnit.MicrogramPerMilliliter => (baseUnitValue * 1e-3) / 1e-6d,
                DensityUnit.MilligramPerCubicMeter => (baseUnitValue * 1e3) / 1e-3d,
                DensityUnit.MilligramPerDeciliter => (baseUnitValue * 1e-1) / 1e-3d,
                DensityUnit.MilligramPerLiter => (baseUnitValue * 1) / 1e-3d,
                DensityUnit.MilligramPerMilliliter => (baseUnitValue * 1e-3) / 1e-3d,
                DensityUnit.NanogramPerDeciliter => (baseUnitValue * 1e-1) / 1e-9d,
                DensityUnit.NanogramPerLiter => (baseUnitValue * 1) / 1e-9d,
                DensityUnit.NanogramPerMilliliter => (baseUnitValue * 1e-3) / 1e-9d,
                DensityUnit.PicogramPerDeciliter => (baseUnitValue * 1e-1) / 1e-12d,
                DensityUnit.PicogramPerLiter => (baseUnitValue * 1) / 1e-12d,
                DensityUnit.PicogramPerMilliliter => (baseUnitValue * 1e-3) / 1e-12d,
                DensityUnit.PoundPerCubicCentimeter => baseUnitValue * 2.204622621848775e-6,
                DensityUnit.PoundPerCubicFoot => baseUnitValue * 0.062427961,
                DensityUnit.PoundPerCubicInch => baseUnitValue * 3.6127298147753e-5,
                DensityUnit.PoundPerCubicMeter => baseUnitValue * 2.204622621848775,
                DensityUnit.PoundPerCubicMillimeter => baseUnitValue * 2.204622621848775e-9,
                DensityUnit.PoundPerImperialGallon => baseUnitValue / 9.9776398e1,
                DensityUnit.PoundPerUSGallon => baseUnitValue / 1.19826427e2,
                DensityUnit.SlugPerCubicCentimeter => baseUnitValue / 14593903,
                DensityUnit.SlugPerCubicFoot => baseUnitValue * 0.00194032033,
                DensityUnit.SlugPerCubicInch => baseUnitValue / 890574.60201535,
                DensityUnit.SlugPerCubicMeter => baseUnitValue / 14.5939,
                DensityUnit.SlugPerCubicMillimeter => baseUnitValue / 14593903000,
                DensityUnit.TonnePerCubicCentimeter => baseUnitValue * 1e-9,
                DensityUnit.TonnePerCubicFoot => baseUnitValue / 3.53146667214886e4,
                DensityUnit.TonnePerCubicInch => baseUnitValue / 6.10237440947323e7,
                DensityUnit.TonnePerCubicMeter => baseUnitValue * 0.001,
                DensityUnit.TonnePerCubicMillimeter => baseUnitValue * 1e-12,
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion

    }
}

