//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Area is a quantity that expresses the extent of a two-dimensional surface or shape, or planar lamina, in the plane. Area can be understood as the amount of material with a given thickness that would be necessary to fashion a model of the shape, or the amount of paint necessary to cover the surface with a single coat.[1] It is the two-dimensional analog of the length of a curve (a one-dimensional concept) or the volume of a solid (a three-dimensional concept).
    /// </summary>
    public struct  Area
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly QuantityValue _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly AreaUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public QuantityValue Value => _value;

        /// <inheritdoc />
        public AreaUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Area(QuantityValue value, AreaUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static AreaUnit BaseUnit { get; } = AreaUnit.SquareMeter;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static Area MaxValue { get; } = new Area(QuantityValue.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static Area MinValue { get; } = new Area(QuantityValue.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Area Zero { get; } = new Area(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.Acre"/>
        /// </summary>
        public QuantityValue Acres => As(AreaUnit.Acre);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.AWG"/>
        /// </summary>
        public QuantityValue AWG => As(AreaUnit.AWG);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.CircularMil"/>
        /// </summary>
        public QuantityValue CircularMils => As(AreaUnit.CircularMil);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.Hectare"/>
        /// </summary>
        public QuantityValue Hectares => As(AreaUnit.Hectare);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.KilocircularMil"/>
        /// </summary>
        public QuantityValue KilocircularMils => As(AreaUnit.KilocircularMil);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareCentimeter"/>
        /// </summary>
        public QuantityValue SquareCentimeters => As(AreaUnit.SquareCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareDecimeter"/>
        /// </summary>
        public QuantityValue SquareDecimeters => As(AreaUnit.SquareDecimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareFoot"/>
        /// </summary>
        public QuantityValue SquareFeet => As(AreaUnit.SquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareInch"/>
        /// </summary>
        public QuantityValue SquareInches => As(AreaUnit.SquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareKilometer"/>
        /// </summary>
        public QuantityValue SquareKilometers => As(AreaUnit.SquareKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareMeter"/>
        /// </summary>
        public QuantityValue SquareMeters => As(AreaUnit.SquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareMicrometer"/>
        /// </summary>
        public QuantityValue SquareMicrometers => As(AreaUnit.SquareMicrometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareMile"/>
        /// </summary>
        public QuantityValue SquareMiles => As(AreaUnit.SquareMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareMillimeter"/>
        /// </summary>
        public QuantityValue SquareMillimeters => As(AreaUnit.SquareMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareNauticalMile"/>
        /// </summary>
        public QuantityValue SquareNauticalMiles => As(AreaUnit.SquareNauticalMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareYard"/>
        /// </summary>
        public QuantityValue SquareYards => As(AreaUnit.SquareYard);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.UsSurveySquareFoot"/>
        /// </summary>
        public QuantityValue UsSurveySquareFeet => As(AreaUnit.UsSurveySquareFoot);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.Acre"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Area FromAcres(QuantityValue acres) => new Area(acres, AreaUnit.Acre);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.AWG"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Area FromAWG(QuantityValue awg) => new Area(awg, AreaUnit.AWG);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.CircularMil"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Area FromCircularMils(QuantityValue circularmils) => new Area(circularmils, AreaUnit.CircularMil);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.Hectare"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Area FromHectares(QuantityValue hectares) => new Area(hectares, AreaUnit.Hectare);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.KilocircularMil"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Area FromKilocircularMils(QuantityValue kilocircularmils) => new Area(kilocircularmils, AreaUnit.KilocircularMil);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Area FromSquareCentimeters(QuantityValue squarecentimeters) => new Area(squarecentimeters, AreaUnit.SquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareDecimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Area FromSquareDecimeters(QuantityValue squaredecimeters) => new Area(squaredecimeters, AreaUnit.SquareDecimeter);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Area FromSquareFeet(QuantityValue squarefeet) => new Area(squarefeet, AreaUnit.SquareFoot);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Area FromSquareInches(QuantityValue squareinches) => new Area(squareinches, AreaUnit.SquareInch);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Area FromSquareKilometers(QuantityValue squarekilometers) => new Area(squarekilometers, AreaUnit.SquareKilometer);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Area FromSquareMeters(QuantityValue squaremeters) => new Area(squaremeters, AreaUnit.SquareMeter);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareMicrometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Area FromSquareMicrometers(QuantityValue squaremicrometers) => new Area(squaremicrometers, AreaUnit.SquareMicrometer);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Area FromSquareMiles(QuantityValue squaremiles) => new Area(squaremiles, AreaUnit.SquareMile);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Area FromSquareMillimeters(QuantityValue squaremillimeters) => new Area(squaremillimeters, AreaUnit.SquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareNauticalMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Area FromSquareNauticalMiles(QuantityValue squarenauticalmiles) => new Area(squarenauticalmiles, AreaUnit.SquareNauticalMile);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareYard"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Area FromSquareYards(QuantityValue squareyards) => new Area(squareyards, AreaUnit.SquareYard);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.UsSurveySquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Area FromUsSurveySquareFeet(QuantityValue ussurveysquarefeet) => new Area(ussurveysquarefeet, AreaUnit.UsSurveySquareFoot);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="AreaUnit" /> to <see cref="Area" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Area unit value.</returns>
        public static Area From(QuantityValue value, AreaUnit fromUnit)
        {
            return new Area(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public QuantityValue As(AreaUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public Area ToUnit(AreaUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Area(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private QuantityValue GetValueInBaseUnit()
        {
            return Unit switch
            {
                AreaUnit.Acre => _value * 4046.85642,
                AreaUnit.AWG => 1.2668E-8 * Math.Pow(92, (36 - _value) / 39),
                AreaUnit.CircularMil => _value * 5.067e-10,
                AreaUnit.Hectare => _value * 1e4,
                AreaUnit.KilocircularMil => _value * 5.067e-7,
                AreaUnit.SquareCentimeter => _value * 1e-4,
                AreaUnit.SquareDecimeter => _value * 1e-2,
                AreaUnit.SquareFoot => _value * 9.290304e-2,
                AreaUnit.SquareInch => _value * 0.00064516,
                AreaUnit.SquareKilometer => _value * 1e6,
                AreaUnit.SquareMeter => _value,
                AreaUnit.SquareMicrometer => _value * 1e-12,
                AreaUnit.SquareMile => _value * 2.59e6,
                AreaUnit.SquareMillimeter => _value * 1e-6,
                AreaUnit.SquareNauticalMile => _value * 3429904,
                AreaUnit.SquareYard => _value * 0.836127,
                AreaUnit.UsSurveySquareFoot => _value * 0.09290341161,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private QuantityValue GetValueAs(AreaUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                AreaUnit.Acre => baseUnitValue / 4046.85642,
                AreaUnit.AWG => 36 - (39 * Math.Log(baseUnitValue / 1.2668E-8, 92)),
                AreaUnit.CircularMil => baseUnitValue / 5.067e-10,
                AreaUnit.Hectare => baseUnitValue / 1e4,
                AreaUnit.KilocircularMil => baseUnitValue / 5.067e-7,
                AreaUnit.SquareCentimeter => baseUnitValue / 1e-4,
                AreaUnit.SquareDecimeter => baseUnitValue / 1e-2,
                AreaUnit.SquareFoot => baseUnitValue / 9.290304e-2,
                AreaUnit.SquareInch => baseUnitValue / 0.00064516,
                AreaUnit.SquareKilometer => baseUnitValue / 1e6,
                AreaUnit.SquareMeter => baseUnitValue,
                AreaUnit.SquareMicrometer => baseUnitValue / 1e-12,
                AreaUnit.SquareMile => baseUnitValue / 2.59e6,
                AreaUnit.SquareMillimeter => baseUnitValue / 1e-6,
                AreaUnit.SquareNauticalMile => baseUnitValue / 3429904,
                AreaUnit.SquareYard => baseUnitValue / 0.836127,
                AreaUnit.UsSurveySquareFoot => baseUnitValue / 0.09290341161,
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion

    }
}

